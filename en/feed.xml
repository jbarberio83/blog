<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://blog.arima.eu/en/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.arima.eu/en/" rel="alternate" type="text/html" /><updated>2020-06-24T06:19:26+00:00</updated><id>https://blog.arima.eu/feed.xml</id><title type="html">ARIMA</title><subtitle></subtitle><entry xml:lang="en"><title type="html">Mutation testing systems, improving the quality of tests</title><link href="https://blog.arima.eu/en/2020/05/25/mutation-testing.html" rel="alternate" type="text/html" title="Mutation testing systems, improving the quality of tests" /><published>2020-05-25T09:00:00+00:00</published><updated>2020-05-25T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/05/25/mutation-testing</id><content type="html" xml:base="https://blog.arima.eu/2020/05/25/mutation-testing.html">&lt;p&gt;Professionally I label myself as a developer, although I don’t like labels very much and I prefer to say that the reason for my work is: to create quality software. But what is &lt;strong&gt;quality software&lt;/strong&gt;? I like to define it as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality software is that which meets the user’s needs efficiently and without errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could add more adjectives, go into detail why needs and not requirements… but for me, that would be the definition. However, it’s difficult to get quality software if it’s not written with quality code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality software → quality code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fortunately, developers are not alone in this task. There are tools for static code analysis (Checkstyle, PMD, FindBugs, SonarQube…) and different recommendations for good practices (personally I would highlight Clean Code and The Pragmatic Programmer). And there among proposals, acronyms and metrics, there’s no developer that doesn’t directly associate the term &lt;em&gt;&lt;strong&gt;quality&lt;/strong&gt;&lt;/em&gt; with the term &lt;em&gt;&lt;strong&gt;testing&lt;/strong&gt;&lt;/em&gt; (right?)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality code → quality tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-the-path-to-quality&quot;&gt;Testing: the path to quality&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tests are as important to the health of a project as the production code is.&lt;/strong&gt;&lt;/p&gt;
  &lt;p align=&quot;right&quot;&gt;&lt;strong&gt;Clean Code.&lt;/strong&gt; Chapter 9: Unit Tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are several types of tests (unit, integration, acceptance…). The most widespread are unit tests and integration tests. With them you get a certain perception of security, since although we do not know if the code does what it should, at least it does what it says.&lt;/p&gt;

&lt;p&gt;But is this so? Paradoxically, this practice consists of generating more code. So we continue programming, but who says this code does what it says? That is, who watches over the quality of the tests? Again another association of terms: &lt;strong&gt;quality tests&lt;/strong&gt; are those that offer a high % of code &lt;strong&gt;coverage&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality tests → High % coverage of our code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A higher percentage of code coverage gives better tests and more reliable code. This is nothing new. If I talk from my personal experience, a few years ago (back in the early 2000s) the minimum % coverage requirement was part of the delivery specifications of some projects. “&lt;em&gt;This deliverable must have a battery of tests that ensure a minimum of 70% code coverage&lt;/em&gt;”, as a synonym of error-free code and proven quality in at least 70% of the code.&lt;/p&gt;

&lt;p&gt;Taking as an example an application to check the hours (or part hours) worked, let’s imagine that we are developing a method that, given a worker and a day, checks the status of the worker’s time sheets on that day (whether or not he has done the required hours, if he has done extra time….).&lt;/p&gt;

&lt;h5 id=&quot;reportsserviceimpljava-ver-todo&quot;&gt;ReportsServiceImpl.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/feature/01_tests_for_project_requirements/src/main/java/eu/arima/tr/reports/ReportsServiceImpl.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWorkerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see an example of tests that we submitted at the time:&lt;/p&gt;

&lt;h5 id=&quot;getdaystatussummaryforworkeranddaytestsjava-ver-todo&quot;&gt;GetDayStatusSummaryForWorkerAndDayTests.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/92fd1b537de787bc2a5d10dc85c9ee80295350d8/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_status_summary_for_worker_and_day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculates_the_status_based_on_worker_and_date_worklogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFromTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setToTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We configured &lt;a href=&quot;https://www.eclemma.org/jacoco/&quot;&gt;JaCoCo&lt;/a&gt; to get the test coverage report and the result is as follows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/01jacocoreport.png&quot; alt=&quot;JaCoCo report general&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have a coverage of 92% of lines and 87% of branches: objective met. But…if you look: the first test will (almost) never fail because it always ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;assert true&lt;/code&gt;, the second is a bit “more complete” because at least it verifies that the hours (or part hours) are retrieved… &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Well this was my reality, and I am very much afraid that it was THE reality of that time in many projects (and who knows if in some of today). The projects met the code coverage requirements, which was far from having quality software.&lt;/p&gt;

&lt;p&gt;It’s true that the example I have given is extreme, but it is real. In my opinion, the problem is in the focus: everything has been turned around and the tests are created as a mere tool to fulfill one of the requirements of the project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;minimum % coverage required → test = “waste of time”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s go back to the original approach. It would remain:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality software → quality code → quality tests → % coverage of code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this scenario, the tests are created under the premise of having a higher quality code and the % coverage becomes another indicator. We are going to see a fragment of a better test example, one of those we do out of conviction and not just to fulfill a requirement (I suppose that they are more similar to those that we can find in current projects than previous ones …).&lt;/p&gt;

&lt;h5 id=&quot;getdaystatussummaryforworkeranddaytestsjava-ver-todo-1&quot;&gt;GetDayStatusSummaryForWorkerAndDayTests.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/feature/02_tests_for_testing_purposes/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_less_than_8_hours_the_status_is_MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_equal_to_8_hours_the_status_is_RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_more_than_8_hours_the_status_is_EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case the coverage percentage is 100% of code lines and branches. And it also seems that the tests already make more sense. Now, yes, we would feel safe with them, right? Is that so, or is it just a perception?&lt;/p&gt;

&lt;p&gt;If someone modified part of the method, of course, before committing and pushing, it would pass the tests. If there were no tests in red, all clear: nothing has been “broken”.&lt;/p&gt;

&lt;p&gt;Can we be sure?&lt;/p&gt;

&lt;p&gt;Let’s suppose that what is modified in the example method is:&lt;/p&gt;

&lt;h5 id=&quot;reportsserviceimpljava&quot;&gt;ReportsServiceImpl.java&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;for&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our tests will continue to pass&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. We also continue with a high % coverage… Everything is perfect!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Test → &lt;strong&gt;feeling&lt;/strong&gt; of security&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mutation-testing-systems-securing-the-way&quot;&gt;Mutation testing systems: securing the way&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Because we can’t write perfect software, it follows that we can’t write perfect test software either. We need to test the tests.&lt;/strong&gt;&lt;/p&gt;
  &lt;p align=&quot;right&quot;&gt;&lt;strong&gt;The Pragmatic Programmer.&lt;/strong&gt; Chapter 8: Pragmatic projects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems that the tests we have created are not as good as we thought, they don’t have enough quality to ensure the quality (forgive the repetition) of our method. We have been offered a false sense of security.&lt;/p&gt;

&lt;p&gt;It’s clear that achieving a high % coverage isn’t easy and if writing tests is costly, writing good tests is even more so, and what we get is an unreal sense of security. Couldn’t we make this feeling closer to reality? Couldn’t we detect situations, like the one we’ve seen, automatically?&lt;/p&gt;

&lt;p&gt;Well, to deal with this type of situation, the so-called &lt;em&gt;Mutation Testing Systems&lt;/em&gt; come up. The idea behind them is none other than the one we have put forward in the last example: to simulate changes in the source code being tested and verify that in reality, some tests are failed after a modification has been made.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality software → quality code → quality tests → mutation test % coverage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic concepts are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every change that is generated in the code is a &lt;strong&gt;mutant&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Each change (or mutation) that our tests are able to detect is called &lt;strong&gt;killing a mutant&lt;/strong&gt; (killed mutant).&lt;/li&gt;
  &lt;li&gt;Any changes (or mutants) that our tests are not able to detect are &lt;strong&gt;living mutants&lt;/strong&gt; (survived mutant).&lt;/li&gt;
  &lt;li&gt;Changes in the code are generated by &lt;strong&gt;mutant operators&lt;/strong&gt; (mutators / mutation operators), which are grouped into different categories depending on the type of change they make in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I hadn’t heard  of this concept until relatively recently. However, the reality is that it has been with us for several years. Some of the mutation systems for Java are (or have been):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pitest.org/&quot;&gt;PIT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jumble.sourceforge.net/index.html&quot;&gt;Jumble&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jester.sourceforge.net/&quot;&gt;Jester&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeffoffutt/muJava&quot;&gt;muJava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have used PIT because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is easy to use&lt;/li&gt;
  &lt;li&gt;It is easily integrated in the projects that we have used (through a maven plugin) as well as in the IDE (in our case Eclipse)&lt;/li&gt;
  &lt;li&gt;It supports different configurations (some to improve efficiency)&lt;/li&gt;
  &lt;li&gt;It is still active&lt;/li&gt;
  &lt;li&gt;It seems to be the most widely used solution today&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we run the &lt;em&gt;pitest&lt;/em&gt; report in our example, we will see this result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/PitTestCoverageReport01.png&quot; alt=&quot;Informe _Pit test_ general&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we see general result: on one side is the coverage of code lines, and on the other side, the mutation coverage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/PitTestCoverageReportClass01.png&quot; alt=&quot;Informe _Pit test_ clase&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The lines marked in green reflect code in which PIT has made changes and tests have been able to detect them. The lines marked in red reflect the lines of code in which our tests have failed to detect that there had been changes. If we look at line 27, it is the one that we had modified and it passed our tests. Now we have two options: go ahead, accepting that our code may have some fragility, or the most accurate (and logical), add/correct tests that ensure reliability when faced with detected changes.&lt;/p&gt;

&lt;p&gt;In the following &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/03_tests_improving_quality&quot;&gt;link&lt;/a&gt; the sample code which we have worked on is available, where we have improved the tests to achieve greater mutant coverage.&lt;/p&gt;

&lt;p&gt;The mutants that are applied are configurable, and the balance between the number/type of mutants configured and the execution time must be assessed. The greater the number of tests, the greater the number of lines of code and the greater the number of mutants, the more time Pit will need to generate the corresponding report. We could reach a point where it is so costly to do the report that we skip it, and then all the effort put into testing would be lost. In the examples, we have seen only unit tests, but the same applies to integration tests (many of them already costly in themselves).&lt;/p&gt;

&lt;p&gt;In our case, we usually configure the ones that come by default (DEFAULTS) and add those of the following group (NEW_DEFAULTS). In the sample code, others are configured, but &lt;a href=&quot;https://pitest.org/quickstart/mutators/&quot;&gt;here&lt;/a&gt; the Pit mutators are shown, so try to change the configuration and see the different results.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quality software → quality code → quality tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quality software requires quality code, which in turn can be ensured thanks to quality tests.&lt;/p&gt;

&lt;p&gt;Generally, there is more code to test a method than to implement it, which obviously involves a lot of time: we will spend more time testing a method than implementing it. We need to ensure that this effort is not in vain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mutation testing&lt;/strong&gt; is a tool that allows us to evaluate and improve the quality of our tests. The price to pay is the increase in time needed to do it. Taking into account that it is based on code mutations and that it applies not only to unit tests, but also to integration tests, as the code grows and the number of tests increases, it will take longer to execute them. Therefore, it is necessary to look for formulas that ensure that at some stage of our development, all tests are done: if we stop doing them because it is too costly, all the effort will have been for nothing.&lt;/p&gt;

&lt;p&gt;We have taken a firm step, but we are still on the path to quality: what can we do to find this balance? Can we organize the tests in some way to make things easier? Are there tools that allow us to develop/run tests more efficiently?&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;If you want to try all this then download the code from &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/01_tests_for_project_requirements&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Try it for yourself, the code is available &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/02_tests_for_testing_purposes&quot;&gt;here&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>jessica</name></author><category term="testing," /><category term="mutation" /><category term="testing" /><category term="systems," /><category term="pit," /><category term="pitest," /><category term="calidad," /><category term="software" /><category term="quality," /><category term="QA," /><category term="cobertura," /><category term="coverage," /><category term="junit" /><summary type="html">Professionally I label myself as a developer, although I don’t like labels very much and I prefer to say that the reason for my work is: to create quality software. But what is quality software? I like to define it as follows:</summary></entry><entry xml:lang="es"><title type="html">Cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD)</title><link href="https://blog.arima.eu/en/2020/04/28/examen-ckad.html" rel="alternate" type="text/html" title="Cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD)" /><published>2020-04-28T06:00:00+00:00</published><updated>2020-04-28T06:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/28/examen-ckad</id><content type="html" xml:base="https://blog.arima.eu/2020/04/28/examen-ckad.html">&lt;p&gt;En este post voy a explicar un poco mi experiencia de cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linuxfoundation.org/&quot; target=&quot;_blank&quot;&gt;The Linux Foundation&lt;/a&gt; y &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; 
ofrecen dos variantes en la certificación de Kubernetes, CKAD y CKA. En pocas palabras:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cncf.io/certification/ckad/&quot; target=&quot;_blank&quot;&gt;CKAD&lt;/a&gt; está diseñado para desarrolladores de software que deseen desarrollar e implementar sus aplicaciones en Kubernetes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cncf.io/certification/cka/&quot; target=&quot;_blank&quot;&gt;CKA&lt;/a&gt; está diseñado para los administradores de sistemas que administran los clústeres de Kubernetes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En general, CKA cubre un temario más amplio que CKAD. Puedes ver información sobre las similitudes y diferencias entre los dos exámenes &lt;a href=&quot;https://medium.com/faun/cka-vs-ckad-1dd45527505&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/ckad-cka.png&quot; alt=&quot;CKAD / CKA&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como he dicho, CKAD es uno de los dos programas diseñados por la CNCF y The Linux Foundation para certificar a los usuarios que pueden “diseñar, construir, configurar y exponer aplicaciones nativas en la nube para Kubernetes”.&lt;/p&gt;

&lt;p&gt;Si eres un desarrollador que usas la infraestructura centrada en Kubernetes a diario, CKAD es un gran método para medir tus habilidades con los últimos estándares de la industria.&lt;/p&gt;

&lt;p&gt;Cabe destacar que Kubernetes es una herramienta con la que yo ya había trabajado con anterioridad y por lo tanto, estaba familiarizado con la mayoría de conceptos.&lt;/p&gt;

&lt;h2 id=&quot;por-qué-deberías-hacer-este-examen&quot;&gt;¿Por qué deberías hacer este examen?&lt;/h2&gt;

&lt;p&gt;A pesar de que en &lt;a href=&quot;https://arima.eu/&quot; target=&quot;_blank&quot;&gt;ARIMA&lt;/a&gt; por lo general no somos muy partidarios de medir los conocimientos de las personas u organizaciones en función de los certificados que puedan poseer, hay ocasiones en las que disponer de un certificado emitido por un tercero sí que puede ayudar como carta de presentación a la hora de ofrecer soluciones que giran en torno a una herramienta como Kubernetes. Más aún cuando se trata de una organización del prestigio de la CNCF y de un certificado que tiene un cierto grado de dificultad como puede ser el CKAD.&lt;/p&gt;

&lt;h2 id=&quot;prerequisitos&quot;&gt;Prerequisitos&lt;/h2&gt;

&lt;p&gt;No hay prequisitos oficiales para este examen, pero recomiendo tener experiencia práctica en &lt;strong&gt;Docker&lt;/strong&gt; y &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Al trabajarse constantemente con contenedores, uno debe comprender qué es una imagen de Docker, cómo ejecutar los contenedores, extraer y trabajar con imágenes, etc.&lt;/p&gt;

&lt;p&gt;Linux también es esencial para este examen, ya que el examen al ser 100% práctico necesitas tener bastante agilidad a la hora de editar ficheros, cambiar permisos, ejecutar comandos, etc.&lt;/p&gt;

&lt;h2 id=&quot;sobre-el-examen&quot;&gt;Sobre el examen&lt;/h2&gt;

&lt;p&gt;Este es un examen &lt;strong&gt;totalmente práctico&lt;/strong&gt;, no tiene preguntas de opción múltiple.&lt;/p&gt;

&lt;p&gt;Se te dará un conjunto de problemas que tienes que ir solventando desde una línea de comandos desplegada en una aplicación web y se espera que tardes aproximadamente dos horas en completarlo.&lt;/p&gt;

&lt;p&gt;Debes resolver &lt;strong&gt;19 preguntas&lt;/strong&gt; en &lt;strong&gt;2 horas&lt;/strong&gt; y cada pregunta tiene un valor diferente, desde &lt;strong&gt;2% a 13%&lt;/strong&gt;, pero la mayoría de las preguntas están entre &lt;strong&gt;8% y 5%&lt;/strong&gt;. La puntuación no corresponde al nivel de dificultad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para aprobar el examen es necesario sacar al menos el 66%.&lt;/strong&gt; En mi caso, conseguí un 88% en el primer intento y me dio tiempo justo a acabar las 19 preguntas a pesar de que fui bastante rápido en la resolución de los problemas. &lt;strong&gt;El tiempo es todo en este examen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El precio de este examen es de &lt;strong&gt;$300 USD&lt;/strong&gt;, y dispones de otro intento gratuito si suspendes el examen. El examen incluye preguntas de los siguientes temas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core Concepts (13%)&lt;/li&gt;
  &lt;li&gt;Configuration (18%)&lt;/li&gt;
  &lt;li&gt;Multi-Container Pods (10%)&lt;/li&gt;
  &lt;li&gt;Observability (18%)&lt;/li&gt;
  &lt;li&gt;Pod Design (20%)&lt;/li&gt;
  &lt;li&gt;Services &amp;amp; Networking (13%)&lt;/li&gt;
  &lt;li&gt;State Persistence (8%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En el examen, se te proporcionan &lt;strong&gt;4 clústeres&lt;/strong&gt; por los cuales tendrás que ir trabajando hasta completar todos los ejercicios. El sistema operativo que usan es un &lt;strong&gt;Ubuntu 16.04&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/clusters.png&quot; alt=&quot;Clusters&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al comienzo de cada pregunta, se te proporciona el comando que debes ejecutar para ir al clúster en concreto. Por ejemplo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl config use-context k8s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tipos-de-preguntas&quot;&gt;Tipos de preguntas&lt;/h3&gt;

&lt;p&gt;Las preguntas van desde preguntas relativamente cortas, como las que aparecen en la lista de  &lt;a href=&quot;https://github.com/dgkanatsios/CKAD-exercises&quot; target=&quot;_blank&quot;&gt;ejercicios CKAD de Dgkanatsios&lt;/a&gt;, hasta preguntas más largas de unas 6 o 7 líneas.&lt;/p&gt;

&lt;p&gt;Tienes que sentirte cómodo creando &lt;em&gt;pods&lt;/em&gt;, &lt;em&gt;developments&lt;/em&gt;, &lt;em&gt;jobs&lt;/em&gt;, &lt;em&gt;cronjobs&lt;/em&gt;, &lt;em&gt;services&lt;/em&gt;, etc. También habrá ejercicios de &lt;em&gt;rolling updates&lt;/em&gt; and &lt;em&gt;rollbacks&lt;/em&gt;. Básicamente preguntan todo el temario que entra en el examen.&lt;/p&gt;

&lt;h3 id=&quot;recursos-oficiales-del-examen&quot;&gt;Recursos oficiales del examen&lt;/h3&gt;

&lt;p&gt;Estos son los recursos que la propia CNCF pone a disposición de los estudiantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Certified Kubernetes Application Developer: &lt;a href=&quot;https://www.cncf.io/certification/ckad/&quot; target=&quot;_blank&quot;&gt;https://www.cncf.io/certification/ckad/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Curriculum Overview: &lt;a href=&quot;https://github.com/cncf/curriculum&quot; target=&quot;_blank&quot;&gt;https://github.com/cncf/curriculum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Candidate Handbook: &lt;a href=&quot;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&quot; target=&quot;_blank&quot;&gt;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exam Tips: &lt;a href=&quot;http://training.linuxfoundation.org/go/Important-Tips-CKA-CKAD&quot; target=&quot;_blank&quot;&gt;http://training.linuxfoundation.org/go/Important-Tips-CKA-CKAD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;FAQ: &lt;a href=&quot;http://training.linuxfoundation.org/go/cka-ckad-faq&quot; target=&quot;_blank&quot;&gt;http://training.linuxfoundation.org/go/cka-ckad-faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dónde-registrarse&quot;&gt;Dónde registrarse&lt;/h3&gt;

&lt;p&gt;Primero deberás registrarte en &lt;strong&gt;The Linux Foundation&lt;/strong&gt; desde &lt;a href=&quot;https://identity.linuxfoundation.org/user/login&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;. Después, podrás registrarte para el examen desde &lt;a href=&quot;https://identity.linuxfoundation.org/pid/813&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;, donde se te mostrará la siguiente pantalla:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/checkout.png&quot; alt=&quot;Checkout&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez que hayas hecho el pago para el examen, recibirás un correo electrónico y podrás iniciar sesión desde &lt;a href=&quot;https://training.cncf.io/portal&quot; target=&quot;_blank&quot;&gt;este&lt;/a&gt; enlace al portal donde debes seguir una serie de pasos antes de programar y hacer el examen, tales  como verificar los requisitos de tu máquina, leer información importante sobre el examen, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/cncf-checklist.png&quot; alt=&quot;Checkout&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cómo-preparar-el-examen&quot;&gt;Cómo preparar el examen&lt;/h2&gt;

&lt;h3 id=&quot;cursos&quot;&gt;Cursos&lt;/h3&gt;

&lt;p&gt;Como he dicho antes, de cara a prepararme el examen realicé los dos siguientes cursos de &lt;a href=&quot;https://www.udemy.com/&quot; target=&quot;_blank&quot;&gt;Udemy&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/learn-kubernetes/&quot; target=&quot;_blank&quot;&gt;Kubernetes for the Absolute Beginners - Hands-on&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/certified-kubernetes-application-developer/&quot; target=&quot;_blank&quot;&gt;Kubernetes Certified Application Developer (CKAD) with Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El primero, aunque ya tenía nociones básicas de Kubernetes, lo realicé para comprobar que mi base en Kubernetes era la adecuada. No aprendí practicamente nada nuevo en ese curso, por lo que si eres una persona que ya ha trabajado con Kubernetes yo pasaría directamente al segundo. Además, en el segundo curso, hacen repaso de los conceptos más importantes que se dan en el primero.&lt;/p&gt;

&lt;p&gt;El segundo curso me aportó mucho más, ya que está centrado en el examen en sí, y los ejercicios prácticos que tiene son muy buenos. El entorno de pruebas es muy potente (parecido al que te vas a encontrar en el examen), me ayudó mucho a mejorar la velocidad con la que solventaba los problemas.&lt;/p&gt;

&lt;h3 id=&quot;ejercicios-para-practicar&quot;&gt;Ejercicios para practicar&lt;/h3&gt;

&lt;p&gt;Básicamente estos fueron los recursos que use para preparar el examen a parte de los del propio curso, alguno lo hice entero entre 2 y 3 veces, al final tienes que coger la habilidad de poder leer la pregunta y sin dudar un segundo, saber cómo resolver el problema, ya que como repito el tiempo es todo en este examen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bmuschko/ckad-prep&quot; target=&quot;_blank&quot;&gt;https://github.com/bmuschko/ckad-prep&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dgkanatsios/CKAD-exercises&quot; target=&quot;_blank&quot;&gt;https://github.com/dgkanatsios/CKAD-exercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeburst.io/kubernetes-ckad-weekly-challenges-overview-and-tips-7282b36a2681&quot; target=&quot;_blank&quot;&gt;https://codeburst.io/kubernetes-ckad-weekly-challenges-overview-and-tips-7282b36a2681&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En total, entre realizar los dos cursos, estudiar y hacer los ejercicios prácticos habré dedicado unas &lt;strong&gt;90 horas&lt;/strong&gt; para aprobar el examen. Empecé a prepararlo un 30 de marzo e hice el examen el 15 de abril.&lt;/p&gt;

&lt;h2 id=&quot;consejos-y-trucos-útiles&quot;&gt;Consejos y trucos útiles&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sé rápido y preciso. Es un examen muy largo y con poco tiempo.&lt;/strong&gt; No esperes poder responder con tranquilidad todas las preguntas en 120 minutos, no da tiempo, ni siquiera a repasar.&lt;/p&gt;

    &lt;p&gt;Lo que hice yo en el examen fue que si veía que la pregunta tenía un valor &amp;lt; 3% y el enunciado era muy largo, las dejaba para el final y volví a ellas tras haber completado la mayoría de las preguntas. Si te quedas atascado, pasa de pregunta, tienes que lograr responder a las máximas preguntas posibles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cuando estés creando recursos en el clúster, &lt;strong&gt;no escribas archivos YAML desde el principio&lt;/strong&gt;. Usa los argumentos &lt;code class=&quot;highlighter-rouge&quot;&gt;-o yaml --dry-run&lt;/code&gt; siempre que puedas. Si todavía no sabes lo que es, ya estás tardando en aprenderlo!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Si no recuerdas alguna sintaxis al escribir archivos YAML, utiliza &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl explain&lt;/code&gt; en lugar de la documentación. Es más rápido y tiene buena documentación. Te recomiendo que lo practiques para que te vaya saliendo solo.&lt;/p&gt;

    &lt;p&gt;Por ejemplo, si no recuerdas las opciones de &lt;code class=&quot;highlighter-rouge&quot;&gt;livenessProbe&lt;/code&gt; para el contenedor, simplemente escribe &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl explain pod.spec.containers.livenessProbe&lt;/code&gt; y te dará todas las opciones con una buena documentación.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Usa siempre alias, tanto en tu entrenamiento como en el examen, te ahorran tiempo, estos fueron los que usé yo en el examen:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; alias k=kubectl
 alias ks='kubectl config set-context --current --namespace '
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elimina los objetos de Kubernetes rápidamente&lt;/strong&gt;. Eliminar los objetos en Kubernetes a veces tarda hasta 30 segundos debido a que tiene un periodo de gracia, en el examen no te interesa que lo haga así, lo mejor es que siempre fuerces la eliminación del recurso.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ kubectl delete pod nginx --grace-period=0 --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asegúrate que estás en el contexto y namespace adeacuados&lt;/strong&gt;. Vas a tener que estar cambiando de contexto y de namespace constantemente, yo en el examen perdí la cuenta de cuantas veces lo hice, pero es muy importante asegurarse que siempre estás en el clúster y namespace correctos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;¡Usa los marcadores del navegador!&lt;/strong&gt; Solo tienes permitido tener una pestaña extra a la del examen con la documentación de Kubernetes, lo que sí permiten son los marcadores. Te dejo &lt;a href=&quot;/assets/extra/2020-04-22-examen-ckad/CKAD-bookmarks.html&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; los marcadores que creé y utilicé yo en el examen, son enlaces directos a ejemplos que te ayudará a resolver los problemas más rápido.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/marcadores.png&quot; alt=&quot;Marcadores&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;¡Recuerda hacer clic en el botón “Finalizar el examen”!&lt;/strong&gt; Estuve durante cinco minutos sin tocar el teclado preguntándome por qué esto no ha terminado todavía hasta que el supervisor del examen me lo recordó. El botón está oculto en el menú de configuración del examen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Antes de comenzar el examen, debes &lt;strong&gt;quitar todo lo que tengas encima de la mesa: lámpara de escritorio, bebidas, alimentos, etc.&lt;/strong&gt;, posteriormente debes mostrar tu DNI o pasaporte, tu habitación y escritorio. Utilicé una portátil con un monitor externo, así que asegúrate de que tus cables sean lo suficientemente largos o desconéctalos por completo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No te tapes nunca la boca con la mano o murmures porque el examinador te lo recriminará y al menos a mí me desconcentró.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Usa la misma versión de &lt;strong&gt;Kubectl&lt;/strong&gt; y de &lt;strong&gt;Kubernetes&lt;/strong&gt; que el examen. En mi caso fue la versión 1.17. Al usar &lt;code class=&quot;highlighter-rouge&quot;&gt;Minikube for Mac OS&lt;/code&gt; en local, cambiar la versión de Kuberenetes es muy sencillo:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minikube start --kubernetes-version v1.17.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;También se permite el &lt;strong&gt;uso de múltiples monitores&lt;/strong&gt;, yo tenía la documentación de Kubernetes en un monitor y examen en el otro monitor. Me fue de gran utilidad tener de un vistazo ambas pantallas. Eso sí, se te pedirá en el examen que compartas ambas pantallas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Practica&lt;/strong&gt;. No por ser el último consejo es el menos importante. Practica todo lo que puedas. En el examen lo agradecerás.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;resultados&quot;&gt;Resultados&lt;/h2&gt;

&lt;p&gt;Lamentablemente, los resultados no se obtienen de inmediato, tardan hasta 36 horas en darte el resultado. ¡No sabes que larga se me hizo la espera! Pero finalmente llegó, aquí estaba el tan ansiado certificado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/certificate.png&quot; alt=&quot;Certificado&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;No te voy a engañar, no es un examen fácil. Al principio lo verás complicado, pero a medida que vas practicando vas viendo la luz. Tienes que practicar mucho, coger soltura con los comandos &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;, editando ficheros con &lt;code class=&quot;highlighter-rouge&quot;&gt;Vim&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;Nano&lt;/code&gt;, saber moverte bien por la documentación de K8s, etc.&lt;/p&gt;

&lt;p&gt;Me ha parecido una experiencia muy buena para completar mis conocimientos de Kubernetes y estar al día de lo que está ofreciendo la plataforma.&lt;/p&gt;

&lt;p&gt;¡Buena suerte con tu examen CKAD!&lt;/p&gt;</content><author><name>fernando</name></author><category term="certificaciones," /><category term="examenes," /><category term="Kubernetes," /><category term="CNCF," /><category term="CKAD," /><category term="CKA" /><summary type="html">En este post voy a explicar un poco mi experiencia de cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD).</summary></entry><entry xml:lang="en"><title type="html">Dockerfile best practices</title><link href="https://blog.arima.eu/en/2020/04/21/buenas-practicas-para-escribir-un-dockerfile.html" rel="alternate" type="text/html" title="Dockerfile best practices" /><published>2020-04-21T09:00:00+00:00</published><updated>2020-04-21T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/21/buenas-practicas-para-escribir-un-dockerfile</id><content type="html" xml:base="https://blog.arima.eu/2020/04/21/buenas-practicas-para-escribir-un-dockerfile.html">&lt;p&gt;When writing a Dockerfile, the possibilities are endless. You can create images for the same purpose, that work similarly, but are structured in a very different way. Beginning by choosing a starting image (FROM), going through the order of the commands we execute when building the image, or creating intermediate images (&lt;em&gt;multistage builds&lt;/em&gt;), writing a Dockerfile is another world.&lt;/p&gt;

&lt;p&gt;This document contains some of the most important guidelines that need to be followed in order to optimize the time it takes to create the image, as well as its security and the space it takes up.&lt;/p&gt;

&lt;h3 id=&quot;1-command-order-matters&quot;&gt;1. Command order matters&lt;/h3&gt;

&lt;p&gt;Due to the way the cache works when building an image, Docker is able to detect if the command we want to execute has been executed before or not (in a previous &lt;em&gt;build&lt;/em&gt;) and reuse the result from the cache to do it faster. The problem is that, if one of the commands has changed, the commands that follow it cannot be removed from cache because some of them may have been affected and the result may be different.&lt;/p&gt;

&lt;p&gt;This is why it is recommended to order the commands according to how often they have to be changed. If we were creating an image that contains an application, for example, the most common modifications would be those of the code, followed by the resources and finally the dependencies. So we should sort them in ascending order to make sure we optimize cache usage.&lt;/p&gt;

&lt;h3 id=&quot;2-layer-the-commands-together&quot;&gt;2. Layer the commands together&lt;/h3&gt;

&lt;p&gt;In a Dockerfile, each command represents a layer of the final image. It is important to bring together the layers that share the same logic (installing dependencies, for example) to improve the use of cache and to make the Dockerfile more maintainable.&lt;/p&gt;

&lt;p&gt;However, we should bear in mind that, if we perform too many actions in the same command, if at any time we want to change something in the command, the cache will no longer work and we will have to go back and totally rerun it. Therefore, it is important to study each scenario and evaluate the best way to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WRONG&lt;/strong&gt; ❌&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN apt update &amp;amp;&amp;amp; apt install openjdk-8-jdk -y
RUN apt update &amp;amp;&amp;amp; apt install vim -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;GOOD&lt;/strong&gt; ✅&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN apt update &amp;amp;&amp;amp; apt install openjdk-8-jdk vim -y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-delete-the-cache-you-do-not-need&quot;&gt;3. Delete the cache you do not need&lt;/h3&gt;

&lt;p&gt;Cache is good, yes, but which one? We have to understand that when building an image there are two types of cache: 1. that which is generated by Docker with the layers of our image and 2. that generated by our commands within the image itself. The first is good for improving build time, but the second probably is not.&lt;/p&gt;

&lt;p&gt;The second type of cache is usually generated when installing dependencies or during the process of compiling an application, and it is very unlikely that you will use it and most probably it is only taking up space.&lt;/p&gt;

&lt;p&gt;Look at the last line of the following Dockerfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM maven:3.6.3-jdk-11
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;target/*.jar&quot;]
COPY pom.xml .
COPY src ./src
RUN mvn -e -B clean package &amp;amp;&amp;amp; rm -rf /root/.m2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to point out that, in order to delete a file from the image, it is necessary that the file be created and deleted in the same command. If done in different commands, the file will appear to have disappeared, but it will still be in the &lt;em&gt;layer&lt;/em&gt; in which we created it and it will continue consuming space.&lt;/p&gt;

&lt;p&gt;This file still exists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM busybox
RUN touch a
RUN rm a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one does not:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM busybox
RUN touch a &amp;amp;&amp;amp; rm a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the objective is to reduce the space occupied by the final image and we cannot eliminate this type of file in the same command in which we created it, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--squash&lt;/code&gt; option when creating the image, to join all the layers into one where we would then delete the file. But beware! The &lt;code class=&quot;highlighter-rouge&quot;&gt;--squash&lt;/code&gt; option has more implications, such as deleting the image history, so use it only when strictly necessary.&lt;/p&gt;

&lt;h3 id=&quot;4-choose-the-base-image-well&quot;&gt;4. Choose the base image well&lt;/h3&gt;

&lt;p&gt;When choosing an image to start from, the first thing we may do is to take an image that has nothing but the basics (an operating system) and install everything we need on it. This may work, but much better in terms of security, maintainability and space, is to use an image from a trusted provider who has already done so.&lt;/p&gt;

&lt;p&gt;For example, suppose we need an image with Python 3.6 installed. We could use &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; as a base and install Python with the package manager, or use the &lt;code class=&quot;highlighter-rouge&quot;&gt;python: 3.6-alpine&lt;/code&gt; image, which already has Python installed and is maintained by Python developers (in addition to other things).&lt;/p&gt;

&lt;p&gt;The exponent that best achieves this may be &lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot; target=&quot;_blank&quot;&gt;Google Distroless Docker Images&lt;/a&gt;, which is a base image that only contains the necessary dependencies to run your application, eliminating all other elements (such as package managers, shells, and other commands), therefore reducing the attack surface of our containers. These images are specific to each language and the one you need may not be supported, but if it is, you will not find a more secure image from which to start.&lt;/p&gt;

&lt;h3 id=&quot;5-specify-the-version-of-the-base-image&quot;&gt;5. Specify the version of the base image&lt;/h3&gt;

&lt;p&gt;If you have noticed, when choosing the Python image, we have used a &lt;em&gt;tag&lt;/em&gt;. This is also important. For an image to be reproducible, we must choose a &lt;em&gt;tag&lt;/em&gt; for that image so that we know it will not change over time (&lt;em&gt;tag&lt;/em&gt;s like &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt; or&lt;code class=&quot;highlighter-rouge&quot;&gt; slim&lt;/code&gt; do change, watch out!).&lt;/p&gt;

&lt;p&gt;Actually, there is no guarantee that a &lt;em&gt;tag&lt;/em&gt; we choose will always stay the same, regardless of whether it is a generic one like &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt; or a specific one like &lt;code class=&quot;highlighter-rouge&quot;&gt;3.6.8-alpine-slim&lt;/code&gt;. The best practice of all would be to choose the specific version of an image that we want to use, and use its identifier. This identifier can be obtained with the command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images --format &quot;{{.Repository}}:{{.Tag}} {{.ID}}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, if I wanted the identifier of the &lt;code class=&quot;highlighter-rouge&quot;&gt;busybox&lt;/code&gt; image I just added to my local registry, I run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images --format &quot;{{.Repository}}:{{.Tag}} {{.ID}}&quot; |grep busybox
busybox:latest 83aa35aa1c79
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, I could use the identifier as &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; of my Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM 83aa35aa1c79
CMD [&quot;echo&quot;, &quot;Hello!&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;6-the-potential-of-multistage-builds&quot;&gt;6. The potential of &lt;em&gt;multistage build&lt;/em&gt;s&lt;/h3&gt;

&lt;p&gt;When we create an image, we can generate intermediate images that we use for a specific purpose (such as generating an artifact) and that end up being eliminated and are not part of the final image (although the artifact that we have generated is). This is called &lt;em&gt;multistage build&lt;/em&gt;, and is very useful in cases where we have to compile an application, for example.&lt;/p&gt;

&lt;p&gt;Using &lt;em&gt;multistage builds&lt;/em&gt; will make our final image lighter, and probably more secure. Notice how in the following Dockerfile we compile the application in an image which ends up not being used, and generate a JAR that we execute in the final image where we have neither JDK nor Maven.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM maven:3.6.3-jdk-11 as builder
WORKDIR /app
COPY pom.xml .
RUN mvn -e -B dependency:go-offline
COPY src ./src
RUN mvn -e -B clean package

FROM adoptopenjdk:8u242-b08-jre-hotspot
COPY --from=builder /app/target/*.jar /app.jar
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;7-user-without-privileges&quot;&gt;7. User without privileges&lt;/h3&gt;

&lt;p&gt;It is considered good practice in a Dockerfile to modify the end user of the image to one that has the right privileges to fulfil the purpose of the image and nothing more. This will make our image more secure and prevent an administrator user in the container from gaining access to the &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To do this, it is best to add a new user (and a group) and give them the permissions they need. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN groupadd -r usergroup &amp;amp;&amp;amp; useradd -r -g user usergroup
ENTRYPOINT [&quot;sh&quot;, &quot;myScript.sh&quot;]
COPY ./myScript.sh /myScript.sh
RUN chown user /myScript.sh
USER user
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;8-keep-your-secrets-hidden&quot;&gt;8. Keep your secrets hidden&lt;/h3&gt;

&lt;p&gt;It is very common that in an image, we need to use credentials, access &lt;em&gt;token&lt;/em&gt;s or files with information that we do not want to share. If we pass these elements to the image using commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; or&lt;code class=&quot;highlighter-rouge&quot;&gt; ADD&lt;/code&gt;, they will be visible in the image and anyone who has access to it will be able to see them.&lt;/p&gt;

&lt;p&gt;There is a way to add this information to our containers, called &lt;code class=&quot;highlighter-rouge&quot;&gt;docker secret&lt;/code&gt;. The way to implement it is a bit complicated to explain in this document, since it depends on the way you are going to deploy the image (&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; kubernetes&lt;/code&gt;, …). &lt;a href=&quot;https://dzone.com/articles/introduction-to-docker-secrets&quot;&gt;Introduction to Docker Secrets&lt;/a&gt; or &lt;a href=&quot;https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/&quot; target=&quot;_blank&quot;&gt;Distribute Credentials Securely Using Secrets&lt;/a&gt; could be a good starting point.&lt;/p&gt;

&lt;h3 id=&quot;9-copy-only-what-you-need&quot;&gt;9. Copy only what you need&lt;/h3&gt;

&lt;p&gt;The image we generate should only and exclusively contain the files needed. It is common to see commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY . /app&lt;/code&gt;, which will copy the entire context to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; directory. This may not be bad, depending on the context and what we intend to do, but in many cases we may be copying files that we are not going to use or that have confidential information.&lt;/p&gt;

&lt;p&gt;There are two ways to avoid this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Copy only the files that we are going to use, although if there are a lot and we do not have them structured in directories, it could create too many &lt;em&gt;layer&lt;/em&gt;s.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt;. In this file with the same syntax as &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; we can decide which files or directories we want to avoid adding to the context. &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#dockerignore-file&quot; target=&quot;_blank&quot;&gt;More information&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;10-copy-do-not-add&quot;&gt;10. Copy, do not add&lt;/h3&gt;

&lt;p&gt;There are two very similar commands in Dockerfile: &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;. The first is used to copy a series of files or directories from the &lt;em&gt;host&lt;/em&gt; to the image. The second one does the same, but it is also capable of downloading elements from URLs or repositories and decompressing compressed files. For more information on &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, see &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#add&quot; target=&quot;_blank&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It may be that seeing as they do the same and &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; is more powerful, you want to use only this, but you should avoid it. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; for most situations, which will be copying from the &lt;em&gt;host&lt;/em&gt;, and only use &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; when you need something you cannot achieve with &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; without regard for the difference may carry security risks such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_bomb&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;zip bomb&lt;/em&gt;s&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although writing a Dockerfile may seem simple, it is important to follow certain recommendations that will make our &lt;em&gt;building&lt;/em&gt; process run faster and make the resulting image smaller and more secure.&lt;/p&gt;

&lt;p&gt;In this article we have reviewed some of the most important points, which at the same time, in most cases, are very easy to follow. You can find more tips like these in the &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&quot; target=&quot;_blank&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name>urko</name></author><category term="docker," /><category term="dockerfile" /><summary type="html">When writing a Dockerfile, the possibilities are endless. You can create images for the same purpose, that work similarly, but are structured in a very different way. Beginning by choosing a starting image (FROM), going through the order of the commands we execute when building the image, or creating intermediate images (multistage builds), writing a Dockerfile is another world.</summary></entry><entry xml:lang="es"><title type="html">AWS: Cuentas y Organizaciones</title><link href="https://blog.arima.eu/en/2020/04/03/aws-cuentas-y-organizaciones.html" rel="alternate" type="text/html" title="AWS: Cuentas y Organizaciones" /><published>2020-04-03T09:00:00+00:00</published><updated>2020-04-03T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/03/aws-cuentas-y-organizaciones</id><content type="html" xml:base="https://blog.arima.eu/2020/04/03/aws-cuentas-y-organizaciones.html">&lt;p&gt;En esta entrada quiero hablar sobre las cuentas de &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt; y sobre la arquitectura que hay por detrás. La gestión de cuentas de AWS es un poco compleja y puede ralentizar el tiempo necesario para empezar a usar sus servicios (cada vez que pruebo algo nuevo tengo la intención de ir directo al grano, como en este caso crear un cluster de &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;EKS&lt;/a&gt;, y siempre me acabo dando de frente con la cruda realidad). Espero que al final de esta entrada seáis capaces de entender un poco mejor todos los conceptos que voy a explicaros y que agilice vuestro proceso de introducción en AWS.&lt;/p&gt;

&lt;p&gt;Bien, lo primero de lo que hay que hablar es sobre las cuentas. ¿Qué es una cuenta de AWS? Pues no es más que eso, una cuenta, con su identificador único y su email, pero en este caso engloba ciertos conceptos propios de AWS. Cuando creas una cuenta, se crea por defecto un &lt;strong&gt;usuario&lt;/strong&gt; root de la cuenta. Estos son los elementos que puede contener una cuenta:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Usuario&lt;/strong&gt;: Se refiere a cada persona individual que vaya a utilizar los servicios de la cuenta (recomiendan tener uno por cada persona, y no hacer un usuario &lt;em&gt;developer&lt;/em&gt; o &lt;em&gt;admin&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Grupo&lt;/strong&gt;: Un grupo es un conjunto de usuarios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rol&lt;/strong&gt;: Agrupación de políticas que se pueden asignar a usuarios, grupos o servicios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Política&lt;/strong&gt;: Las políticas son agrupaciones de permisos que otorgan o deniegan acceso a diferentes acciones sobre los servicios (como ver las instancias de EC2 de la cuenta, crear nuevas, o borrarlas).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Servicio&lt;/strong&gt;: Un servicio es una funcionalidad de AWS a la que tenemos acceso, como la gestión de clústers de Kubernetes (EKS), repositorios de ficheros (&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3 buckets&lt;/a&gt;), … Lo que quiero que quede claro, es que estos servicios son propios de la cuenta en la que estamos, es decir, &lt;strong&gt;no se pueden compartir entre cuentas&lt;/strong&gt; (esto no es del todo cierto, se pueden otorgar permisos a otra cuenta para acceder a nuestros servicios, pero esto es rizar el rizo, y, por lo que entiendo, una mala utilización del sistema en la mayoría de los casos).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto que he explicado se puede gestionar desde el servicio &lt;a href=&quot;https://aws.amazon.com/iam/&quot;&gt;IAM&lt;/a&gt; (&lt;em&gt;Identity and Access Management&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;organizaciones&quot;&gt;Organizaciones&lt;/h2&gt;

&lt;p&gt;Todo esto probablemente sea todo lo que tenéis que entender para trabajar con AWS a nivel individual, pero cuando trabajas en una empresa las cosas se complican un poco. Para dar mayor poder de gestión, AWS tiene un servicio llamado &lt;em&gt;Organizations&lt;/em&gt;. Una organización se puede entender como un conjunto de cuentas.&lt;/p&gt;

&lt;p&gt;Cuando una cuenta crea una organización, esa cuenta pasa a ser la cuenta master de la organización y tiene acceso total. Aquí es donde se empieza a complicar un poco el asunto. Desde esta organización se pueden crear nuevas cuentas de la organización, que son prácticamente equivalentes a una cuenta creada de manera “normal”, como la cuenta master. Hay ciertas restricciones para estas cuentas, como que no pueden crear nuevas organizaciones ni salir de la organización actual (aunque he escuchado que en un futuro próximo puede que sí), pero si se les otorgan los permisos necesarios, pueden llegar a tener tanto poder como la cuenta master. Por último, se puede invitar a nuestra organización a cuentas que no lo sean ya, y estas cuentas sí que pueden ir y venir sin restricción.&lt;/p&gt;

&lt;p&gt;Otro concepto que introducen las organizaciones son los OU (&lt;em&gt;Organizational Unit&lt;/em&gt;). Estos elementos son agrupaciones lógicas de cuentas y de OUs (un OU puede agrupar a cuentas y OUs, hasta 5 niveles de profundidad). Las diferentes cuentas de nuestra organización se pueden mover entre OUs sin problemas, pero hay que recordar que cada cuenta sigue teniendo sus usuarios, grupos, servicios, etc, y que estos &lt;strong&gt;no se pueden sacar de la cuenta&lt;/strong&gt;. ¿Que por qué digo esto? Pues porque quiero introducir el último concepto importante sobre las organizaciones. Los &lt;a href=&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html&quot;&gt;&lt;em&gt;Service Control Policies&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;Service Control Policies&lt;/em&gt; o SCPs son políticas que se utilizan para gestionar nuestra organización. Son diferentes de las políticas de una cuenta pero asumamos de momento que son iguales. Estas políticas se pueden aplicar a la organización, a un OU, o a una cuenta (o a conjuntos de estos elementos), y cuando se aplica a uno de estos elementos &lt;strong&gt;también se aplican a todos los elementos que contengan&lt;/strong&gt;. Es decir, si aplicamos un SCP a un OU &lt;em&gt;ou1&lt;/em&gt;, y &lt;em&gt;ou1&lt;/em&gt; contiene un cuenta &lt;em&gt;c1&lt;/em&gt;, el SCP se aplicará tanto a &lt;em&gt;ou1&lt;/em&gt; como a &lt;em&gt;c1&lt;/em&gt;. Si después movemos esta cuenta &lt;em&gt;c1&lt;/em&gt; a otro OU &lt;em&gt;ou2&lt;/em&gt;, &lt;em&gt;ou1&lt;/em&gt; seguirá con el SCP aplicado, pero &lt;em&gt;c1&lt;/em&gt; ya no. Es decir, si movemos cuentas a nivel jerárquico, tenemos que tener cuidado con los SCPs que haya aplicados tanto en el origen como en el destino.&lt;/p&gt;

&lt;p&gt;Hay varias estrategias para estructurar nuestra organización, aquí os dejo algunas que he visto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por entorno de trabajo (&lt;em&gt;development, testing, production&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Por cliente o departamento (Y dentro de cada una de ellos podríamos volver a organizarlo por entorno de trabajo, por ejemplo).&lt;/li&gt;
  &lt;li&gt;Por cada entidad a la que tengamos que cobrar (se puede ver el uso de recursos de cada OU).&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-04-03-aws-cuentas-y-organizaciones/OrganizationHierarchy.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://es.slideshare.net/AmazonWebServices/wrangling-multiple-aws-accounts-with-aws-organizations-79796025&quot; target=&quot;_blank&quot; style=&quot;text-align: center; display: block;&quot;&gt;Fuente de la imagen&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scps-vs-políticas-de-iam&quot;&gt;SCPs vs Políticas de IAM&lt;/h2&gt;

&lt;p&gt;De momento, hemos hablado los SCPs de las organizaciones y de las políticas del IAM como si fuesen lo mismo, pero no lo son. Siguen siendo conjuntos de permisos, de hecho, muchos de los permisos que se utilizan son los mismos en ambos casos, pero &lt;strong&gt;la diferencia está en el propósito&lt;/strong&gt; que tienen.&lt;/p&gt;

&lt;p&gt;Mientras que una política de IAM sirve para otorgar permisos (a un usuario, grupo, servicio, …) para acceder y utilizar un servicio, un SCP pretende otorgarle a una cuenta la habilidad de dar esos permisos. Es decir, para que dentro de una cuenta se use cierto permiso en concreto, un SCP deberá haber habilitado a esa cuenta ese permiso (o no habérselo denegado, según se utilicen estrategias de &lt;em&gt;whitelist&lt;/em&gt; o &lt;em&gt;blacklist&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Esto implica que los permisos resultantes que se le aplican a un usuario, por ejemplo, son &lt;strong&gt;la intersección entre políticas y SCPs&lt;/strong&gt;. Un ejemplo práctico de esto sería el siguiente:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;La cuenta &lt;em&gt;c1&lt;/em&gt; tiene asignado un SCP que le permite otorgar permisos para listar cubos de S3 y para crear nuevos cubos.&lt;/li&gt;
  &lt;li&gt;Se le aplica a un usuario &lt;em&gt;u1&lt;/em&gt; de la cuenta &lt;em&gt;a1&lt;/em&gt; una política de IAM que le permite listar los cubos de S3 y borrarlos.&lt;/li&gt;
  &lt;li&gt;Como la cuenta &lt;em&gt;a1&lt;/em&gt; no tiene permisos para otorgar el permiso de borrar cubos de S3, a &lt;em&gt;u1&lt;/em&gt; solo se le aplica el permiso de listar cubos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-04-03-aws-cuentas-y-organizaciones/SCPvsIAM.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Como habréis podido ver, el servicio para gestionar una organización en AWS es una herramienta potente para poder agrupar cuentas y administrarlas desde una sola, pero tiene cierta complejidad.&lt;/p&gt;

&lt;p&gt;Después de todo lo que he dicho, la recomendación que yo os hago es: Piensa antes de actuar:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;¿Que eres un único usuario y quieres utilizar ciertos servicios de manera individual?, pues olvidate de &lt;em&gt;Organizations&lt;/em&gt; y empieza a trabajar directamente.&lt;/li&gt;
  &lt;li&gt;¿Que tienes que gestionar una pequeña empresa con diferentes proyectos, departamentos o clientes?, párate a plantearte tu escenario y gestiona las diversas cuentas que necesites con la jerarquía adecuada.&lt;/li&gt;
  &lt;li&gt;¿Que eres una gran organización y tienes que administrar una compleja estructura de cuentas con miles de usuarios?, probablemente deberías contactar con Amazon y pedir la ayuda de uno de sus arquitectos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El objetivo de &lt;em&gt;Organizations&lt;/em&gt; es ayudarte y debería acabar evitándote más problemas de los que te ha causado en un primer momento.&lt;/p&gt;</content><author><name>urko</name></author><category term="aws," /><category term="organizacion," /><category term="organizaciones," /><category term="iam," /><category term="scp," /><category term="cuenta," /><category term="cuentas" /><summary type="html">En esta entrada quiero hablar sobre las cuentas de Amazon Web Services y sobre la arquitectura que hay por detrás. La gestión de cuentas de AWS es un poco compleja y puede ralentizar el tiempo necesario para empezar a usar sus servicios (cada vez que pruebo algo nuevo tengo la intención de ir directo al grano, como en este caso crear un cluster de EKS, y siempre me acabo dando de frente con la cruda realidad). Espero que al final de esta entrada seáis capaces de entender un poco mejor todos los conceptos que voy a explicaros y que agilice vuestro proceso de introducción en AWS.</summary></entry><entry xml:lang="es"><title type="html">¿Es viable ejecutar Java en contenedores Docker?</title><link href="https://blog.arima.eu/en/2020/02/11/java-en-contenedores-docker.html" rel="alternate" type="text/html" title="¿Es viable ejecutar Java en contenedores Docker?" /><published>2020-02-11T09:00:00+00:00</published><updated>2020-02-11T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/02/11/java-en-contenedores-docker</id><content type="html" xml:base="https://blog.arima.eu/2020/02/11/java-en-contenedores-docker.html">&lt;p&gt;En nuestro alrededor existen muchas empresas que llevan años trabajando sobre Java utilizando un stack tecnológico tradicional (Spring, Tomcat, Weblogic, JPA, etc). Esta infraestructura ha sido bastante estable en el tiempo y ha sufrido pocos cambios.&lt;/p&gt;

&lt;p&gt;Sin embargo, reciemente han surgido nuevas infraestructuras cloud basadas en Kubernetes (&lt;a href=&quot;https://azure.microsoft.com/en-us/free/kubernetes-service/&quot; target=&quot;_blank&quot;&gt;Azure&lt;/a&gt;, &lt;a href=&quot;https://www.redhat.com/es/technologies/cloud-computing/openshift&quot; target=&quot;_blank&quot;&gt;Openshift&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/es/eks/&quot; target=&quot;_blank&quot;&gt;Amazon EKS&lt;/a&gt;, etc) y estas empresas ahora se encuentran en proceso de evaluación o transición a Kubernetes. En este proceso, surgen dudas y se cuestiona por ejemplo, si el stack tecnológico empleado hasta ahora sigue siendo valido en estos nuevos entornos  cloud.&lt;/p&gt;

&lt;p&gt;En estos casos, como suele ser habitual, solemos echar mano de Google para consultar cómo es la transición de los proyectos Java a Kubernetes. Sorprendentemente nos encontramos artículos y presentaciones que nos pueden asustar a dar el salto a Kubernetes. Por ejemplo, &lt;a href=&quot;https://jaxenter.com/nobody-puts-java-container-139373.html&quot; target=&quot;_blank&quot;&gt;Nobody puts Java in a container&lt;/a&gt; o &lt;a href=&quot;https://vimeo.com/181900266&quot; target=&quot;_blank&quot;&gt;Nobody puts Java in the container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-11-java-en-contenedores-docker/no-body-puts-java-in-a-container.png&quot; alt=&quot;Nobody puts java in containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visto esto, a todos nos viene la misma pregunta a la cabeza: ¿es viable ejecutar Java en contenedores Docker?&lt;/p&gt;

&lt;h2 id=&quot;java-ergonomics&quot;&gt;Java Ergonomics&lt;/h2&gt;

&lt;p&gt;La plataforma Java se creó en el año 1995 y un poco más tarde vinieron los servidores web y servidores de aplicación para desarrollar aplicaciones Web sobre Java. En aquel entonces no existía el concepto de &lt;a href=&quot;https://www.docker.com/resources/what-container&quot; target=&quot;_blank&quot;&gt;contenedor&lt;/a&gt; ni tampoco el movimiento &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;cloud native&lt;/a&gt;. Lo habitual era que el servidor de aplicaciones Java se ejecutara en una máquina dedicada y en dicho servidor se desplegaban múltiples aplicaciones Web (wars o ears).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-02-11-java-en-contenedores-docker/servidor-java-ee.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Java fue diseñado para ejecutarse sobre este tipo de infraestructuras, una única JVM en un servidor. En base a esto, la JVM ejecuta el proceso &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html&quot; target=&quot;_blank&quot;&gt;Java Ergonomics&lt;/a&gt; que calcula los parámetros de configuración de JVM en función de los recursos HW disponibles en la máquina. Por ejemplo, Java Ergonomics establece el tamaño de heap máximo de JVM como la cuarta parte de la RAM del servidor. Es decir, en un servidor con 64GB de RAM el tamaño máximo del Heap es 16GB por defecto.&lt;/p&gt;

&lt;p&gt;Todo bien hasta ahora. Un servidor para cada JVM y Java Ergonomics configura la JVM en base a los recursos del servidor. Pero, ¿qué ocurre si ejecutamos Java Ergonomics en un contenedor Docker?&lt;/p&gt;

&lt;h2 id=&quot;primeras-experiencias-de-java-en-docker&quot;&gt;Primeras experiencias de Java en Docker&lt;/h2&gt;

&lt;p&gt;Cuando ejecutamos una aplicación Java en un contenedor, nos interesa que Java Ergonomics calcule los parámetros de JVM en función de los recursos del propio contenedor. Por ejemplo, si arrancamos un contenedor con 4GB de memoria, esperamos que Java Ergonomics establezca 1GB de heap máximo.&lt;/p&gt;

&lt;p&gt;Sin embargo, las primeras experiencias de Java en contenedores demostraron que eso no era así. Java Ergonomics continuaba configurando la JVM en base a los recursos del servidor en lugar de los recursos del contenedor. Es decir, si el servidor tiene 64GB de RAM, se establecía 16 GB de heap máximo, en lugar de 1GB que se esperaba. Esto hacía que al escalar una aplicación, por ejemplo a 5 contenedores, se agotara toda la memoria del servidor porque la suma del heap de todos los containers superaba la memoria del servidor (16GB * 5 &amp;gt; 64GB).&lt;/p&gt;

&lt;p&gt;La manera de solventar esto consistía en utilizar los flags de configuración de Java Ergonomics (-Xmx, -Xms, etc), pero algunos se dieron cuenta demasiado tarde, cuando la aplicación que tenían en producción estaba sufriendo caídas y problemas de memoria OOMKilled. Este tipo de problemas motivaron los artículos antes citados que advertían del riesgo que implicaba ejecutar Java en contenedores.&lt;/p&gt;

&lt;h2 id=&quot;java-container-aware&quot;&gt;Java Container Aware&lt;/h2&gt;

&lt;p&gt;Conocidos los problemas de Java Ergonomics con los contenedores Docker, &lt;a href=&quot;https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits&quot; target=&quot;_blank&quot;&gt;Oracle reaccionó&lt;/a&gt; e implementó un soporte de contenedores experimental en las versiones Java 8u131 y Java 9. Sin embargo, este soporte experimental tenía carencias que finalmente fueron resueltas en las versiones Java 8u191 y Java 10.&lt;/p&gt;

&lt;p&gt;A partir de estas versiones, Java Ergonomics calcula automáticamente la configuración de JVM en base a los recursos del contenedor. Si queréis probar las diferencias entre versiones diferentes de Java en contenedores, podéis jugar con este &lt;a href=&quot;https://github.com/wearearima/docker-java-cpu-memory-limit&quot; target=&quot;_blank&quot;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Asimismo, también se añadieron nuevas opciones de configuración en la JVM para ajustar mejor la configuración del heap en un contenedor: &lt;code class=&quot;highlighter-rouge&quot;&gt;InitialRAMPercentage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxRAMPercentage&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;MinRAMPercentage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con todos estos cambios, ya se considera que &lt;strong&gt;Java es Container Aware a partir de las versiones Java 8u191 y Java 10&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Cuando se creó Java en 1995 nadie se imaginaba que surgirían las tecnologías Docker, Kubernetes, etc. Entonces, ¿es viable ejecutar Java en contenedores?&lt;/p&gt;

&lt;p&gt;La respuesta es que sí. La comunidad Java está reaccionando y se está adaptando a los cambios que suponen estas nuevas tecnologías cloud y contenedores. Uno de los primeros obstáculos fue solventar la compatibilidad entre Java Ergonomics y los contendores. Ese escollo ya está resuelto con las versiones superiores de Java y no nos tendremos que volver a preocupar.&lt;/p&gt;

&lt;p&gt;De todos modos, hay otros aspectos de la plataforma Java como puede ser el peso de la máquina virtual que la comunidad está tratando de mejorar. En este sentido, también hay mucho movimiento y están surgiendo nuevas herramientas y frameworks que hay que vigilar (&lt;a href=&quot;https://www.graalvm.org/docs/reference-manual/native-image/&quot; target=&quot;_blank&quot;&gt;Graal Native Image&lt;/a&gt;, &lt;a href=&quot;https://micronaut.io/&quot; target=&quot;_blank&quot;&gt;Micronaut&lt;/a&gt;, &lt;a href=&quot;https://quarkus.io/&quot; target=&quot;_blank&quot;&gt;Quarkus&lt;/a&gt;, etc).&lt;/p&gt;</content><author><name>telle</name></author><category term="docker," /><category term="containers," /><category term="java," /><category term="contenedores" /><summary type="html">En nuestro alrededor existen muchas empresas que llevan años trabajando sobre Java utilizando un stack tecnológico tradicional (Spring, Tomcat, Weblogic, JPA, etc). Esta infraestructura ha sido bastante estable en el tiempo y ha sufrido pocos cambios.</summary></entry><entry xml:lang="es"><title type="html">Utilizando el estándar OAuth2 de forma segura</title><link href="https://blog.arima.eu/en/2020/01/27/oauth2.html" rel="alternate" type="text/html" title="Utilizando el estándar OAuth2 de forma segura" /><published>2020-01-27T09:00:00+00:00</published><updated>2020-01-27T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/01/27/oauth2</id><content type="html" xml:base="https://blog.arima.eu/2020/01/27/oauth2.html">&lt;p&gt;El estándar OAuth2 es tan conocido como complejo. El hecho de que sea un estándar en evolución y el exceso de información disponible, hace que sea muy fácil encontrar artículos con información contradictoria o que se recomiende el uso de flujos que actualmente se consideran “legacy” por motivos de seguridad.&lt;/p&gt;

&lt;p&gt;En este artículo, haremos un repaso de los flujos que componen OAuth2 y recomendaremos los flujos a utilizar para cubrir distintos escenarios. Pero antes, empecemos desde el principio.&lt;/p&gt;

&lt;h2 id=&quot;qué-demonios-es-oauth-y-por-qué-debería-importarme&quot;&gt;¿Qué demonios es OAuth y por qué debería importarme?&lt;/h2&gt;
&lt;p&gt;Como estas cosas se entienden mejor con un ejemplo, vamos a ponernos en situación y pensar que queremos desarrollar una aplicación web que gestiona fotos. Como sabemos que muchos de nuestros usuarios potenciales utilizan Google Photos para almacenar y gestionar sus álbumes de fotos, vemos interesante que nuestra aplicación pueda conectarse con Google para obtener los álbumes del usuario que está utilizando nuestra aplicación. Investigamos un poco y vemos que Google &lt;a href=&quot;https://developers.google.com/photos/library/reference/rest/v1/albums/list&quot; target=&quot;_blank&quot;&gt;ofrece una API para obtener el listado de álbumes de un usuario&lt;/a&gt; así que todo parece encajar a la perfección.&lt;/p&gt;

&lt;p&gt;Evidentemente, el servicio de Google Photos no es público y requiere que el usuario final esté autenticado de alguna forma.&lt;/p&gt;

&lt;h3 id=&quot;cómo-podemos-conseguir-esto&quot;&gt;¿Cómo podemos conseguir esto?&lt;/h3&gt;
&lt;p&gt;Una opción podría ser que ese usuario introdujera sus credenciales de Google (usuario y password) en nuestra aplicación, de forma que nuestra aplicación pudiera autenticarse contra Google en nombre de ese usuario y de esta manera, obtener sus álbumes. Esto no tendría mucho sentido ya que estaríamos entregando a la aplicación la llave de nuestra cuenta de Google y además de los álbumes, podría acceder a todo tipo de información o realizar cualquier acción en nuestro nombre.&lt;/p&gt;

&lt;p&gt;Necesitamos por tanto, un sistema que permita otorgar acceso a cierta información por parte de aplicaciones de terceros pero indicando explícitamente qué acciones se van a poder realizar en nuestro nombre y sin tener que entregar para ello nuestras crendenciales. El estándar OAuth nace precisamente para dar respuesta a esta necesidad. El primer borrador de OAuth fué publicado en 2007 y fué desarrollado principalmente por gente de Twitter y Google. En abril de 2010 se publicó la &lt;a href=&quot;https://tools.ietf.org/html/rfc5849&quot; target=&quot;_blank&quot;&gt;versión 1.0 del protocolo OAuth.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Retomando el ejemplo anterior, si implementásemos la aplicación de gestión de fotos utilizando OAuth, veríamos que cuando nuestra aplicación necesitase acceder a la API que devuelve el listado de álbumes que el usario en curso tiene en Google Photos, en lugar de pedir que el usuario introduzca las credenciales de Google en nuestra aplicación, se redirigiría a una pantalla de login gestionada por Google.&lt;/p&gt;

&lt;p&gt;Una vez completada la autenticación, se le mostraría una pantalla en la que tendría que dar el cosentimiento explícito para que la aplicación pudiera consumir esa (y solo esa) información:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/oauth2-consent.png&quot; alt=&quot;Ejemplo de pantalla de consentimiento&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tras el consentimiento del usuario, Google se encarga de devolver el control a la aplicación que inició el proceso proporcionándole un token con una fecha de caducidad. La aplicación podrá utilizar este token en las llamadas a las APIs que correspondan para acceder a la información para la que ha sido autorizado.&lt;/p&gt;

&lt;p&gt;El problema de la primera versión de OAuth es que era complejo, estaba dirigido sobre todo a aplicaciones web y no era demasiado escalable. Para dar respuesta a estas limitaciones, en 2012 se publicó &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot; target=&quot;_blank&quot;&gt;la versión 2.0&lt;/a&gt; del protocolo OAuth junto con el estándar para el uso de &lt;a href=&quot;https://tools.ietf.org/html/rfc6750&quot; target=&quot;_blank&quot;&gt;“bearer tokens”&lt;/a&gt;. Se puede decir que OAuth2 es una reescritura del estándar ya que se aplicaron todas las lecciones aprendidas con la primera versión y esto a su vez les obligó a romper compatibilidad con la primera versión.&lt;/p&gt;

&lt;p&gt;En el estándar OAuth2 se hace referencia a los siguientes roles que son los que participan en los distintos flujos disponibles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Owner:&lt;/strong&gt; Es el dueño de la información a la que se intenta acceder. En el ejemplo anterior, sería el usuario que está utilizando la aplicación y que es el dueño de las fotos de Google Photos a las que se intenta acceder.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Client Application:&lt;/strong&gt; Es la aplicación que pretende acceder al recurso protegido. En el ejemplo anterior, sería la aplicación que hemos desarrollado nosotros.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization Server:&lt;/strong&gt; Es el servicio encargado de emitir tokens que permiten el acceso a un recurso protegido una vez que el dueño de dicho recurso haya otorgado su consentimiento. En el ejemplo anterior, el Authorization Server sería el servicio central de Google que se encarga de autorizar usuarios &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;https://accounts.google.com&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Server:&lt;/strong&gt; Se refiere al servicio que expone los recursos protegidos a los que se pretende acceder. En nuestro ejemplo, este papel correspondería al servicio Google Photos de Google.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tal y como hemos apuntado, el objetivo de OAuth es impedir que el usuario tenga que introducir sus credenciales en aplicaciones de terceros para darles acceso a los recursos que pueda disponer en otras aplicaciones. Para conseguir esto, se realiza un proceso de autorización en el que intervienen los distintos actores implicados (“Resource Owner”, “Client Application” y “Authorization Server”) cuyo resultado es un token con el que la aplicación puede invocar las APIs que dan acceso a los recursos protegidos. Existen distintas variaciones de este flujo para adecuarse a diferentes escenarios:&lt;/p&gt;

&lt;h2 id=&quot;authorization-code-grant&quot;&gt;Authorization code grant&lt;/h2&gt;

&lt;p&gt;Se podría decir que este es el flujo OAuth2 principal y el que se debería utilizar en todos los casos en los que sea posible. Este flujo se puede utilizar cuando tenemos una aplicación en la que la lógica de presentación se lleva principalmente en el servidor, es decir, el servidor es el encargado de renderizar los HTML. A continuación se especifican los pasos que se llevan a cabo en este flujo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/authorization-code-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/authorization-code-grant.png&quot; alt=&quot;Authorization code grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;0. Hay un proceso previo en el que se registra la aplicación cliente en el “Authorization Server”. Para llevar a cabo este registro, hay que indicar el &lt;code class=&quot;highlighter-rouge&quot;&gt;client-id&lt;/code&gt;, el &lt;code class=&quot;highlighter-rouge&quot;&gt;client-secret&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect-uri&lt;/code&gt; de la aplicación que se está registrando. Normalmente los “Authorizations Servers” permiten registrar varias URIs de redirección. En el caso de Google, este registro se lleva a cabo en el portal de desarrolladores (más info &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2WebServer#enable-apis&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;1. y 2. Cuando el usuario intenta acceder a una parte de la aplicación que necesita poder acceder a su cuenta de Google Photos, se iniciará el flujo OAuth2. El objetivo de este flujo es que el usuario pueda dar su consentimiento a que la aplicación acceda a información de Google Photos en su nombre. Para ello, forzará una redirección del navegador a la URL de autenticación que expone el “Authorization Server” pasándole los siguientes parámetros en la URL como “query string”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;response_type:&lt;/em&gt; El valor de este parámetro indica el tipo de flujo que queremos iniciar. En este caso será &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; ya que es el valor correspondiente al “Authorization Code Grant”.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;client_id:&lt;/em&gt; El identificador del cliente que está iniciando el flujo.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;scope:&lt;/em&gt; En esta propiedad se indica a qué recursos del usuario pretende acceder la aplicación pudiendo establecerse más de un scope. En el ejemplo se ha utilizado &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.googleapis.com/auth/photoslibrary&lt;/code&gt; que &lt;a href=&quot;https://developers.google.com/photos/library/reference/rest/v1/albums/list#authorization-scopes&quot; target=&quot;_blank&quot;&gt;según la documentación&lt;/a&gt; es uno de los scopes que permiten acceder a los álbumes de un usuario.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;redirect_uri:&lt;/em&gt; La URI a la que el “Authorization Server” tiene que redirigir una vez que el usuario haya otorgado su consentimiento. Esta URI tiene que coincidir con alguna de las URI que se ha registrado para la aplicación.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;state:&lt;/em&gt; Se trata de un valor que la aplicación cliente utiliza para mantener un estado entre la petición que inició el flujo y la respuesta que llega en el callback. El “Authorization Server” incluye este valor en la petición que devuelve el control a la aplicación que inició el flujo OAuth. Este parámetro también se puede utilizar como mecanismo de defensa ante ataques CSRF (“Cross Site Request Forguery”) tal y como se indica en &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-10.12&quot; target=&quot;_blank&quot;&gt;el RFC6749&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. ,4. y 5. El usuario llega a la pantalla de login del “Authorization Server” (Google Accounts en el caso de google) e introduce sus credenciales.&lt;/p&gt;

&lt;p&gt;6. y 7. Una vez validadas las credenciales, el “Authorization Server” muestra una pantalla en la que se le enumeran los accesos o scopes que la aplicación cliente está solicitando. En este caso, se pediría permiso para poder acceder a los álbumes de fotos.&lt;/p&gt;

&lt;p&gt;8. y 9. El usuario da su consentimiento para que la aplicación cliente pueda acceder a la información solicitada y esto provoca una redirección a la url &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; que se había enviado al iniciar el flujo. En esta URL, se añadirá como parámetro un &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; y el &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; cuyo valor tendrá que ser el mismo que la aplicación cliente envió al iniciar el flujo.&lt;/p&gt;

&lt;p&gt;10. y 11. La aplicación cliente obtiene el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; de la URL e intercambia este &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por un &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; haciendo una petición POST al endpoint que el “Authorization Server” habrá dispuesto para tal efecto (en el caso de Google &lt;code class=&quot;highlighter-rouge&quot;&gt;https://oauth2.googleapis.com/token&lt;/code&gt;). Además del &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;, también es necesario que la aplicación cliente envíe su &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; y su &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; en el cuerpo de la petición.&lt;/p&gt;

&lt;p&gt;12. La aplicación cliente puede utilizar el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que ha recibido para obtener los álbumes que el usuario tiene alojados en Google Photos. Para conseguir esta información puede hacer peticiones al servicio &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.googleapis.com/auth/photoslibrary&lt;/code&gt; enviando el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en la cabecera HTTP “Authorization: Bearer” tal y como se indica en la &lt;a href=&quot;https://tools.ietf.org/html/rfc6750&quot; target=&quot;_blank&quot;&gt;especificación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El último paso consistiría en que el “Resource Server” validase el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; antes de devolver la información protegida. La forma en la que se lleve a cabo esta validación dependerá principalmente de la naturaleza del token ya que los “Authorization Server” normalmente pueden enviar dos tipos de tokens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JWTs firmados:&lt;/strong&gt; Un JWT es un string con formato JSON que está firmado y codificado siguiendo los criterios especificados en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot;&gt;RFC 7519&lt;/a&gt;. El hecho de que el contenido del JWT esté firmado, hace que se pueda verificar la validez del mismo sin tener que hacer ninguna llamada remota. Por lo tanto, si el resource server recibe un token de este tipo, puede verificarlo y devolver directamente la información solicitada.&lt;/p&gt;

    &lt;p&gt;Los JWTs &lt;a href=&quot;https://tools.ietf.org/html/rfc7519#section-4.1.4&quot; target=&quot;_blank&quot;&gt;tienen una propiedad (&lt;code class=&quot;highlighter-rouge&quot;&gt;exp&lt;/code&gt;)&lt;/a&gt; en la que se indica la fecha de expiración del mismo. Por lo tanto, el resource server tendrá que verificar también que el JWT no esté caducado.&lt;/p&gt;

    &lt;p&gt;Utilizar JWTs como tokens de acceso es una práctica bastante habitual. El objetivo de utilizar este tipo de tokens autocontenidos suele ser evitar el tener que hacer peticiones adicionales al “Authorization Server” para verificar si el token es válido. De esta forma, el token será válido mientras no se alcance su fecha de expiración.&lt;/p&gt;

    &lt;p&gt;Sin embargo, ¿qué ocurre en caso de que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; se revoque por cualquier motivo? Desde el panel de administración de Google por ejemplo, un usuario puede quitar en cualquier momento los permisos que ha otorgado a una aplicación determinada. Esto provoca que todos los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; que se hubieran expedido para esa aplicación sean revocados de inmediato.&lt;/p&gt;

    &lt;p&gt;En este escenario, lo que ocurriría es que el “Resource Server” no sería consciente de esta revocación porque lo único que hace es validar que esté correctamente firmado y que la fecha de expiración que contiene no haya vencido. En definitiva, seguiría aceptando el token revocado hasta que este caducase. Este es uno de los motivos por los que no se aconseja utilizar JWTs como &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tokens Opacos&lt;/strong&gt;: Al contrario que los JWT, los tokens opacos no contienen ningún tipo de información legible para el cliente y por este motivo, pueden ser una secuencia de caracterés pseudoaleatorios. Este hecho hace que el “Authorization Server” tenga que mantener un registro de los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que ha expedido y que tenga que exponer un endpoint al que el “Resource Server” pueda hacer peticiones para verificar la validez de los token que recibe. A este proceso de validación se le llama introspección y está especificado en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7662&quot; target=&quot;_blank&quot;&gt;RFC 7662.&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;La recomendación es utilizar este tipo de tokens como &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y hacer verificaciones utilizando el endpoint de introspección.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; suelen tener una fecha de expiración muy cercana en el tiempo (por debajo de una hora) para que si este se ve comprometido, solo pueda explotarse durante un corto periodo de tiempo. Esto que en un principio suena lógico tiene un inconveniente:&lt;/p&gt;

&lt;p&gt;¿Qué ocurre cuando el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que una aplicación ha obtenido legitimamente caduca? ¿Hay que volver a iniciar el flujo OAuth pidiendo el consentimiento del usuario final? Esto no parece muy usable en la mayoría de casos.&lt;/p&gt;

&lt;p&gt;Para dar respuesta a esta problemática, en la especificación OAuth2 se recoge la posibilidad de obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; utilizando &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-6&quot; target=&quot;_blank&quot;&gt;un flujo de refresco&lt;/a&gt;. Para ejecutar este proceso de refresco, es necesario haber obtenido previamente un token adicional denominado &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;. Este token viene junto con el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 11) del diagrama anterior siempre y cuando se hayan dado las condiciones para ello. En el caso de Google por ejemplo, la condición para que devuelva un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; es que en la petición que inicia el flujo se añada el parámetro &lt;code class=&quot;highlighter-rouge&quot;&gt;access_type&lt;/code&gt; con el valor &lt;code class=&quot;highlighter-rouge&quot;&gt;offline&lt;/code&gt;. &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2WebServer#obtainingaccesstokens&quot; target=&quot;_blank&quot;&gt;Este&lt;/a&gt; es el apartado de la documentación en el que se hace referencia a este parámetro:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/access_type.png&quot; alt=&quot;Google OAuth2 access_type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tal y como se ha comentado, el “Authorization Code Grant” es el flujo recomendado para la mayoría de casos pero tiene un requisito que no todas las aplicaciónes pueden cumplir: necesita poder almacenar un &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; de forma segura ya que este valor es necesario para hacer el intercambio del &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 10) del proceso.&lt;/p&gt;

&lt;p&gt;Hay aplicaciones que por su naturaleza no pueden almacenar secretos sin que estos se vean fácilmente comprometidos. Dos ejemplos claros de este tipo de aplicaciones serían:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Las aplicaciones cuya lógica de presentación se ejecuta integramente en el navegador haciendo uso de Javascript (también conocidas como single page applications o SPAs).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aplicaciones móviles nativas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decimos que este tipo de aplicaciones no pueden almacenar secretos porque el código es fácilmente accesible por el usuario final. En el caso de las aplicaciones SPA por ejemplo, es suficiente con abrir las herramientas de desarrollador e inspeccionar el código fuente o analizar las peticiones que se hacen al servidor para obtener el secreto. Se puede aplicar prácticamente lo mismo para las aplicaciones móviles nativas aunque el esfuerzo necesario para poder lograr esta información sea un poco mayor.&lt;/p&gt;

&lt;p&gt;Es en este punto cuando los desarrolladores empezamos a dirigir nuestra atención hacia otros flujos que también se contemplan en la especificación como pueden ser el “Resource Owner Password Credentials Grant” y el “Implicit Grant”.&lt;/p&gt;

&lt;h2 id=&quot;resource-owner-password-credentials-grant&quot;&gt;Resource owner password credentials grant&lt;/h2&gt;

&lt;p&gt;En este flujo, se utilizan directamente las credenciales del resource owner como forma de autorización para obtener un token. Este sería el diagrama del flujo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/resource-owner-password-credentials-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/resource-owner-password-credentials-grant.png&quot; alt=&quot;Resource owner credentials grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver en el diagrama, en este flujo el usuario introduce sus credenciales directamente en la aplicación cliente para que haciendo uso de estas credenciales, la aplicación pueda solicitar tokens de acceso al “Authorization Server”.&lt;/p&gt;

&lt;h3 id=&quot;un-momento&quot;&gt;Un momento…&lt;/h3&gt;

&lt;p&gt;¿No habíamos dicho que con OAuth precisamente se busca evitar el tener que introducir las credenciales en aplicaciones de terceros?&lt;/p&gt;

&lt;p&gt;Efectivamente y es por eso que en la especificación se indica lo siguiente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The credentials should only be used when there is a high
degree of trust between the resource owner and the client (e.g., the
client is part of the device operating system or a highly privileged
application), and when other authorization grant types are not
available (such as an authorization code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Es decir, dicen que solo se debe utilizar este flujo en aplicaciones que son de un alto nivel de confianza y cuando no se puede utilizar ningún otro flujo. A pesar de esto, en la práctica &lt;strong&gt;la recomendación es no utilizar este flujo en ningún caso&lt;/strong&gt;. Los motivos principales por los que utilizar este flujo se considera mala práctica son los siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Se fomentan malos hábitos de los usuarios ya que este flujo es muy parecido a un ataque de “phishing”: se le presenta un formulario al usuario en el que se le pide que introduzca sus credenciales de otra aplicación como puede ser Google en lugar de redirigirle a la pantalla de autenticación de esa aplicación.&lt;/p&gt;

    &lt;p&gt;El usuario debería acostumbrarse a únicamente introducir sus credenciales en la pantalla de login de la plataforma y desconfiar si cualquier otra aplicación le pide que las introduzca.&lt;/p&gt;

    &lt;p&gt;Google por ejemplo, utiliza una pantalla central para gestionar la autenticación y es la misma tanto para sus propios productos (Gmail, Google Calendar, Drive,…) como para las integraciones con terceros.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Las credenciales de un usuario son información altamente sensible. Por lo tanto, es preferible que sean manejadas por el menor número de aplicaciones posible con el objetivo de reducir las probabilidades de que pueda haber fugas de información tanto de manera malintencionada como por accidente (vía logs, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;En el flujo “Resource Owner Password Credentials Grant” el usuario introduce sus credenciales pero no tiene el control sobre qué uso se va a hacer de los mismos. Al explicar el “Authorization Code Grant” se ha visto como el “Authorization Server” se encarga de mostrar una pantalla de consentimiento al usuario para autorizar que la aplicación pueda realizar una serie de acciones (scopes) en su nombre. Por el contrario, en el “Resource Owner Password Credentials Grant”, una vez que la aplicación dispone de las credenciales, puede establecer los scopes que considere oportunos sin el consentimiento del usuario.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Debido a estas problemáticas y otras que no se han recogido en este artículo, &lt;strong&gt;este flujo no está soportado por Google y muchos otros Authorization Servers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-grant&quot;&gt;Implicit grant&lt;/h2&gt;

&lt;p&gt;Este es el flujo que se ha venido recomendando para aplicaciones móviles y SPAs hasta hace no demasiado tiempo. El diagrama de este flujo es el siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/implicit-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/implicit-grant.png&quot; alt=&quot;Implicit grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este flujo es una versión simplificada del “Authorization Code Grant”. En la primera petición se envía el &lt;code class=&quot;highlighter-rouge&quot;&gt;response_type&lt;/code&gt; con valor a &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; para indicarle al “Authorization Server” que se va a usar el flujo “Implicit Grant”. La diferencia con el “Authorization Code Grant” es que una vez el usuario final se autentica y otorga su consentimiento, el “Authorization Server” hace la redirección al &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; pasándole el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; directamente como parte de la URL. Es decir, no existen los pasos 10) y 11) del flujo “Authorization Code Grant” en el que se obtiene un &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; temporal que hay que intercambiar por un &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; haciendo uso del &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gracias a esto, no es necesario disponer de un &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; para llevar a cabo este flujo y por lo tanto, el flujo se puede utilizar en aplicaciones que no pueden almacenar secretos de forma segura.&lt;/p&gt;

&lt;p&gt;Todo esto suena muy bien pero si el “Implicit Grant” es más simple que el “Authorization Code Grant” y además no necesita secretos, ¿por qué no lo utilizamos en todos los casos?&lt;/p&gt;

&lt;h3 id=&quot;buena-pregunta&quot;&gt;Buena pregunta…&lt;/h3&gt;

&lt;p&gt;El caso es que este flujo tiene sus inconvenientes tal y como se recoge en la &lt;a href=&quot;https://tools.ietf.org/html/rfc6819&quot; target=&quot;_blank&quot;&gt;RFC6819&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;riesgo-de-interceptar-el-access_token&quot;&gt;Riesgo de interceptar el access_token&lt;/h3&gt;

&lt;p&gt;Tal y como se ha explicado, el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; viene como parte de la URL que hace la redirección hacia la aplicación cliente y no en el cuerpo de la respuesta de una petición POST como ocurre en flujo “Authorization Code Grant”. Este detalle es muy importante ya que al venir el token en la URL, este puede quedar registrado en logs o históricos. Por lo tanto, cualquiera con acceso a este tipo de información en la aplicación cliente podría obtener el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y explotarlo de manera ilegítima.&lt;/p&gt;

&lt;p&gt;Para mitigar este problema, en lugar de utilizar un “query string” para pasar este valor, se utiliza &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/hash&quot; target=&quot;_blank&quot;&gt;un fragmento o hash&lt;/a&gt;. Si nos fijamos en la URL del paso 6) del diagrama, podemos ver cómo el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; se envía como fragmento haciendo uso del caracter &lt;strong&gt;#&lt;/strong&gt;: https://…index.html#access_token=m4odaim6h…&lt;/p&gt;

&lt;p&gt;Los navegadores, no envían la parte del fragmento al servidor. Esto quiere decir que cuando el navegador haga la petición a index.html para descargarse la aplicación SPA, no enviará todo lo que sigue al caracter &lt;strong&gt;#&lt;/strong&gt;. De esta forma, se consigue limitar la superficie de un posible ataque ya que sabremos que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; no quedará registrado en los logs del servidor en el que se aloja la aplicación cliente. Sin embargo, el fragmento sí que quedaría almacenado en el histórico del navegador.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6819#section-4.4.2&quot; target=&quot;_blank&quot;&gt;En este RFC&lt;/a&gt;, se enumeran esta y otras amenazas relacionadas. Incluso en la propia especificación OAuth2 se alerta de las implicaciones de seguridad que tiene utilizar el flujo “Implicit Grant”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Implicit grants improve the responsiveness and efficiency of some
   clients (such as a client implemented as an in-browser application),
   since it reduces the number of round trips required to obtain an
   access token.  However, &lt;strong&gt;this convenience should be weighed against
   the security implications of using implicit grants&lt;/strong&gt;, such as those
   described in Sections 10.3 and 10.16, especially when the
   authorization code grant type is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;no-permite-el-uso-de-refresh_token&quot;&gt;No permite el uso de refresh_token&lt;/h3&gt;

&lt;p&gt;En el punto anterior se ha comentado que la forma en la que las aplicaciones cliente obtienen el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; cuando se utiliza “Implicit Grant” no es demasiado seguro. Si bien es cierto que las consecuencias de una fuga de &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; son limitadas porque los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; expiran en un periodo de tiempo muy corto, no se podría decir lo mismo de un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Los &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; tienen un ciclo de vida mucho más largo ya que se utilizan para obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; sin necesidad de que el usuario final tenga que estar dando su consentimiento continuamente. En el caso de Google por ejemplo, el &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2#expiration&quot; target=&quot;_blank&quot;&gt;caduca cuando no haya sido utilizado durante 6 meses&lt;/a&gt;. Por lo tanto, la fuga de un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; sería catastrófico ya que podría utilizarse para generar &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; durante un largo periodo de tiempo. Es por esto que la propia especificación de OAuth2 advierte que la expedición de tokens de refresco no está soportada cuando se utiliza “Implicit Grant”.&lt;/p&gt;

&lt;p&gt;Como ya hemos dicho, el no poder utilizar tokens de refresco atenta contra la usabilidad ya que cada vez que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; caduque, tendremos que volver a iniciar el flujo y redirigir al usuario al “Authorization Server” para que vuelva a dar su consentimiento. Para dar respuesta a este problema, existe el concepto de “Silent Refresh” que consiste en utilizar un IFrame para obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_tokens&lt;/code&gt; de forma silenciosa. Este “hack” tiene varios condicionantes y riesgos que no se van a extender en este artículo. Se puede leer más información sobre cómo efectuar un “silent refresh” &lt;a href=&quot;https://www.scottbrady91.com/OpenID-Connect/Silent-Refresh-Refreshing-Access-Tokens-when-using-the-Implicit-Flow&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si no recomendamos utilizar ni “Resource Owner Password Credentials Grant” ni “Implicit Grant” para nuestras aplicaciones móviles o SPAs, ¿qué otras opciones tenemos? La respuesta a esta pregunta es…&lt;/p&gt;

&lt;h2 id=&quot;authorization-code-grant-with-pkce&quot;&gt;Authorization Code Grant with PKCE&lt;/h2&gt;

&lt;p&gt;El flujo “Authorization Code Grant with PKCE” nació para dar respuesta a todos los problemas asociados a las aplicaciones públicas (SPAs y móviles) ya que se trata de una extensión de “Authorization Code Grant” dirigido a este tipo de aplicaciones. Las motivaciones y particularidades de este flujo se recogen en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot; target=&quot;_blank&quot;&gt;RFC 7636&lt;/a&gt; y este es su diagrama correspondiente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/authz-code-grant-pkce.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/authz-code-grant-pkce.png&quot; alt=&quot;Authorization code grant with PKCE&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tal y como se puede ver en el diagrama, el flujo es idéntico a un “Authorization Code Grant” solo que en el paso 1) se añade un parámetro extra llamado &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; y en el paso 7) en lugar de enviar el &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; se envía otro parámetro denominado &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;. Es decir, la combinación de &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; sustituyen al &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; creando una especie de secreto temporal y único por cada flujo.&lt;/p&gt;

&lt;h3 id=&quot;cómo-funciona-esto&quot;&gt;¿Cómo funciona esto?&lt;/h3&gt;

&lt;p&gt;Al inicio del flujo, la aplicación cliente genera un &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; que no es más que un string aleatorio criptográfico que tiene que cumplir &lt;a href=&quot;https://tools.ietf.org/html/rfc7636#section-4.1&quot; target=&quot;_blank&quot;&gt;una serie de condiciones&lt;/a&gt;. A continuación, se crea el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; que es un derivado del &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;. Hay múltiples formas de generar el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; pero la recomendación es utilizar SHA-256 aplicando una fórmula del estilo &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))&lt;/code&gt;. La forma en la que se hace la verificación de este “challenge” es la siguiente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;En el primer paso del flujo, la aplicación cliente guarda el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; y envía el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; al “Authorization Server”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;El “Authorization Server” almacena el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; recibido y una vez que el usuario da su consentimiento, responde con el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cuando la aplicación cliente va a intercambiar el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 7), envía también el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; que había guardado previamente y que es el origen desde el que se había creado el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; enviado en el primer paso.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Por último, el “Authorization Server” aplica la fórmula de derivación sobre este &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; y lo compara con el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; que había guardado en el primer paso. Si los códigos son iguales, la petición es válida y devuelve el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y opcionalmente el &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;. Los criterios que sigue el “Authorization Server” para devolver o no un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; son los mismos que en el “Authorization Code Grant”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por lo tanto, este flujo tienes las ventajas del “Authorization Code Grant” y puede utilizarse sin necesidad de disponer de un secreto “estático” ya que este se genera en caliente cada vez que se inicia un nuevo flujo.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;En este artículo se ha hecho una introducción a OAuth en el que se han explicado cuáles fueron las motivaciones para su creación así como la forma en la que funciona.&lt;/p&gt;

&lt;p&gt;Se han repasado los principales flujos que se contemplan en la especificación para permitir a un usuario dar autorización a aplicaciones de terceros con el objetivo de que puedan realizar acciones en su nombre.&lt;/p&gt;

&lt;p&gt;Si bien para aplicaciones web tradicionales en las que el renderizado de los HTML se realiza en servidor el flujo a utilizar está muy claro (Authorization Code Grant), cuando tratamos de buscar el flujo a utilizar para SPAs o aplicaciones móviles la información disponible es bastante confusa.&lt;/p&gt;

&lt;p&gt;Debido a la evolución de la especificación o a la ambigüedad del propio texto, es fácil encontrar en internet artículos o comentarios en los que se invita a utilizar flujos que son potencialmente peligrosos como pueden ser “Resource Owner Password Grant” o “Implicit Grant”. &lt;strong&gt;La recomendación es que para este tipo de aplicaciones se utilice el flujo “Authorization Code Grant with PKCE” que salva la problemática de los secretos haciendo uso de criptografía.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En este artículo se han dejado a un lado los flujos en los que no interviene el usuario como puede ser el “Client Credentials Grant” u otros en los que no se utiliza un navegador como el “Device Authorization Grant”. De igual forma, se ha hablado solo de autorización que es lo que cubre OAuth y dejado a un lado la autenticación. Quizás tratemos estos temas relacionados en futuras publicaciones.&lt;/p&gt;

&lt;p&gt;Por último, se ha visto que OAuth no es un protocolo sencillo de implementar y por lo tanto se recomienda utilizar librerías ya existentes que encapsulen toda esta complejidad.&lt;/p&gt;</content><author><name>aritz</name></author><category term="autenticación," /><category term="oauth," /><category term="oauth2," /><category term="resource" /><category term="owner" /><category term="password" /><category term="credentials," /><category term="authorization" /><category term="code," /><category term="implicit," /><category term="silent" /><category term="refresh" /><summary type="html">El estándar OAuth2 es tan conocido como complejo. El hecho de que sea un estándar en evolución y el exceso de información disponible, hace que sea muy fácil encontrar artículos con información contradictoria o que se recomiende el uso de flujos que actualmente se consideran “legacy” por motivos de seguridad.</summary></entry><entry xml:lang="es"><title type="html">Hemos estado en la Commit Conf 2019</title><link href="https://blog.arima.eu/en/2019/12/02/commit-conf-2019.html" rel="alternate" type="text/html" title="Hemos estado en la Commit Conf 2019" /><published>2019-12-02T09:00:00+00:00</published><updated>2019-12-02T09:00:00+00:00</updated><id>https://blog.arima.eu/2019/12/02/commit-conf-2019</id><content type="html" xml:base="https://blog.arima.eu/2019/12/02/commit-conf-2019.html">&lt;p&gt;Hace dos semanas asistí a la Commit Conf 2019 en Madrid! en este post os voy a contar un poco mi experiencia allí y qué charlas me llamaron más la atención.&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;es&quot;&gt;
Egun on Madrid! Ya estamos preparados para que empiece la &lt;a href=&quot;https://twitter.com/hashtag/commitconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#commitconf&lt;/a&gt; &lt;a href=&quot;https://t.co/QUdSZIkOkA&quot;&gt;pic.twitter.com/QUdSZIkOkA&lt;/a&gt;&lt;/div&gt;
— Fernando Lozano (@frlzno) &lt;a href=&quot;https://twitter.com/frlzno/status/1197791163169886208?ref_src=twsrc%5Etfw&quot;&gt;November 22, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;
&lt;script async=&quot;&quot; charset=&quot;utf-8&quot; src=&quot;https://platform.twitter.com/widgets.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;La Commit&lt;/strong&gt; en general estuvo muy bien, al tener bastante variedad y cantidad de charlas (140 en dos días) siempre tienes alguna charla que a priori parece interesante. Antes de ir a la Commit, me llamó la atención preparando las charlas a las que iba a ir, ver la cantidad de charlas sobre Microservicios y DevOps que había, entiendo que sean temas que están en auge pero que todo el mundo hable de lo mismo, me empieza a aburrir.&lt;/p&gt;

&lt;p&gt;Sobre &lt;strong&gt;los ponentes&lt;/strong&gt;, la mayoría muy buenos, saben transmitir esa confianza sobre el escenario que parecen estar en el salón de su casa. También los había más “novatos” a los que se les notaba más nerviosos, con sus miedos y fobias a hablar en público pero que también lo hicieron muy bien.&lt;/p&gt;

&lt;p&gt;Sin embargo, no todo es de color de rosa, es una &lt;strong&gt;conferencia bastante masificada&lt;/strong&gt;, a pesar de que hay nueve tracks, fuese a la charla que fuese siempre estaba llena. La gente sentada en el suelo de las aulas, de pie, corriendo de un lado a otro… daba una sensación de agobio constante. Al final lo que hacía la gente es salir antes de las charlas para coger sitio en las siguientes.&lt;/p&gt;

&lt;p&gt;Dejando a un lado un poco mis impresiones generales de la Commit Conf, me gustaría destacar cuáles fueron las que más me llamaron la atención:&lt;/p&gt;

&lt;p&gt;Una de las mejores charlas a la que fui, la primera de la Commit, fue la de &lt;strong&gt;“Refactorizar rima con Simplificar, o por qué el miedo conduce a código inmantenible”&lt;/strong&gt; de Javier Abadía. Javier nos ayudaba a entender la importancia de refactorizar y de dejar nuestros miedos a un lado a la hora de hacerlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/1.jpeg&quot; alt=&quot;Refactorizar rima con Simplificar, o por qué el miedo conduce a código inmantenible&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra buena charla fue la de &lt;strong&gt;“El futuro es ahora: WebAssembly”&lt;/strong&gt; de Daniel Ramos. Web Assembly es una iniciativa liderada por equipos de desarrollo de Microsoft, Mozilla y Google diseñada para ejecutar código nativo (bytecode) en un navegador sin necesidad de instalar nada extra en él.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/2.jpeg&quot; alt=&quot;El futuro es ahora: WebAssembly&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JavaScript en su día no se pensó para lo que se está utilizando ahora, es verdad que ha ido evolucionando pero todavía no puede competir en rendimiento con código C y C++. Aquí es donde entra WebAssembly. Utiliza la potencia que tienen lenguajes de más alto nivel y se compilan a código nativo para que luego posteriormente sea utilizado en el navegador.&lt;/p&gt;

&lt;p&gt;Está más orientado a realidad virtual, herramientas de colaboración, software CAD, simulación científica… Pero al final se puede aplicar a multitud de casos. En la presentación Daniel comentó que las aplicaciones web de Autocad y Lightroom usan esta tecnología.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://takahirox.github.io/WebAssembly-benchmark/&quot; target=&quot;_blank&quot;&gt;Aquí&lt;/a&gt; tenéis algunos ejemplos online comparando lo que tarda Javascript vs WebAssembly, como podéis ver hay algunos casos donde sale más rentable utilizar WebAssembly.&lt;/p&gt;

&lt;p&gt;Otra charla que me pareció interesante fue la que dieron Manuel Vilachán y Antonio Marin titulada &lt;strong&gt;“WebAuthn: No más passwords por favor!”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/3.jpeg&quot; alt=&quot;WebAuthn: No más passwords por favor!&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebAuthn es un estándar web oficial de la W3C que permite el inicio de sesión en Internet, en todo tipo de servicios online, sin necesidad de un usuario y contraseña. En su lugar, los usuarios pueden hacer uso de los datos biométricos, tokens para hardware y aplicaciones determinadas.&lt;/p&gt;

&lt;p&gt;Con este método, las páginas web que verifican la identidad del usuario recurren a la API de autenticación web en el navegador. El usuario, por su parte, confirma ser quien es en su propio equipo con un escáner de huella dactilar o con un token conectado a su ordenador. Los datos personales de identidad, como la huella digital, no salen fuera del dispositivo. Es el navegador el que envía la verificación de su identidad, cifrada por medio de una clave pública al servicio web.&lt;/p&gt;

&lt;p&gt;Como podéis ver en &lt;a href=&quot;https://caniuse.com/#search=webauthn&quot; target=&quot;_blank&quot;&gt;Can I Use&lt;/a&gt; la mayoría de las versiones estables de los principales navegadores lo soportan.&lt;/p&gt;

&lt;p&gt;WebAuthn ofrece varias ventajas para los usuarios. La comodidad es el factor que debería convencernos a todos, ya no tenemos que memorizar más contraseñas! De aquí también se derivaría una mayor seguridad, porque el uso de claves no es un método seguro al cien por cien, ya que pueden romperse con ataques de fuerza bruta y son fáciles de interceptar con phishing. Tampoco permiten lanzar un ataque de man in the middle, puesto que no se envían datos sensibles que pueden ser interceptados. El método de clave pública protege de forma criptográfica el envío del certificado de autenticación.&lt;/p&gt;

&lt;p&gt;El mayor inconveniente aparece en el momento de intentar loguearte con diferentes dispositivos, es decir, si tú quieres acceder a Twitter, desde el móvil, desde el escritorio, desde cualquier otro dispositivo, debes registrar un nuevo autenticador en la aplicación web por cada dispositivo, por lo que puede ser un poco engorro tener que hacer eso por cada dispositivo nuevo.&lt;/p&gt;

&lt;p&gt;Y por último, para mí LA charla, &lt;strong&gt;“Unbiasing teams”&lt;/strong&gt; de Félix López. Una charla que recomiendo verla en vídeo cuando lo suban a Youtube. Es una charla bastante densa y poco técnica pero que a mí me encantó. Félix explica los factores psicológicos que nos afectan en el día a día en la toma de decisiones y en el comportamiento personal con el resto del equipo. Con una serie de ejemplos nos explica cómo a veces vemos situaciones como normales que en realidad están fundamentadas en esquemas y estereotipos.&lt;/p&gt;

&lt;p&gt;Me ha parecido una conferencia de lo más completa, dos días llenos de charlas variadas e interesantes. Una experiencia enriquecedora y satisfactoria. Quiero dar las gracias a la organización y voluntarios por su excelente trabajo y por su disponibilidad en todo momento.&lt;/p&gt;

&lt;p&gt;En el canal de &lt;a href=&quot;https://www.youtube.com/channel/UCd_1KHg4t2VKGsSDF8OD5Cw&quot; target=&quot;_blank&quot;&gt;Youtube&lt;/a&gt; de Commit encontrarás las charlas que he mencionado en este post.&lt;/p&gt;

&lt;p&gt;¡Hasta el año que viene!&lt;/p&gt;</content><author><name>fernando</name></author><category term="conferencias," /><category term="commit" /><category term="conf" /><summary type="html">Hace dos semanas asistí a la Commit Conf 2019 en Madrid! en este post os voy a contar un poco mi experiencia allí y qué charlas me llamaron más la atención.</summary></entry><entry xml:lang="es"><title type="html">Nuestro proceso de selección</title><link href="https://blog.arima.eu/en/2019/10/24/arima-proceso-seleccion.html" rel="alternate" type="text/html" title="Nuestro proceso de selección" /><published>2019-10-24T09:00:00+00:00</published><updated>2019-10-24T09:00:00+00:00</updated><id>https://blog.arima.eu/2019/10/24/arima-proceso-seleccion</id><content type="html" xml:base="https://blog.arima.eu/2019/10/24/arima-proceso-seleccion.html">&lt;p&gt;Por lo general, los procesos de selección suelen convertirse en situaciones incómodas para los candidatos. A los nervios habituales, se une el hecho de que los entrevistadores recurren cada vez más a técnicas en las que se busca incomodar al entrevistado. Para conseguir este objetivo, es habitual hacer preguntas extrañas o provocar situaciones tensas que pretenden psicoanalizar a los candidatos. Desde los típicos ¿cuál es tu mayor virtud? o ¿cuál es tu mayor defecto? (al que la mayoría contesta  que ser demasiado perfeccionista), hasta otro tipo de cuestiones mucho más impertinentes y personales que tienen como objetivo analizar el comportamiento del candidato en situaciones de tensión.&lt;/p&gt;

&lt;p&gt;A estas preguntas que podemos considerar más personales, hay que añadir que muchas empresas tecnológicas incorporan pruebas prácticas a los que los candidatos se tienen que enfrentar delante de una pizarra. Cuanto más grande (y cool) sea la empresa aparentemente, más probable es que incluyan este tipo de pruebas en sus procesos de selección. Habitualmente, en este tipo de ejercicios se pide a los candidatos que implementen algoritmos de ordenación u otro tipo de ejercicios de bajo nivel con la única ayuda de un rotulador y la famosa pizarra blanca. Se dice que esta tendencia comenzó en Microsoft debido a que a Bill Gates le encantaban los rompecabezas.&lt;/p&gt;

&lt;p&gt;Si tengo que ser sincero, estoy seguro de que yo no sería capaz de pasar ninguna de esas pruebas. Necesitaría de una preparación específica para superar ese tipo de ejercicios. A menudo, me encuentro a mí mismo haciendo búsquedas absurdas en Google o Stackoverflow para recordar por ejemplo, cómo se eliminan los espacios en blanco de un string en un lenguaje de programación determinado. ¿Me convierte eso en un mal programador? No necesariamente…&lt;/p&gt;

&lt;p&gt;En ARIMA no pretendemos que los candidatos cumplan las funciones de un compilador o que sean capaces de escribir en una pizarra el código Java correspondiente a un algoritmo de ordenación de arrays. Esta no es una forma realista de valorar candidatos ya que no es la forma en la que se trabaja en el día a día. Para hacer ese tipo de tareas ya están los IDEs, los compiladores, las librerías que implementan algoritmos e internet para buscarlos.&lt;/p&gt;

&lt;p&gt;Lo que sí nos gusta es sentarnos delante de un bloque de código y compartir impresiones sobre el mismo. Nos encanta discutir sobre código y cualquier excusa es buena:  desde un proyecto personal, hasta algún pequeño ejercicio que nosotros hayamos podido enviar para implementar en casa y sin ningún tipo de presión. Cuando optamos por enviar un ejercicio, siempre se trata de cosas muy sencillas como puede ser implementar un CRUD en un lenguaje en el que los candidatos se sienten cómodos. Más que el resultado del ejercicio, lo que nos interesa conocer es el por qué de las decisiones que se han tomado en el proceso. Esto puede proporcionar mucha información sobre la forma que tiene cada persona de razonar y afrontar los desarrollos.&lt;/p&gt;

&lt;p&gt;En cuanto a la parte personal, nos gusta que la gente nos hable de sus inquietudes, lo que le gusta hacer y lo que le ha motivado a la hora de elegir el desarrollo de software como oficio. No hay preguntas trampa para las que hay que traer una respuesta preparada desde casa, simplemente queremos conocer a la persona.&lt;/p&gt;

&lt;p&gt;Creemos que esta forma de acometer los procesos de selección son mucho menos hostiles y fomentan que los candidatos puedan presentarse tal y como son en un entorno tranquilo. A fín de cuentas, crear situaciones de estrés o hacer que las personas se sientan acorraladas, no parece la mejor forma de iniciar una relación laboral duradera.&lt;/p&gt;

&lt;p&gt;En ARIMA siempre estamos interesados en conocer e incorporar desarrolladores al equipo que nos ayuden a ser mejores. Si tienes interés en conocernos, no dudes en contactarnos enviando un email a &lt;a href=&quot;arima@arima.eu&quot;&gt;arima@arima.eu&lt;/a&gt;. Háblanos sobre ti presentándote tal y como eres y dejando a un lado las típicas plantillas de carta de presentación frías y formales.&lt;/p&gt;</content><author><name>aritz</name></author><category term="recruiting," /><category term="contratación," /><category term="proceso" /><category term="de" /><category term="selección," /><category term="remote" /><category term="working" /><summary type="html">Por lo general, los procesos de selección suelen convertirse en situaciones incómodas para los candidatos. A los nervios habituales, se une el hecho de que los entrevistadores recurren cada vez más a técnicas en las que se busca incomodar al entrevistado. Para conseguir este objetivo, es habitual hacer preguntas extrañas o provocar situaciones tensas que pretenden psicoanalizar a los candidatos. Desde los típicos ¿cuál es tu mayor virtud? o ¿cuál es tu mayor defecto? (al que la mayoría contesta que ser demasiado perfeccionista), hasta otro tipo de cuestiones mucho más impertinentes y personales que tienen como objetivo analizar el comportamiento del candidato en situaciones de tensión.</summary></entry><entry xml:lang="es"><title type="html">[CSS] Switch off the lights</title><link href="https://blog.arima.eu/en/2019/10/11/switch-off-the-lights.html" rel="alternate" type="text/html" title="[CSS] Switch off the lights" /><published>2019-10-11T09:00:00+00:00</published><updated>2019-10-11T09:00:00+00:00</updated><id>https://blog.arima.eu/2019/10/11/switch-off-the-lights</id><content type="html" xml:base="https://blog.arima.eu/2019/10/11/switch-off-the-lights.html">&lt;p&gt;El “modo oscuro” en las interfaces de usuario se ha puesto de moda el último año. Antes eran pocas las aplicaciones (nativas o webapps) que tenían una interfaz alternativa a la de colores blancos/claros que utilizan la mayoría de UIs por defecto. Y las que lo ofrecían (por ejemplo, Youtube) lo tienen escondido de tal forma que hay que activarlo como opción en los menús de configuración de la propia aplicación. Es decir, había pocas aplicaciones que lo ofrecían y además se necesitaba bucear entre las opciones para ver si lo ofrecían y en caso afirmativo activarlo en cada una de ellas: cocktail perfecto para que en la práctica no lo utilizase prácticamente nadie y, en consecuencia a su vez, no existiese ningún aliciente para ofrecer ese modo oscuro.&lt;/p&gt;

&lt;p&gt;Sin embargo macOS estrenó con su versión Mojave/10.14 (septiembre de 2018) una configuración global para poner todo el sistema operativo en modo oscuro (menús, el Finder, etc.) y ofrecer a las aplicaciones nativas esta información (si el usuario ha elegido un tema claro u oscuro) para poder integrarse en el sistema operativo automáticamente. A partir de ahí muchas aplicaciones nativas se han ido actualizando para respetar esta configuración (por ejemplo Firefox y Chrome han lanzado estos últimos meses interfaces oscuras del propio navegador para los que tenemos el modo oscuro activado), ha llegado también a Windows, y ha dado el salto a móviles implementándose oficialmente en Android 10 e iOS 13 (aunque desde Android 9 ya se podía activar en muchos móviles) donde además tiene el aliciente del ahorro de batería en pantallas AMOLED, etc.&lt;/p&gt;

&lt;p&gt;Y, lo que nos interesa, es que esta configuración ha saltado también a CSS. La propuso WebKit implementándola en Safari 12.1 y ya se ha lanzado también en Firefox (67+) y Chrome de escritorio (77+), aunque por alguna razón aún no en Chrome de Android (caniuse). Estamos hablando de la media query &lt;em&gt;prefers-color-scheme&lt;/em&gt; (MDN).&lt;/p&gt;

&lt;p&gt;Esto permite ejecutar CSS específico según las preferencias de tema del usuario en su sistema operativo (de escritorio o móvil). En la práctica, podemos hacer algo así:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
  background: #eee;
  color: #111;
}

@media (prefers-color-scheme: dark) {
  body {
    background: #111;
    color: #eee;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Con esto tendríamos un tema oscuro para quien así tenga configurada la preferencia en su sistema operativo, y un tema tradicional claro para todos los demás (incluidos aquellos navegadores que aún no soporten esta nueva media query).&lt;/p&gt;

&lt;p&gt;Podéis probarlo con la versión de cualquier navegador de escritorio esta mini demo que he hecho: &lt;a href=&quot;https://typescript-rf4g1k.stackblitz.io/&quot; target=&quot;_blank&quot;&gt;https://typescript-rf4g1k.stackblitz.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-11-switch-off-the-lights/demo.gif&quot; alt=&quot;demo&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si jugáis, como en el GIF, con la configuración System Preferences -&amp;gt; General -&amp;gt; Appearance, al cambiar entre el modo Light y Dark cambiará no solo la interfaz de macOS y la UI del navegador, sino también nuestra propia web. Yay!&lt;/p&gt;

&lt;p&gt;Y, de hecho, con el CSS puro actual podemos jugar aún más: podríamos utilizar variables CSS y conseguir algo así:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:root {
    --background-color: #eee;
    --text-color: #111;
}

@media (prefers-color-scheme: dark) {
    :root {
        --background-color: #111;
        --text-color: #eee;
    }
}

body {
  background: var(--background-color);
  color: var(--text-color);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Definir todos los colores que utilicemos en nuestra UI como variables y reescribir el tema oscuro con esta nueva media query. Y esto funcionaría igual que lo anterior, out of the box sin ningún pre-tratamiento necesario de Sass/PostCSS/etc.&lt;/p&gt;</content><author><name>alberto</name></author><category term="css," /><category term="dark," /><category term="light," /><category term="claro," /><category term="oscuro" /><summary type="html">El “modo oscuro” en las interfaces de usuario se ha puesto de moda el último año. Antes eran pocas las aplicaciones (nativas o webapps) que tenían una interfaz alternativa a la de colores blancos/claros que utilizan la mayoría de UIs por defecto. Y las que lo ofrecían (por ejemplo, Youtube) lo tienen escondido de tal forma que hay que activarlo como opción en los menús de configuración de la propia aplicación. Es decir, había pocas aplicaciones que lo ofrecían y además se necesitaba bucear entre las opciones para ver si lo ofrecían y en caso afirmativo activarlo en cada una de ellas: cocktail perfecto para que en la práctica no lo utilizase prácticamente nadie y, en consecuencia a su vez, no existiese ningún aliciente para ofrecer ese modo oscuro.</summary></entry><entry xml:lang="es"><title type="html">Spring Data, JDBC frente a JPA</title><link href="https://blog.arima.eu/en/2019/10/03/spring-data-jdbc.html" rel="alternate" type="text/html" title="Spring Data, JDBC frente a JPA" /><published>2019-10-03T10:00:00+00:00</published><updated>2019-10-03T10:00:00+00:00</updated><id>https://blog.arima.eu/2019/10/03/spring-data-jdbc</id><content type="html" xml:base="https://blog.arima.eu/2019/10/03/spring-data-jdbc.html">&lt;p&gt;&lt;em&gt;Spring Data JDBC&lt;/em&gt; es una librería para facilitar la creación de repositorios que acceden a bases de datos sin tratar con la complejidad que supone utilizar JPA. El hecho de que JPA ofrezca muchas funcionalidades como caché, carga de relaciones bajo demanda &lt;em&gt;(Lazy)&lt;/em&gt;, etc. supone que el desarrollador tenga que tener en cuenta cierta complejidad.&lt;/p&gt;

&lt;p&gt;Hemos creado &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo&quot; target=&quot;_blank&quot;&gt;este proyecto de github&lt;/a&gt; para realizar pruebas con Spring Data JDBC y JPA. En la rama &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/tree/jpa&quot; target=&quot;_blank&quot;&gt;jpa&lt;/a&gt; se pueden encontrar test de los siguientes casos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si hay un modelo cargado en la aplicación y se vuelve a hacer una búsqueda, la instancia del objeto nuevo y el viejo será misma y no se habrá vuelto a ejecutar una consulta. Para forzar una nueva consulta habrá que hacer un &lt;em&gt;entityManager.clear()&lt;/em&gt;. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/b4224ffb83561e88598c23b5047885cb6ee86369/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L43&quot; target=&quot;_blank&quot;&gt;reloadModel1&lt;/a&gt; y &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/b4224ffb83561e88598c23b5047885cb6ee86369/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L51&quot; target=&quot;_blank&quot;&gt;reloadModel2&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Las relaciones de una entidad se cargan bajo demanda, si por alguna razón se cierra la conexión a la base de datos y después se intenta acceder a una relación, este método fallará. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/b4224ffb83561e88598c23b5047885cb6ee86369/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L60&quot; target=&quot;_blank&quot;&gt;lazyLoad&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;JPA se encarga de los UPDATE, no solo no es necesario hacer un &lt;em&gt;repositorio.save()&lt;/em&gt; para actualizar un modelo, sino que el hacerlo no asegura que se vaya a actualizar en ese momento. Cuando se vaya a cerrar la conexión, JPA hará un &lt;em&gt;flush&lt;/em&gt; y será entonces cuando se realizará el guardado. El haber pasado por el setter de la propiedad de un modelo es la razón para actualizarlo, por eso hay que tener mucho cuidado con los cambios que se le hacen a un objeto cargado desde JPA. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/b4224ffb83561e88598c23b5047885cb6ee86369/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L71&quot; target=&quot;_blank&quot;&gt;update&lt;/a&gt; y &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/b4224ffb83561e88598c23b5047885cb6ee86369/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L83&quot; target=&quot;_blank&quot;&gt;update2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Spring Data JDBC&lt;/em&gt; es una solución más simple, sin uso de cachés ni proxys, sin &lt;em&gt;“magia”&lt;/em&gt; por detrás con automatizaciones pero que hace lo que se le indica en cada comando.&lt;/p&gt;

&lt;p&gt;Hemos creado otros test en la rama &lt;em&gt;master&lt;/em&gt; del &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo&quot; target=&quot;_blank&quot;&gt;mismo proyecto&lt;/a&gt; donde se pueden ver los siguientes casos:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cada vez que se realiza una búsqueda, se ejecuta una consulta y la instancia del objeto devuelto es distinta. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/cf888e3b0ff6fb6a1a08dbddf1ca0722654f0352/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L42&quot; target=&quot;_blank&quot;&gt;reloadModel&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Obtiene las relaciones del modelo en el mismo instante en el que se obtiene el propio modelo. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/cf888e3b0ff6fb6a1a08dbddf1ca0722654f0352/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L50&quot; target=&quot;_blank&quot;&gt;notLazyLoad&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;La actualización del modelo en la base de datos se realiza explícitamente, cambiar el objeto no implica el cambio en base de datos. (test &lt;a href=&quot;https://github.com/wearearima/spring-data-jdbc-demo/blob/cf888e3b0ff6fb6a1a08dbddf1ca0722654f0352/src/test/java/eu/arima/springdatajdbcdemo/CountryRepositoryTests.java#L59&quot; target=&quot;_blank&quot;&gt;update&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;algunas-limitaciones-de-spring-data-jdbc&quot;&gt;Algunas limitaciones de Spring Data JDBC&lt;/h2&gt;
&lt;p&gt;Spring Data JDBC simplifica muchas acciones, pero también tiene ciertas limitaciones, sobre todo en acciones con modelos relacionados.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Como la instancia de un modelo no tiene ningún proxy, no puede saber que propiedades se han añadido o borrado de un objeto, por lo que al ejecutar un guardado de un modelo con tablas relacionadas, estas siempre se borran y se vuelven a insertar. (test updateWithRelations)&lt;/li&gt;
  &lt;li&gt;Así como JPA acepta relaciones &lt;em&gt;OneToMany&lt;/em&gt;, &lt;em&gt;ManyToOne&lt;/em&gt; o &lt;em&gt;ManyToMany&lt;/em&gt;, Spring Data JDBC acepta solo relaciones &lt;em&gt;OneToMany&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Aún no está implementada la interfaz &lt;em&gt;PagingAndSortingRepository&lt;/em&gt;, lo que implica que la paginación hay que hacerla de manera manual, como por ejemplo, haciendo uso de &lt;em&gt;@Query&lt;/em&gt;. Hay una tarea en el &lt;a href=&quot;https://jira.spring.io/browse/DATAJDBC-101&quot; target=&quot;_blank&quot;&gt;jira de Spring&lt;/a&gt;, pero es de prioridad &lt;em&gt;minor&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ugaitz</name></author><category term="base" /><category term="de" /><category term="datos,spring,jdbc," /><category term="JPA" /><summary type="html">Spring Data JDBC es una librería para facilitar la creación de repositorios que acceden a bases de datos sin tratar con la complejidad que supone utilizar JPA. El hecho de que JPA ofrezca muchas funcionalidades como caché, carga de relaciones bajo demanda (Lazy), etc. supone que el desarrollador tenga que tener en cuenta cierta complejidad.</summary></entry></feed>