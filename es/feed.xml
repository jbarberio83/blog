<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://blog.arima.eu/es/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.arima.eu/es/" rel="alternate" type="text/html" /><updated>2020-07-06T09:35:26+00:00</updated><id>https://blog.arima.eu/feed.xml</id><title type="html">ARIMA</title><subtitle></subtitle><entry xml:lang="en"><title type="html">Another way of doing tests: property-based testing</title><link href="https://blog.arima.eu/es/2020/07/06/property-based-testing.html" rel="alternate" type="text/html" title="Another way of doing tests: property-based testing" /><published>2020-07-06T09:00:00+00:00</published><updated>2020-07-06T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/07/06/property-based-testing</id><content type="html" xml:base="https://blog.arima.eu/2020/07/06/property-based-testing.html">&lt;h2 id=&quot;what-is-property-based-testing&quot;&gt;What is property-based testing?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Property-based testing&lt;/em&gt; (from now on PBT) is another alternative for development tests where the main focus, instead of being a specific example/case, becomes a property of the the use case, understanding that a property becomes something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;for all input (x,y,….)&lt;br /&gt;
where precondition (x,y…) is met &lt;br /&gt;
the property (z,k….) is true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally the properties are not too detailed, they only verify some general characteristic that must be met.&lt;/p&gt;

&lt;p&gt;For example, to test an addition custom method, if we were doing &lt;em&gt;example-based testing&lt;/em&gt;, we could have several tests like these:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;- given the numbers 10 and 1 the sum will be 11
- given the numbers 10 and 20 the sum will be 30
   . . . . &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if we were doing PBT, we would formulate a more general test, for example like the one shown below:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;for any integer a and b that are between 1 and 20
the sum of a and b will be greater than a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s look at the implications of a test like this.&lt;/p&gt;

&lt;h3 id=&quot;for-all-input-a-b&quot;&gt;For all input (&lt;em&gt;a, b&lt;/em&gt;)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;pre style=&quot;margin-bottom: 0px&quot;&gt;
&lt;code&gt;&lt;b&gt;for any integer a and b&lt;/b&gt; that are between 1 and 20
the sum of a and b will be greater than a&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Several sets of tests will be run with combinations of random values ​​for &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; (the exact number of runs depends on the framework/library used and is usually configurable).&lt;/p&gt;

&lt;h3 id=&quot;where-precondition-is-met-a-and-b-between-1-and-20&quot;&gt;Where precondition is met (&lt;em&gt;a and b between 1 and 20&lt;/em&gt;)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;pre style=&quot;margin-bottom: 0px&quot;&gt;
&lt;code&gt;for any integer a and b &lt;b&gt;that are between 1 and 20&lt;/b&gt;
the sum of a and b will be greater than a&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are indicating a precondition that both &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must be between &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and&lt;code class=&quot;highlighter-rouge&quot;&gt; 20&lt;/code&gt;. If the random values ​​that are generated for a test (test execution, if we are purists) do not comply, it is discarded as a valid test and continues with other values.&lt;/p&gt;

&lt;h3 id=&quot;property-ab-a-is-true&quot;&gt;Property (&lt;em&gt;a+b&amp;gt; a&lt;/em&gt;) is true&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;pre style=&quot;margin-bottom: 0px&quot;&gt;
&lt;code&gt;for any integer a and b that are between 1 and 20
&lt;b&gt;the sum of a and b will be greater than a&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This check is to be executed every time.&lt;/p&gt;

&lt;h2 id=&quot;from-theory-to-practice&quot;&gt;From theory to practice&lt;/h2&gt;

&lt;p&gt;Ok and how does this apply to my use case? I review my tests, defined in &lt;a href=&quot;https://github.com/jaguado-arima/time-report-pbt/blob/feature/01_tests_jqwik_property_test/src/test/java/eu/arima/tr/reports/ reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;GetDayStatusSummaryForWorkerAndDayTests.java&lt;/a&gt; and I think about whether any of them could be written based on method properties regardless of the “exact” values ​​of the parameters.
I realize that I have two tests that are actually written in these terms:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Displayname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;the_status_result_belongs_to_the_requested_worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWorkerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Displayname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;the_status_result_belongs_to_the_requested_day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In both I am doing tests based on concrete examples, but actually if we read what is intended to be tested, it is much more generic: perhaps we could apply PBT here?&lt;/p&gt;

&lt;p&gt;For Java there are several tools, the most popular are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pholser.github.io/junit-quickcheck/site/0.9.1/#&quot; target=&quot;_blank&quot;&gt;junit-quickcheck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jqwik.net/&quot; target=&quot;_blank&quot;&gt;jqwik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems that the first one doesn’t support JUnit 5, so we’re going to try it with &lt;strong&gt;jqwik&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We add the dependency in the pom.xml&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.jqwik&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jqwik&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.3.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then we reformulate our tests to PBT “format”:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetDayStatusSummaryForWorkerAndDayPropertyTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;ReportsServiceImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@BeforeProperty&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReportsServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WorklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Property&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Given the username of a worker and a date the status result has that username and date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;the_status_result_belongs_to_the_requested_worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localdates&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWorkerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Provide&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Arbitrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;localdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Arbitrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arbitraries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Arbitrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arbitraries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Arbitrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arbitraries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Combinators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LocalDate:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila! Our test runs 1,000 times with a different set of input parameters each time (it’s as if we had generated and run 1,000 different tests). If we show both parameters on the console, we will see the 1000 combinations that are executed. The default number of executions varies depending on the selected tool and is normally configurable. If we run it a second time, it will run 1000 times with a different set of parameters.&lt;/p&gt;

&lt;p&gt;Note: This full example is available at &lt;a href=&quot;https://github.com/jaguado-arima/time-report-pbt/tree/feature/01_tests_jqwik_property_test&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;. To personalize/configure different parameters, consult the &lt;a href=&quot;https://jqwik.net/&quot; target=&quot;_blank&quot;&gt;jqwik documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In summary&lt;/h2&gt;

&lt;p&gt;So far a very simple case has helped us understand the concept of &lt;em&gt;property-based testing&lt;/em&gt;. Reading the documentation and reviewing the state of the art, it seems that in more complex cases, doing PBT is more complicated: both when formulating/identifying the tests and when implementing them.&lt;/p&gt;

&lt;p&gt;It is clear that like many other testing tools/trends, there is nothing black or white. There is no one type of test better than another, at least not absolutely: it depends on the context (functionality/project…) to which it applies.&lt;/p&gt;

&lt;p&gt;Based on this and the research, the ideas I would stay with are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With &lt;em&gt;property-based testing&lt;/em&gt;, we can replace several example-based tests with only one, testing the method with multiple combinations of inputs (which will vary with each execution). It is more difficult to identify them given their generic nature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With &lt;em&gt;example-based testing&lt;/em&gt; the combinations will be ones chosen by the developer (fixed in all executions) and the tests will be very specific. They are easy to develop and understand. They are not that exhaustive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first glance it occurs to me: and why not use &lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterizedTests&lt;/code&gt; with a method that generates the parameters randomly? What does PBT offer that you cannot achieve with parameterized tests?&lt;/p&gt;

&lt;p&gt;Basically, it offers us the possibility of having not only values ​​for random inputs, but also different combinations between them (something that we would otherwise have to implement in some other way).&lt;/p&gt;

&lt;p&gt;For example, in &lt;a href=&quot;https://github.com/jaguado-arima/time-report-pbt/tree/feature/02_tests_jqwik_combinedValues&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt; we have added a &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println&lt;/code&gt; for the parameters of the previous test and we have also created a class &lt;code class=&quot;highlighter-rouge&quot;&gt;JqwikPropertiesTests.java&lt;/code&gt; whose sole objective is to look at the combinations:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edgeCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EdgeCasesMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCombinedValuesOfTwoParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@IntRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@IntRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s, %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edgeCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EdgeCasesMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCombinedValuesOfThreParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@IntRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@IntRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ForAll&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@IntRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s, %s, %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code generates an output of combinations, such as:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Combination of parameters generated for the first example&lt;/th&gt;
&lt;th&gt;Combination of parameters generated for the second example&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0, 0&lt;br /&gt;

0, 2&lt;br /&gt;
0, 1&lt;br /&gt;
0, 10&lt;br /&gt;
2, 0&lt;br /&gt;
2, 2&lt;br /&gt;
2, 1&lt;br /&gt;
2, 10&lt;br /&gt;
1, 0&lt;br /&gt;
1, 2&lt;br /&gt;
1, 1&lt;br /&gt;
1, 10&lt;br /&gt;
10, 0&lt;br /&gt;
10, 2&lt;br /&gt;
10, 1&lt;br /&gt;
10, 10&lt;br /&gt;
8, 0&lt;br /&gt;
1, 5&lt;br /&gt;
7, 2&lt;br /&gt;
10, 4&lt;br /&gt;
9, 3&lt;br /&gt;
1, 3&lt;br /&gt;
8, 4&lt;br /&gt;
10, 6&lt;br /&gt;
4, 10&lt;br /&gt;
5, 9&lt;br /&gt;
2, 0&lt;br /&gt;
0, 5&lt;br /&gt;
6, 8&lt;br /&gt;
3, 5&lt;/td&gt;
&lt;td&gt;0, 10, 20&lt;br /&gt;
0, 10, 30&lt;br /&gt;
0, 20, 20&lt;br /&gt;
0, 20, 30&lt;br /&gt;
2, 10, 20&lt;br /&gt;
2, 10, 30&lt;br /&gt;
2, 20, 20&lt;br /&gt;
2, 20, 30&lt;br /&gt;
1, 10, 20&lt;br /&gt;
1, 10, 30&lt;br /&gt;
1, 20, 20&lt;br /&gt;
1, 20, 30&lt;br /&gt;
10, 10, 20&lt;br /&gt;
10, 10, 30&lt;br /&gt;
10, 20, 20&lt;br /&gt;
10, 20, 30&lt;br /&gt;
0, 12, 21&lt;br /&gt;
1, 11, 29&lt;br /&gt;
9, 17, 24&lt;br /&gt;
1, 10, 27&lt;br /&gt;
4, 20, 29&lt;br /&gt;
0, 19, 23&lt;br /&gt;
0, 10, 27&lt;br /&gt;
7, 11, 20&lt;br /&gt;
2, 10, 22&lt;br /&gt;
4, 10, 23&lt;br /&gt;
7, 14, 28&lt;br /&gt;
8, 20, 25&lt;br /&gt;
7, 20, 22&lt;br /&gt;
10, 17, 30&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In addition to combinations, it offers us different tools for generating those parameters and configurations for more complex cases.&lt;/p&gt;

&lt;p&gt;The price: change the focus of the tests, learn a new framework for their implementation, plus the execution time.&lt;/p&gt;

&lt;p&gt;My feeling is that these tests end up being much more complex if you want to get the most out of them, and although I see their benefits, what I’m not sure of is whether there are any real projects that use this type of testing. Is it used intensively throughout or only in some of the functionalities that do not require extra configuration/customization? What should the characteristics of my project be to invest in this type of testing rather than example-based testing?&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Below I’ve added some references that I’ve used and that have helped me understand the concept of &lt;em&gt;property-based testing&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/criteo-labs/introduction-to-property-based-testing-f5236229d237&quot;&gt;Introduction to Property Based Testing&lt;/a&gt; - &lt;em&gt;by Nicolas Dubien&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.erikschierboom.com/2016/02/22/property-based-testing/&quot;&gt;Property-based testing&lt;/a&gt; - &lt;em&gt;by Erik Schierboom&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://felginep.github.io/2019-03-20/property-based-testing&quot;&gt;Property based testing&lt;/a&gt; - &lt;em&gt;by Pierre Felgines&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@yoan.thirion/improve-your-software-quality-with-property-based-testing-70bd5ad9a09a&quot;&gt;Improve your software quality with Property-Based Testing&lt;/a&gt; - &lt;em&gt;by Yoan Thirion&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ssanj.net/posts/2016-06-26-property-based-testing-patterns.html&quot;&gt;Property-based Testing Patterns&lt;/a&gt; - &lt;em&gt;by Sanjiv Sahayam&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>jessica</name></author><category term="testing," /><category term="property" /><category term="based" /><category term="testing," /><category term="PBT," /><category term="calidad," /><category term="software" /><category term="quality," /><category term="QA," /><category term="junit" /><summary type="html">What is property-based testing?</summary></entry><entry xml:lang="es"><title type="html">Descubriendo JUnit 5: Tests Parametrizados</title><link href="https://blog.arima.eu/es/2020/07/01/parameterized-tests.html" rel="alternate" type="text/html" title="Descubriendo JUnit 5: Tests Parametrizados" /><published>2020-07-01T09:00:00+00:00</published><updated>2020-07-01T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/07/01/parameterized-tests</id><content type="html" xml:base="https://blog.arima.eu/2020/07/01/parameterized-tests.html">&lt;p&gt;Estaba preparando el ejemplo de tests para el post &lt;a href=&quot;https://blog.arima.eu/2020/05/25/mutation-testing.html&quot; target=&quot;_blank&quot;&gt;Mutation testing systems, mejorando la calidad de los tests&lt;/a&gt; y me surgió una duda sobre si podría probar de forma más exhaustiva el método under test, ya que era consciente de que me dejaba algunos ejemplos sin probar.&lt;/p&gt;

&lt;p&gt;El método de ejemplo a testear es:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Worklog:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addDayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addDayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addDayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Básicamente lo que hace es a partir de un conjunto de worklogs se encarga de sumar las duraciones y comprobarlas “contra” la jornada estándar de 8 horas. Si la suma es &amp;gt; 8 debe indicar que hay horas extras, si es &amp;lt; 8 faltarán por imputar horas y si es 8 todo estará OK.&lt;/p&gt;

&lt;p&gt;Este caso es bastante trivial, pero si lo extrapolamos a métodos más complejos, no es la primera situación de estas características que me encuentro, y normalmente termino creando varios tests con diferentes combinaciones finitas, de casos de ejemplo acotados, que normalmente podría sacar de una tabla de este tipo:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;1 único worklog&lt;/th&gt;
      &lt;th&gt;lista de n worklogs (n&amp;lt;1)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;caso 1&lt;/td&gt;
      &lt;td&gt;suma = 8&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;caso 2&lt;/td&gt;
      &lt;td&gt;suma = a (a&amp;lt;8)&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;caso 3&lt;/td&gt;
      &lt;td&gt;suma = b (b&amp;gt;8)&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Así a priori mi batería de tests para este método podría ser la siguiente&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-30-parameterized-tests/01_test_set.png&quot; alt=&quot;Primera aproximación del set de tests&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Teniendo en cuenta que &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; los fijaré (en este caso &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 7&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;b = 9&lt;/code&gt;) siempre me quedo con la duda de que estoy testeando algunos ejemplos pero no otros: &lt;code class=&quot;highlighter-rouge&quot;&gt;suma = 7&lt;/code&gt; pero no &lt;code class=&quot;highlighter-rouge&quot;&gt;suma = 0&lt;/code&gt;o &lt;code class=&quot;highlighter-rouge&quot;&gt;suma = 9&lt;/code&gt; pero no &lt;code class=&quot;highlighter-rouge&quot;&gt;suma = 10&lt;/code&gt;, o listas de 1 y 3 elementos pero no de 0 o más de 3….&lt;/p&gt;

&lt;p&gt;En este caso en el que los casos 1 y 2 son muy acotados podría liarme la manta a la cabeza y hacer tests exhaustivos que probasen todos los casos… Por ejemplo&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-30-parameterized-tests/02_test_set.png&quot; alt=&quot;Segunda aproximación del set de tests&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero nunca me ha parecido algo apropiado porque pensando en esfuerzo vs beneficio parece que no compensa, y porque aumentar tanto la clase de test con métodos tan “redundantes” probablemente haga que mi clase de tests termine siendo infumable. El ejemplo anterior ratificaría esta idea… y ni siquiera cubrimos todos los ejemplos que se nos podrían ocurrir… ¡sólo hemos cubierto ejemplos del &lt;em&gt;caso 2&lt;/em&gt; con &lt;em&gt;un único worklog&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;¡Otra idea!, ¿por qué no iterar &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; veces la ejecución del método SUT junto el assert asociado, y personalizar el mensaje de error utilizando el parámetro de la iteración?&lt;/p&gt;

&lt;p&gt;Algo así como el siguiente ejemplo&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_the_worklog_for_the_resquested_day_is_less_than_8_hours_the_status_is_MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Statuslist size failed for worklogs with duration &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Daystatus failed for with duration &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En este caso estaré ejecutando un único test, pero si falla para algún valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, el mensaje de error me indicará el ejemplo que falla.&lt;/p&gt;

&lt;p&gt;Vale, con esto cubro los casos más acotados….. y ¿para los menos acotados? Se me ocurre generar varios valores random y aplicar el mismo patrón&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_the_worklog_for_the_resquested_day_is_more_than_8_hours_the_status_is_EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogDurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogDurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Statuslist size failed for worklogs with duration &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Daystatus failed for with duration &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pues sí, reconozco que alguna vez (en alguno de mis sideprojects) he hecho alguna de estas “chapucillas”🤫😰. Digo chapucilla, porque a priori no suena muy bien hacer estas triquiñuelas… (pero bueno, hay tests, hay cobertura de mutantes, estoy trasteando, así practico testing…..). Excusas y más excusas. Intento engañarme a mí misma y no duermo tranquila. Amanezco, pensando en cómo podría cubrir estos “vacíos” aparentes. Es un caso sencillo… ¿no hay nada que pueda ayudarme en esto?&lt;/p&gt;

&lt;p&gt;La respuesta es que sí, y ¡encima lo ofrece JUnit 5 por sí mismo!: no me hace falta ninguna herramienta nueva, sólo sacarle más chicha a la que tengo. La solución: &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests&quot; target=&quot;_blank&quot;&gt;Parameterizered Tests&lt;/a&gt;. Están en modo experimental para la última versión de JUnit 5, pero lo cierto es que están disponibles desde la versión 5.0 ¡y yo sin conocerlos! Vamos a probarlo.&lt;/p&gt;

&lt;p&gt;Lo primero es añadir en el &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; la dependencia correspondiente:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-jupiter-params&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación, modificamos el primer test utilizando la anotación y queda como sigue:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Given a worklog for the requested day with {0} duration the status is MISSING_HOURS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ValueSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;worklog_duration_for_requested_day_less_than_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertStatusEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tras esta modificación no estamos ejecutando un sólo test, &lt;strong&gt;estamos ejecutando 8 tests&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-30-parameterized-tests/03_test_parameterized.png&quot; alt=&quot;Ejemplo de parameterized&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Además, si por ejemplo, quisiéramos hacer lo mismo con el método que utilizaba valores random, podríamos conseguir algo similar haciendo:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Given a worklog for the requested day {0} the status is EXTRA_HOURS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@MethodSource&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;worklog_duration_for_requested_day_more_than_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertStatusEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;worklog_duration_for_requested_day_more_than_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// since 24h/day --&amp;gt; max value is 24&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomDurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomDurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[with %d duration]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mock info in test description&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En este caso en vez de devolver una lista de enteros con las duraciones hemos probado a hacer el ejemplo devolviendo directamente diferentes worklogs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-30-parameterized-tests/04_test_parameterized_random.png&quot; alt=&quot;Ejemplo de parameterized con valores ramdom&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nota: Este ejemplo está disponible al completo &lt;a href=&quot;https://github.com/wearearima/time-report-parameterized/tree/feature/04_tests_parameterizedTest&quot; target=&quot;_blank&quot;&gt;en Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Otra cosa que siempre he echado de menos de mis tiempos en Grails ha sido la posibilidad de utilizar nombres más “legibles” para los tests. Y ya que estoy de suerte, y con la anotación &lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt; puedo poner un nombre… seguro que hay algo para los tests “normales”… ¡Bingo! Otra anotación al rescate: &lt;code class=&quot;highlighter-rouge&quot;&gt;@Displayname&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pues nada, ahora tengo unos tests mejores, más fáciles de entender y de mantener que los de los ejemplos 2 y 3, y más completos que los del ejemplo 1.&lt;/p&gt;

&lt;h2 id=&quot;descubriendo-junit-5&quot;&gt;Descubriendo JUnit 5&lt;/h2&gt;
&lt;p&gt;Nos acostumbramos a hacer las cosas de determinada manera y a veces nos cuesta levantar la mirada y ver si hay herramientas que nos faciliten la vida (que con poco esfuerzo vengan a cubrir carencias que habíamos detectado en nuestro propio código). En este caso, hemos descubierto unas anotaciones que nos ayudarán en nuestro día a día a hacer que nuestros tests sean mejores.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt; para poder crear múltiples ejemplos para una misma situación de un SUT. Los parámetros de entrada pueden ser tan sencillos como una lista de valores (si sólo se necesita uno utilizando &lt;code class=&quot;highlighter-rouge&quot;&gt;@ValueSource&lt;/code&gt;) o más complejos, desde múltiples parámetros para cada test, hasta tipos de parámetros más complejos (utilizando por ejemplo &lt;code class=&quot;highlighter-rouge&quot;&gt;@MethodSource&lt;/code&gt;). Toda la información puede encontrarse &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests&quot; target=&quot;_blank&quot;&gt;en esta sección&lt;/a&gt; de la documentación de JUnit 5.&lt;/p&gt;

&lt;p&gt;Además &lt;code class=&quot;highlighter-rouge&quot;&gt;@DisplayName&lt;/code&gt; para poder poner nombres más legibles a los tests, algo muy útil especialmente cuando fallan: poder leer lo que está pasando de forma sencilla. Toda la información puede encontrarse &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-names&quot; target=&quot;_blank&quot;&gt;en esta sección&lt;/a&gt; de la documentación de JUnit 5.&lt;/p&gt;

&lt;h2 id=&quot;más-allá&quot;&gt;Más allá…&lt;/h2&gt;
&lt;p&gt;Sin embargo, sigo notando cierto run run: ¿qué pasa con esos casos que no puedo atacar de forma exhaustiva? ¿Podría usar &lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt;s y pasar random values de diferentes listas?
Parece que sí, pero… en este caso que es sencillo no parece que tenga problemas. Sin embargo y ¿si tuviese más parámetros de entrada o más complejos? ¿Tendría que desarrollar mi propio “generador” de combinaciones aleatorias? ¿Cómo de frágiles serían mis tests? ¿Es posible hacer tests que no estén basados en ejemplo? 
Investigando un poco me encuentro con un concepto que parece que puede encajar: &lt;strong&gt;Property Based Testing&lt;/strong&gt;, donde en base a unos parámetros de características determinadas se verifica una propiedad/comportamiento concreto del SUT.&lt;/p&gt;

&lt;p&gt;No tengo claro si encajaría en este ejemplo, pero ¿quizás deba profundizar más en el tema para ver si hay algo que podamos aprender y que nos permita mejorar nuestros tests? ¡Por supuesto, allá vamos!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Código fuente para ejemplo de primera versión de los tests disponible &lt;a href=&quot;https://github.com/wearearima/time-report-parameterized/tree/feature/01_tests_first_approach/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Código fuente para ejemplo de tests exhaustivos disponible &lt;a href=&quot;https://github.com/wearearima/time-report-parameterized/tree/feature/02_tests_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Código fuente para ejemplo de tests iterando SUT disponible &lt;a href=&quot;https://github.com/wearearima/time-report-parameterized/tree/feature/03_tests_tricky_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Código fuente para ejemplo de tests iterando SUT con valores random disponible &lt;a href=&quot;https://github.com/wearearima/time-report-parameterized/tree/feature/03_tests_tricky_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>jessica</name></author><category term="testing," /><category term="calidad," /><category term="software" /><category term="quality," /><category term="QA," /><category term="junit," /><category term="junit" /><category term="5," /><category term="parameterized" /><category term="test" /><summary type="html">Estaba preparando el ejemplo de tests para el post Mutation testing systems, mejorando la calidad de los tests y me surgió una duda sobre si podría probar de forma más exhaustiva el método under test, ya que era consciente de que me dejaba algunos ejemplos sin probar.</summary></entry><entry xml:lang="es"><title type="html">Mutation testing systems, mejorando la calidad de los tests</title><link href="https://blog.arima.eu/es/2020/05/25/mutation-testing.html" rel="alternate" type="text/html" title="Mutation testing systems, mejorando la calidad de los tests" /><published>2020-05-25T09:00:00+00:00</published><updated>2020-05-25T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/05/25/mutation-testing</id><content type="html" xml:base="https://blog.arima.eu/2020/05/25/mutation-testing.html">&lt;p&gt;Profesionalmente me etiqueto como &lt;em&gt;desarrolladora&lt;/em&gt;, aunque no me gustan mucho las etiquetas y me gusta más decir que la razón de ser de mi trabajo es: crear software de calidad. Pero ¿qué es &lt;strong&gt;software de calidad&lt;/strong&gt;? A mi me gusta definirlo como sigue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software de calidad es aquel que satisface las necesidades del usuario de forma eficiente y sin errores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podría añadir más adjetivos, entrar en detalle de por qué necesidades y no requerimientos… pero para mi ese sería el titular. Ahora bien, difícilmente se puede tener un software de calidad si este no está escrito con código de calidad.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software de calidad → código de calidad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Afortunadamente, los desarrolladores no nos encontramos solos en esta tarea. Existen herramientas para análisis de código de forma estática (Checkstyle, PMD, FindBugs, SonarQube…) y diferentes recomendaciones de buenas prácticas (personalmente destacaría Clean Code y The Pragmatic Programmer). Y ahí entre propuestas, siglas y métricas, no hay desarrollador que no asocie directamente el término &lt;em&gt;&lt;strong&gt;calidad&lt;/strong&gt;&lt;/em&gt; con el término &lt;em&gt;&lt;strong&gt;testing&lt;/strong&gt;&lt;/em&gt; (¿verdad?)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Código de calidad → tests de calidad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-el-camino-hacia-la-calidad&quot;&gt;Testing: el camino hacia la calidad&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tests are as important to the health of a project as the production code is.&lt;/strong&gt;&lt;/p&gt;
  &lt;p align=&quot;right&quot;&gt;&lt;strong&gt;Clean Code.&lt;/strong&gt; Chapter 9: Unit Tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hay varios tipos de test (unitarios, de integración, de aceptación…). Los más extendidos son los tests unitarios y los tests de integración. Con ellos se consigue una cierta percepción de seguridad, ya que si bien no sabemos si el código hace lo que debe, al menos hace lo que dice.&lt;/p&gt;

&lt;p&gt;¿Pero es esto así? Paradójicamente esta práctica consiste en generar más código, es decir, seguimos programando, ¿quién vela porque este código hace lo que dice?, es decir ¿quién vela por la calidad de los tests? De nuevo otra asociación de términos: &lt;strong&gt;tests de calidad&lt;/strong&gt; son aquellos que ofrecen un % de &lt;strong&gt;cobertura&lt;/strong&gt; del código alto.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tests de calidad → % cobertura elevado de nuestro código&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A mayor porcentaje de cobertura de código mejores tests y código más fiable. Esto no es nada nuevo. Si hablo de mi experiencia personal, hace algunos años (allá por inicios del 2000) ya formaba parte de las especificaciones de entrega de algunos proyectos el % de cobertura mínimo que debía tener un proyecto. “&lt;em&gt;Este entregable debe tener una batería de tests que aseguren un mínimo de 70% de cobertura de código&lt;/em&gt;”, como sinónimo de código libre de errores y calidad probada en un 70% del código al menos.&lt;/p&gt;

&lt;p&gt;Tomando como ejemplo una aplicación para controlar los partes de horas trabajados, vamos a imaginar que estamos desarrollando un método que dados un trabajador y un día, comprueba el estado de los partes de horas de ese trabajador en ese día (si ha cumplido o no las horas, si hay partes solapados….).&lt;/p&gt;

&lt;h5 id=&quot;reportsserviceimpljava-ver-todo&quot;&gt;ReportsServiceImpl.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/feature/01_tests_for_project_requirements/src/main/java/eu/arima/tr/reports/ReportsServiceImpl.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWorkerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vamos a ver un ejemplo de tests que entregábamos por aquel entonces:&lt;/p&gt;

&lt;h5 id=&quot;getdaystatussummaryforworkeranddaytestsjava-ver-todo&quot;&gt;GetDayStatusSummaryForWorkerAndDayTests.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/92fd1b537de787bc2a5d10dc85c9ee80295350d8/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_status_summary_for_worker_and_day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculates_the_status_based_on_worker_and_date_worklogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFromTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setToTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hemos configurado &lt;a href=&quot;https://www.eclemma.org/jacoco/&quot; target=&quot;_blank&quot;&gt;JaCoCo&lt;/a&gt; para obtener el informe de la cobertura de nuestros tests, y el resultado ha sido el siguiente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/01jacocoreport.png&quot; alt=&quot;JaCoCo report general&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos una cobertura de un 92% de líneas y 87% de ramas: objetivo cumplido. Pero…si nos fijamos: el primer test no fallará (casi) nunca porque siempre termina con &lt;code class=&quot;highlighter-rouge&quot;&gt;assert true&lt;/code&gt;, el segundo es un poco “más completo” porque al menos está verificando que se recuperan los partes… &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Pues esta era mi realidad, y mucho me temo que LA realidad, de aquella época en muchos proyectos (y quien sabe si en algunos de hoy en día). Los proyectos cumplían los requerimientos de cobertura de código, lo que distaba mucho de tener un software de calidad.&lt;/p&gt;

&lt;p&gt;Es cierto que el ejemplo que he puesto es extremo, pero es real. En mi opinión, el problema está en el enfoque: se ha dado la vuelta a la tortilla y en él los tests nacen como una mera herramienta para asegurar uno de los requerimientos del proyecto.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;% cobertura mínimo por requerimiento → test = “pérdida de tiempo”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Volvamos al enfoque original. Quedaría:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software de calidad → código de calidad → tests de calidad → % cobertura de código&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En este escenario, los tests nacen bajo la premisa de tener un código de mayor calidad y el % de cobertura se convierte en un indicador más. Vamos a ver un fragmento de un ejemplo de test mejor, de esos de los que hacemos por convicción y no por cumplir un requerimiento sin más (supongo que más parecidos a los que podemos encontrarnos en los proyectos actuales que los anteriores…).&lt;/p&gt;

&lt;h5 id=&quot;getdaystatussummaryforworkeranddaytestsjava-ver-todo-1&quot;&gt;GetDayStatusSummaryForWorkerAndDayTests.java &lt;a href=&quot;https://github.com/wearearima/time-report-app/blob/feature/02_tests_for_testing_purposes/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java&quot; target=&quot;_blank&quot;&gt;ver todo&lt;/a&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_less_than_8_hours_the_status_is_MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MISSING_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_equal_to_8_hours_the_status_is_RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RIGHT_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_the_worklog_for_the_resquested_day_is_more_than_8_hours_the_status_is_EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklogRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameAndDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;DayStatusSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayStatusSummaryForWorkerAndDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USU&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DayStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_HOURS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En este caso el porcentaje de cobertura es del 100% de líneas de código y ramas. Y además parece que los tests ya tienen más sentido. Ahora ya sí, nos sentiríamos seguros con ellos, ¿verdad? Es así, o ¿es sólo una percepción?&lt;/p&gt;

&lt;p&gt;Si alguien modificase algo del método, por su puesto, antes de comitear y pushear pasaría los tests. Si no hubiese ningún test en rojo, vía libre: no se ha “roto” nada.&lt;/p&gt;

&lt;p&gt;¿Seguro?&lt;/p&gt;

&lt;p&gt;Supongamos que lo que se modifica en el método de ejemplo es:&lt;/p&gt;

&lt;h5 id=&quot;reportsserviceimpljava&quot;&gt;ReportsServiceImpl.java&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;por&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Worklog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklogsForDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worklog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nuestros tests seguirán pasando&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Además seguimos con un % de cobertura alto… ¡Todo perfecto!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Test → &lt;strong&gt;sensación&lt;/strong&gt; de seguridad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mutation-testing-systems-asegurando-el-camino&quot;&gt;Mutation testing systems: asegurando el camino&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Because we can’t write perfect software, it follows that we can’t write perfect test software either. We need to test the tests.&lt;/strong&gt;&lt;/p&gt;
  &lt;p align=&quot;right&quot;&gt;&lt;strong&gt;The Pragmatic Programmer.&lt;/strong&gt; Chapter 8: Pragmatic projects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parece que los tests que hemos creado no son tan buenos como creíamos, no tienen calidad suficiente como para asegurar la calidad (valga la redundancia) de nuestro método. Nos han ofrecido una falsa sensación de seguridad.&lt;/p&gt;

&lt;p&gt;Está claro que conseguir % altos de cobertura no es sencillo y si escribir tests es costoso, escribir buenos tests lo es aún más y lo que obtenemos es una sensación de seguridad que no es real. ¿No podríamos hacer que esta sensación fuese más cercana a la realidad? ¿No podríamos detectar situaciones, como la que hemos visto, de forma automática?&lt;/p&gt;

&lt;p&gt;Pues bien, para abordar este tipo de situaciones surgen los denominados &lt;em&gt;Mutation Testing Systems&lt;/em&gt;. La idea que hay detrás de ellos no es otra que la que hemos expuesto en el último ejemplo: simular cambios en el código fuente que se está probando y verificar que efectivamente, algún test fallará tras haber realizado la modificación.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software de calidad → código de calidad → tests de calidad → % cobertura mutation tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Los conceptos básicos son los siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cada cambio que se genera en el código es un &lt;strong&gt;mutante&lt;/strong&gt; (mutant).&lt;/li&gt;
  &lt;li&gt;Cada cambio (o mutante) que nuestros tests son capaces de detectar se denomina &lt;strong&gt;matar un mutante&lt;/strong&gt; (killed mutant).&lt;/li&gt;
  &lt;li&gt;Cada cambio (o muntante) que nuestros tests no son capaces de detectar son &lt;strong&gt;mutantes vivos&lt;/strong&gt; (survived mutant).&lt;/li&gt;
  &lt;li&gt;Los cambios en el código se generan mediante &lt;strong&gt;operadores mutantes&lt;/strong&gt; (mutators / mutation operators), que se agrupan en diferentes categorias dependiendo del tipo de cambio que realicen en el código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalmente no había oído hablar de este concepto hasta hace relativamente poco sin embargo, la realidad es que ya llevan varios años entre nosotros. Existen múltiples alternativas para los diferentes stacks tecnológicos. Por ejemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stryker-mutator.io/&quot; target=&quot;_blank&quot;&gt;Stryker&lt;/a&gt; para JavaScript, TypeScript, C# y Scala&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thesoftwaredesignlab.github.io/mutode/&quot; target=&quot;_blank&quot;&gt;Mutode&lt;/a&gt; para JavaScript y Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cosmic-ray.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;Cosmic Ray&lt;/a&gt; para Python&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/mutmut/&quot; target=&quot;_blank&quot;&gt;mutmut&lt;/a&gt; para Python&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mbj/mutant&quot; target=&quot;_blank&quot;&gt;Mutant&lt;/a&gt; para Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y volviendo a Java algunos de los sistemas de mutación son (o han sido):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pitest.org/&quot; target=&quot;_blank&quot;&gt;PIT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jumble.sourceforge.net/index.html&quot; target=&quot;_blank&quot;&gt;Jumble&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jester.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Jester&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeffoffutt/muJava&quot; target=&quot;_blank&quot;&gt;muJava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nosotros hemos utilizado PIT porque:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Es sencillo de usar&lt;/li&gt;
  &lt;li&gt;Se integra fácilmente en los proyectos que los hemos usado (mediante un plugin de maven) así como en el IDE (en nuestro caso Eclipse)&lt;/li&gt;
  &lt;li&gt;Admite diferentes configuraciones (algunas que permiten mejorar la eficiencia)&lt;/li&gt;
  &lt;li&gt;Aún está activo&lt;/li&gt;
  &lt;li&gt;Parece ser la solución más utilizada en la actualidad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si ejecutamos el informe de &lt;em&gt;pitest&lt;/em&gt; en nuestro ejemplo, veremos este resultado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/PitTestCoverageReport01.png&quot; alt=&quot;Informe _Pit test_ general&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aquí se indica el resultado general: por un lado la cobertura de líneas de código y por otro lado la cobertura de mutación.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-12-mutation-testing/PitTestCoverageReportClass01.png&quot; alt=&quot;Informe _Pit test_ clase&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Las líneas marcadas en verde, reflejan código en el que PIT ha introducido cambios y los tests han sido capaces de detectarlo. Las líneas marcadas en rojo, reflejan las líneas de código que nuestros tests no han sabido detectar que había habido cambios. Si nos fijamos la línea 27 es la que nosotros habíamos modificado y nuestros tests habían pasado. Ahora tenemos dos opciones: seguir adelante, asumiendo la fragilidad que puede tener nuestro código o lo más acertado (y lógico) añadir/corregir tests que nos aseguren la fiabilidad frente a los cambios detectados.&lt;/p&gt;

&lt;p&gt;En el siguiente &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/03_tests_improving_quality&quot; target=&quot;_blank&quot;&gt;enlace&lt;/a&gt; está disponible el código del ejemplo en el que hemos trabajado, donde hemos mejorado los tests para conseguir una mayor cobertura de mutantes.&lt;/p&gt;

&lt;p&gt;Los mutantes que se aplican son configurables, y hay que valorar el equilibrio entre la cantidad/tipo de mutantes configurados y el tiempo de ejecución. A mayor número de tests, mayor número de líneas de código y mayor cantidad de mutantes, más tiempo necesitará Pit en generar el informe correspondiente. Puede llegar un momento en el que sea tan costoso pasar el informe que se hagamos skip, y entonces todo el esfuerzo dedicado a testing se desvanecería. En los ejemplos hemos visto sólo tests unitarios pero lo mismo aplica a los test de integración (muchos de ellos ya costosos en sí mismos).&lt;/p&gt;

&lt;p&gt;En nuestro caso, solemos configurar los que vienen por defecto (DEFAULTS) y añadiendo los del siguiente grupo (NEW_DEFAULTS). En el código de ejemplo hay alguno más configurado, pero &lt;a href=&quot;https://pitest.org/quickstart/mutators/&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; se muestran los “mutadores” (mutators) de Pit, así que prueba a cambiar la configuración y a ver los diferentes resultados.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software de calidad → código de calidad → tests de calidad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software de calidad require de código calidad que a su vez puede validarse gracias a tests de calidad.&lt;/p&gt;

&lt;p&gt;Generalmente hay más código para testear un método que para implementarlo, lo que conlleva un claro esfuerzo en tiempo: dedicaremos más tiempo al testeo de un método que a su implementación. Necesitamos asegurar que dicho esfuerzo no sea en balde.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mutation testing&lt;/strong&gt; es una herramienta que nos permite evaluar y mejorar la calidad de nuestros tests. El precio a pagar es el aumento de tiempo necesario para pasarlos. Teniendo en cuenta que se basa en mutaciones de código y que aplica no sólo a tests unitarios, también a tests de integración, a medida que el código crezca y el número de tests aumente, mayor será el tiempo necesario para ejecutarlos. Es necesario, por tanto, buscar fórmulas que aseguren que en alguna fase de nuestro desarrollo todos los tests pasan: si dejamos de pasarlos porque es demasiado costoso todo el esfuerzo habrá sido en vano.&lt;/p&gt;

&lt;p&gt;Hemos dado un paso firme, pero nos queda recorrido en nuestro camino hacia la calidad: ¿Qué podemos hacer para buscar este equilibrio? ¿Podemos organizar de alguna forma los tests para facilitarlo? ¿Hay herramientas que nos permitan desarrollar/ejecutar tests de forma más eficiente?&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Si quieres probar todo esto puedes descargarte el código de &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/01_tests_for_project_requirements&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Pruébalo tu mismo, el código está disponible &lt;a href=&quot;https://github.com/wearearima/time-report-app/tree/feature/02_tests_for_testing_purposes&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>jessica</name></author><category term="testing," /><category term="mutation" /><category term="testing" /><category term="systems," /><category term="pit," /><category term="pitest," /><category term="calidad," /><category term="software" /><category term="quality," /><category term="QA," /><category term="cobertura," /><category term="coverage," /><category term="junit" /><summary type="html">Profesionalmente me etiqueto como desarrolladora, aunque no me gustan mucho las etiquetas y me gusta más decir que la razón de ser de mi trabajo es: crear software de calidad. Pero ¿qué es software de calidad? A mi me gusta definirlo como sigue:</summary></entry><entry xml:lang="es"><title type="html">Cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD)</title><link href="https://blog.arima.eu/es/2020/04/28/examen-ckad.html" rel="alternate" type="text/html" title="Cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD)" /><published>2020-04-28T06:00:00+00:00</published><updated>2020-04-28T06:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/28/examen-ckad</id><content type="html" xml:base="https://blog.arima.eu/2020/04/28/examen-ckad.html">&lt;p&gt;En este post voy a explicar un poco mi experiencia de cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linuxfoundation.org/&quot; target=&quot;_blank&quot;&gt;The Linux Foundation&lt;/a&gt; y &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; 
ofrecen dos variantes en la certificación de Kubernetes, CKAD y CKA. En pocas palabras:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cncf.io/certification/ckad/&quot; target=&quot;_blank&quot;&gt;CKAD&lt;/a&gt; está diseñado para desarrolladores de software que deseen desarrollar e implementar sus aplicaciones en Kubernetes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cncf.io/certification/cka/&quot; target=&quot;_blank&quot;&gt;CKA&lt;/a&gt; está diseñado para los administradores de sistemas que administran los clústeres de Kubernetes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En general, CKA cubre un temario más amplio que CKAD. Puedes ver información sobre las similitudes y diferencias entre los dos exámenes &lt;a href=&quot;https://medium.com/faun/cka-vs-ckad-1dd45527505&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/ckad-cka.png&quot; alt=&quot;CKAD / CKA&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como he dicho, CKAD es uno de los dos programas diseñados por la CNCF y The Linux Foundation para certificar a los usuarios que pueden “diseñar, construir, configurar y exponer aplicaciones nativas en la nube para Kubernetes”.&lt;/p&gt;

&lt;p&gt;Si eres un desarrollador que usas la infraestructura centrada en Kubernetes a diario, CKAD es un gran método para medir tus habilidades con los últimos estándares de la industria.&lt;/p&gt;

&lt;p&gt;Cabe destacar que Kubernetes es una herramienta con la que yo ya había trabajado con anterioridad y por lo tanto, estaba familiarizado con la mayoría de conceptos.&lt;/p&gt;

&lt;h2 id=&quot;por-qué-deberías-hacer-este-examen&quot;&gt;¿Por qué deberías hacer este examen?&lt;/h2&gt;

&lt;p&gt;A pesar de que en &lt;a href=&quot;https://arima.eu/&quot; target=&quot;_blank&quot;&gt;ARIMA&lt;/a&gt; por lo general no somos muy partidarios de medir los conocimientos de las personas u organizaciones en función de los certificados que puedan poseer, hay ocasiones en las que disponer de un certificado emitido por un tercero sí que puede ayudar como carta de presentación a la hora de ofrecer soluciones que giran en torno a una herramienta como Kubernetes. Más aún cuando se trata de una organización del prestigio de la CNCF y de un certificado que tiene un cierto grado de dificultad como puede ser el CKAD.&lt;/p&gt;

&lt;h2 id=&quot;prerequisitos&quot;&gt;Prerequisitos&lt;/h2&gt;

&lt;p&gt;No hay prequisitos oficiales para este examen, pero recomiendo tener experiencia práctica en &lt;strong&gt;Docker&lt;/strong&gt; y &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Al trabajarse constantemente con contenedores, uno debe comprender qué es una imagen de Docker, cómo ejecutar los contenedores, extraer y trabajar con imágenes, etc.&lt;/p&gt;

&lt;p&gt;Linux también es esencial para este examen, ya que el examen al ser 100% práctico necesitas tener bastante agilidad a la hora de editar ficheros, cambiar permisos, ejecutar comandos, etc.&lt;/p&gt;

&lt;h2 id=&quot;sobre-el-examen&quot;&gt;Sobre el examen&lt;/h2&gt;

&lt;p&gt;Este es un examen &lt;strong&gt;totalmente práctico&lt;/strong&gt;, no tiene preguntas de opción múltiple.&lt;/p&gt;

&lt;p&gt;Se te dará un conjunto de problemas que tienes que ir solventando desde una línea de comandos desplegada en una aplicación web y se espera que tardes aproximadamente dos horas en completarlo.&lt;/p&gt;

&lt;p&gt;Debes resolver &lt;strong&gt;19 preguntas&lt;/strong&gt; en &lt;strong&gt;2 horas&lt;/strong&gt; y cada pregunta tiene un valor diferente, desde &lt;strong&gt;2% a 13%&lt;/strong&gt;, pero la mayoría de las preguntas están entre &lt;strong&gt;8% y 5%&lt;/strong&gt;. La puntuación no corresponde al nivel de dificultad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para aprobar el examen es necesario sacar al menos el 66%.&lt;/strong&gt; En mi caso, conseguí un 88% en el primer intento y me dio tiempo justo a acabar las 19 preguntas a pesar de que fui bastante rápido en la resolución de los problemas. &lt;strong&gt;El tiempo es todo en este examen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El precio de este examen es de &lt;strong&gt;$300 USD&lt;/strong&gt;, y dispones de otro intento gratuito si suspendes el examen. El examen incluye preguntas de los siguientes temas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core Concepts (13%)&lt;/li&gt;
  &lt;li&gt;Configuration (18%)&lt;/li&gt;
  &lt;li&gt;Multi-Container Pods (10%)&lt;/li&gt;
  &lt;li&gt;Observability (18%)&lt;/li&gt;
  &lt;li&gt;Pod Design (20%)&lt;/li&gt;
  &lt;li&gt;Services &amp;amp; Networking (13%)&lt;/li&gt;
  &lt;li&gt;State Persistence (8%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En el examen, se te proporcionan &lt;strong&gt;4 clústeres&lt;/strong&gt; por los cuales tendrás que ir trabajando hasta completar todos los ejercicios. El sistema operativo que usan es un &lt;strong&gt;Ubuntu 16.04&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/clusters.png&quot; alt=&quot;Clusters&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al comienzo de cada pregunta, se te proporciona el comando que debes ejecutar para ir al clúster en concreto. Por ejemplo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl config use-context k8s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tipos-de-preguntas&quot;&gt;Tipos de preguntas&lt;/h3&gt;

&lt;p&gt;Las preguntas van desde preguntas relativamente cortas, como las que aparecen en la lista de  &lt;a href=&quot;https://github.com/dgkanatsios/CKAD-exercises&quot; target=&quot;_blank&quot;&gt;ejercicios CKAD de Dgkanatsios&lt;/a&gt;, hasta preguntas más largas de unas 6 o 7 líneas.&lt;/p&gt;

&lt;p&gt;Tienes que sentirte cómodo creando &lt;em&gt;pods&lt;/em&gt;, &lt;em&gt;developments&lt;/em&gt;, &lt;em&gt;jobs&lt;/em&gt;, &lt;em&gt;cronjobs&lt;/em&gt;, &lt;em&gt;services&lt;/em&gt;, etc. También habrá ejercicios de &lt;em&gt;rolling updates&lt;/em&gt; and &lt;em&gt;rollbacks&lt;/em&gt;. Básicamente preguntan todo el temario que entra en el examen.&lt;/p&gt;

&lt;h3 id=&quot;recursos-oficiales-del-examen&quot;&gt;Recursos oficiales del examen&lt;/h3&gt;

&lt;p&gt;Estos son los recursos que la propia CNCF pone a disposición de los estudiantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Certified Kubernetes Application Developer: &lt;a href=&quot;https://www.cncf.io/certification/ckad/&quot; target=&quot;_blank&quot;&gt;https://www.cncf.io/certification/ckad/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Curriculum Overview: &lt;a href=&quot;https://github.com/cncf/curriculum&quot; target=&quot;_blank&quot;&gt;https://github.com/cncf/curriculum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Candidate Handbook: &lt;a href=&quot;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&quot; target=&quot;_blank&quot;&gt;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exam Tips: &lt;a href=&quot;http://training.linuxfoundation.org/go/Important-Tips-CKA-CKAD&quot; target=&quot;_blank&quot;&gt;http://training.linuxfoundation.org/go/Important-Tips-CKA-CKAD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;FAQ: &lt;a href=&quot;http://training.linuxfoundation.org/go/cka-ckad-faq&quot; target=&quot;_blank&quot;&gt;http://training.linuxfoundation.org/go/cka-ckad-faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dónde-registrarse&quot;&gt;Dónde registrarse&lt;/h3&gt;

&lt;p&gt;Primero deberás registrarte en &lt;strong&gt;The Linux Foundation&lt;/strong&gt; desde &lt;a href=&quot;https://identity.linuxfoundation.org/user/login&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;. Después, podrás registrarte para el examen desde &lt;a href=&quot;https://identity.linuxfoundation.org/pid/813&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;, donde se te mostrará la siguiente pantalla:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/checkout.png&quot; alt=&quot;Checkout&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez que hayas hecho el pago para el examen, recibirás un correo electrónico y podrás iniciar sesión desde &lt;a href=&quot;https://training.cncf.io/portal&quot; target=&quot;_blank&quot;&gt;este&lt;/a&gt; enlace al portal donde debes seguir una serie de pasos antes de programar y hacer el examen, tales  como verificar los requisitos de tu máquina, leer información importante sobre el examen, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/cncf-checklist.png&quot; alt=&quot;Checkout&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cómo-preparar-el-examen&quot;&gt;Cómo preparar el examen&lt;/h2&gt;

&lt;h3 id=&quot;cursos&quot;&gt;Cursos&lt;/h3&gt;

&lt;p&gt;Como he dicho antes, de cara a prepararme el examen realicé los dos siguientes cursos de &lt;a href=&quot;https://www.udemy.com/&quot; target=&quot;_blank&quot;&gt;Udemy&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/learn-kubernetes/&quot; target=&quot;_blank&quot;&gt;Kubernetes for the Absolute Beginners - Hands-on&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/certified-kubernetes-application-developer/&quot; target=&quot;_blank&quot;&gt;Kubernetes Certified Application Developer (CKAD) with Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El primero, aunque ya tenía nociones básicas de Kubernetes, lo realicé para comprobar que mi base en Kubernetes era la adecuada. No aprendí practicamente nada nuevo en ese curso, por lo que si eres una persona que ya ha trabajado con Kubernetes yo pasaría directamente al segundo. Además, en el segundo curso, hacen repaso de los conceptos más importantes que se dan en el primero.&lt;/p&gt;

&lt;p&gt;El segundo curso me aportó mucho más, ya que está centrado en el examen en sí, y los ejercicios prácticos que tiene son muy buenos. El entorno de pruebas es muy potente (parecido al que te vas a encontrar en el examen), me ayudó mucho a mejorar la velocidad con la que solventaba los problemas.&lt;/p&gt;

&lt;h3 id=&quot;ejercicios-para-practicar&quot;&gt;Ejercicios para practicar&lt;/h3&gt;

&lt;p&gt;Básicamente estos fueron los recursos que use para preparar el examen a parte de los del propio curso, alguno lo hice entero entre 2 y 3 veces, al final tienes que coger la habilidad de poder leer la pregunta y sin dudar un segundo, saber cómo resolver el problema, ya que como repito el tiempo es todo en este examen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bmuschko/ckad-prep&quot; target=&quot;_blank&quot;&gt;https://github.com/bmuschko/ckad-prep&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dgkanatsios/CKAD-exercises&quot; target=&quot;_blank&quot;&gt;https://github.com/dgkanatsios/CKAD-exercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeburst.io/kubernetes-ckad-weekly-challenges-overview-and-tips-7282b36a2681&quot; target=&quot;_blank&quot;&gt;https://codeburst.io/kubernetes-ckad-weekly-challenges-overview-and-tips-7282b36a2681&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En total, entre realizar los dos cursos, estudiar y hacer los ejercicios prácticos habré dedicado unas &lt;strong&gt;90 horas&lt;/strong&gt; para aprobar el examen. Empecé a prepararlo un 30 de marzo e hice el examen el 15 de abril.&lt;/p&gt;

&lt;h2 id=&quot;consejos-y-trucos-útiles&quot;&gt;Consejos y trucos útiles&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sé rápido y preciso. Es un examen muy largo y con poco tiempo.&lt;/strong&gt; No esperes poder responder con tranquilidad todas las preguntas en 120 minutos, no da tiempo, ni siquiera a repasar.&lt;/p&gt;

    &lt;p&gt;Lo que hice yo en el examen fue que si veía que la pregunta tenía un valor &amp;lt; 3% y el enunciado era muy largo, las dejaba para el final y volví a ellas tras haber completado la mayoría de las preguntas. Si te quedas atascado, pasa de pregunta, tienes que lograr responder a las máximas preguntas posibles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cuando estés creando recursos en el clúster, &lt;strong&gt;no escribas archivos YAML desde el principio&lt;/strong&gt;. Usa los argumentos &lt;code class=&quot;highlighter-rouge&quot;&gt;-o yaml --dry-run&lt;/code&gt; siempre que puedas. Si todavía no sabes lo que es, ya estás tardando en aprenderlo!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Si no recuerdas alguna sintaxis al escribir archivos YAML, utiliza &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl explain&lt;/code&gt; en lugar de la documentación. Es más rápido y tiene buena documentación. Te recomiendo que lo practiques para que te vaya saliendo solo.&lt;/p&gt;

    &lt;p&gt;Por ejemplo, si no recuerdas las opciones de &lt;code class=&quot;highlighter-rouge&quot;&gt;livenessProbe&lt;/code&gt; para el contenedor, simplemente escribe &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl explain pod.spec.containers.livenessProbe&lt;/code&gt; y te dará todas las opciones con una buena documentación.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Usa siempre alias, tanto en tu entrenamiento como en el examen, te ahorran tiempo, estos fueron los que usé yo en el examen:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; alias k=kubectl
 alias ks='kubectl config set-context --current --namespace '
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elimina los objetos de Kubernetes rápidamente&lt;/strong&gt;. Eliminar los objetos en Kubernetes a veces tarda hasta 30 segundos debido a que tiene un periodo de gracia, en el examen no te interesa que lo haga así, lo mejor es que siempre fuerces la eliminación del recurso.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ kubectl delete pod nginx --grace-period=0 --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asegúrate que estás en el contexto y namespace adeacuados&lt;/strong&gt;. Vas a tener que estar cambiando de contexto y de namespace constantemente, yo en el examen perdí la cuenta de cuantas veces lo hice, pero es muy importante asegurarse que siempre estás en el clúster y namespace correctos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;¡Usa los marcadores del navegador!&lt;/strong&gt; Solo tienes permitido tener una pestaña extra a la del examen con la documentación de Kubernetes, lo que sí permiten son los marcadores. Te dejo &lt;a href=&quot;/assets/extra/2020-04-22-examen-ckad/CKAD-bookmarks.html&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; los marcadores que creé y utilicé yo en el examen, son enlaces directos a ejemplos que te ayudará a resolver los problemas más rápido.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/marcadores.png&quot; alt=&quot;Marcadores&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;¡Recuerda hacer clic en el botón “Finalizar el examen”!&lt;/strong&gt; Estuve durante cinco minutos sin tocar el teclado preguntándome por qué esto no ha terminado todavía hasta que el supervisor del examen me lo recordó. El botón está oculto en el menú de configuración del examen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Antes de comenzar el examen, debes &lt;strong&gt;quitar todo lo que tengas encima de la mesa: lámpara de escritorio, bebidas, alimentos, etc.&lt;/strong&gt;, posteriormente debes mostrar tu DNI o pasaporte, tu habitación y escritorio. Utilicé una portátil con un monitor externo, así que asegúrate de que tus cables sean lo suficientemente largos o desconéctalos por completo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No te tapes nunca la boca con la mano o murmures porque el examinador te lo recriminará y al menos a mí me desconcentró.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Usa la misma versión de &lt;strong&gt;Kubectl&lt;/strong&gt; y de &lt;strong&gt;Kubernetes&lt;/strong&gt; que el examen. En mi caso fue la versión 1.17. Al usar &lt;code class=&quot;highlighter-rouge&quot;&gt;Minikube for Mac OS&lt;/code&gt; en local, cambiar la versión de Kuberenetes es muy sencillo:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minikube start --kubernetes-version v1.17.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;También se permite el &lt;strong&gt;uso de múltiples monitores&lt;/strong&gt;, yo tenía la documentación de Kubernetes en un monitor y examen en el otro monitor. Me fue de gran utilidad tener de un vistazo ambas pantallas. Eso sí, se te pedirá en el examen que compartas ambas pantallas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Practica&lt;/strong&gt;. No por ser el último consejo es el menos importante. Practica todo lo que puedas. En el examen lo agradecerás.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;resultados&quot;&gt;Resultados&lt;/h2&gt;

&lt;p&gt;Lamentablemente, los resultados no se obtienen de inmediato, tardan hasta 36 horas en darte el resultado. ¡No sabes que larga se me hizo la espera! Pero finalmente llegó, aquí estaba el tan ansiado certificado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-22-examen-ckad/certificate.png&quot; alt=&quot;Certificado&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;No te voy a engañar, no es un examen fácil. Al principio lo verás complicado, pero a medida que vas practicando vas viendo la luz. Tienes que practicar mucho, coger soltura con los comandos &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;, editando ficheros con &lt;code class=&quot;highlighter-rouge&quot;&gt;Vim&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;Nano&lt;/code&gt;, saber moverte bien por la documentación de K8s, etc.&lt;/p&gt;

&lt;p&gt;Me ha parecido una experiencia muy buena para completar mis conocimientos de Kubernetes y estar al día de lo que está ofreciendo la plataforma.&lt;/p&gt;

&lt;p&gt;¡Buena suerte con tu examen CKAD!&lt;/p&gt;</content><author><name>fernando</name></author><category term="certificaciones," /><category term="examenes," /><category term="Kubernetes," /><category term="CNCF," /><category term="CKAD," /><category term="CKA" /><summary type="html">En este post voy a explicar un poco mi experiencia de cómo preparé y aprobé el Certified Kubernetes Application Developer (CKAD).</summary></entry><entry xml:lang="es"><title type="html">Buenas prácticas para escribir un Dockerfile</title><link href="https://blog.arima.eu/es/2020/04/21/buenas-practicas-para-escribir-un-dockerfile.html" rel="alternate" type="text/html" title="Buenas prácticas para escribir un Dockerfile" /><published>2020-04-21T09:00:00+00:00</published><updated>2020-04-21T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/21/buenas-practicas-para-escribir-un-dockerfile</id><content type="html" xml:base="https://blog.arima.eu/2020/04/21/buenas-practicas-para-escribir-un-dockerfile.html">&lt;p&gt;A la hora de escribir un Dockerfile, las posibilidades son infinitas. Se pueden crear imágenes con el mismo propósito, que funcionen similar, pero que estén estructuradas de una manera muy diferente. Empezando por elegir una imagen de partida (FROM), pasando por el orden de los comandos que ejecutamos al construir la imagen, o creando imágenes intermedias (&lt;em&gt;multistage builds&lt;/em&gt;), escribir un Dockerfile es un mundo.&lt;/p&gt;

&lt;p&gt;En este documento se recogen algunas de las pautas más importantes que hay que seguir si queremos optimizar al máximo el tiempo que tardamos en crear la imagen, la seguridad de la misma y el tamaño que ocupa.&lt;/p&gt;

&lt;h3 id=&quot;1-el-orden-de-los-comandos-importa&quot;&gt;1. El orden de los comandos importa&lt;/h3&gt;

&lt;p&gt;Por la manera en la que funciona el caché a la hora de construir una imagen, Docker es capaz de detectar si el comando que queremos ejecutar se ha ejecutado antes o no (en una &lt;em&gt;build&lt;/em&gt; anterior) y reutilizar el resultado desde la caché para hacerlo más rápido. El problema es que, si uno de los comandos ha cambiado, los comandos que le suceden no pueden ser sacados de caché porque puede que alguno se haya visto afectado y el resultado sea diferente.&lt;/p&gt;

&lt;p&gt;Es por esto que se recomienda ordenar los comandos según la frecuencia que tienen de ser cambiados. Si estuviésemos creando una imagen que contiene una aplicación, por ejemplo, las modificaciones más comunes serían las del código, las de los recursos serían las siguientes, y por último irían las dependencias. Por eso, deberíamos ordenarlas en order ascendente para asegurarnos de que optimizamos el uso de caché.&lt;/p&gt;

&lt;h3 id=&quot;2-junta-los-comandos-en-capas&quot;&gt;2. Junta los comandos en capas&lt;/h3&gt;

&lt;p&gt;En un Dockerfile, cada comando representa una capa de la imagen final. Es importante juntar las capas que compartan la misma lógica (instalación de dependencias, por ejemplo) para mejorar el uso de caché y para hacer el Dockerfile más mantenible.&lt;/p&gt;

&lt;p&gt;Sin embargo, hay que tener en cuenta que, si realizamos demasiadas acciones en el mismo comando, si en algún momento queremos cambiar algo del comando la caché ya no servirá y habrá que volver a ejecutarlo entero. Por esto, es importante estudiar cada escenario y evaluar cuál es la mejor forma de hacerlo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MAL&lt;/strong&gt; ❌&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN apt update &amp;amp;&amp;amp; apt install openjdk-8-jdk -y
RUN apt update &amp;amp;&amp;amp; apt install vim -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;BIEN&lt;/strong&gt; ✅&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN apt update &amp;amp;&amp;amp; apt install openjdk-8-jdk vim -y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-elimina-la-caché-que-no-necesites&quot;&gt;3. Elimina la caché que no necesites&lt;/h3&gt;

&lt;p&gt;La caché es buena sí, ¿pero cuál? Hay que entender que a la hora de construir una imagen existen dos tipos de caché: 1. la que genera docker con las capas de nuestra imagen y 2. la que generan nuestros comandos dentro de la propia imagen. La primera es buena para mejorar el tiempo de construcción, pero la segunda probablemente no.&lt;/p&gt;

&lt;p&gt;El segundo tipo de caché se suele generar al instalar dependencias o durante el proceso de compilación de una aplicación, y es muy poco probable que vayas a utilizarlo y lo más seguro es que solo esté ahí ocupando espacio.&lt;/p&gt;

&lt;p&gt;Fíjate en la última línea del siguiente Dockerfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM maven:3.6.3-jdk-11
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;target/*.jar&quot;]
COPY pom.xml .
COPY src ./src
RUN mvn -e -B clean package &amp;amp;&amp;amp; rm -rf /root/.m2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tiene que quedar claro que, para borrar un fichero de la imagen, es necesario que el fichero se cree y se borre en el mismo comando. Si se hace en diferentes comandos, el fichero aparentemente habrá desaparecido, pero seguirá estando en la &lt;em&gt;layer&lt;/em&gt; en la que lo hemos creado y seguirá consumiendo espacio.&lt;/p&gt;

&lt;p&gt;Este fichero sigue existiendo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM busybox
RUN touch a
RUN rm a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este no:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM busybox
RUN touch a &amp;amp;&amp;amp; rm a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el objetivo es reducir el espacio que ocupa la imagen final y no podemos eliminar este tipo de ficheros en el mismo comando en el que lo creamos, podemos utilizar la opción &lt;code class=&quot;highlighter-rouge&quot;&gt;--squash&lt;/code&gt; a la hora de crear la imagen para juntar todas las capas en una sola, donde sí que eliminaríamos el fichero. Pero, !cuidado! La opción &lt;code class=&quot;highlighter-rouge&quot;&gt;--squash&lt;/code&gt; tiene más implicaciones, como borrar la historia de la imagen, úsala solo cuando sea extrictamente necesario.&lt;/p&gt;

&lt;h3 id=&quot;4-elige-bien-la-imagen-base&quot;&gt;4. Elige bien la imagen base&lt;/h3&gt;

&lt;p&gt;A la hora de elegir una imagen desde la que partir, lo primero que se nos puede ocurrir es escoger una imagen que no tenga más que lo básico (un sistema operativo) e instalar encima todo lo que necesitemos. Esto puede funcionar, pero lo que es mucho mejor a nivel de seguridad, mantenibilidad y espacio, es utilizar una imagen de algún proveedor de confianza que ya nos lo dé hecho.&lt;/p&gt;

&lt;p&gt;Por ejemplo, supongamos que necesitamos una imagen con Python 3.6 instalado. Podríamos utilizar &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; como base e instalar Python con el gestor de paquetes, o utilizar la imagen &lt;code class=&quot;highlighter-rouge&quot;&gt;python:3.6-alpine&lt;/code&gt;, que ya trae Python instalado y está mantenido por los desarrolladores de Python (además de otras cosas).&lt;/p&gt;

&lt;p&gt;El exponente que mejor cumple con este punto puede que sea &lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot; target=&quot;_blank&quot;&gt;Google Distroless Docker Images&lt;/a&gt;, que es una imagen base que solo contiene las dependencias necesarias para ejecutar tu aplicación y elimina todo el resto de elementos (como gestores de paquetes, shells, y otros comandos) y por lo tanto, reduce la superficie de ataque de nuestros contenedores. Estas imagenes son específicas para cada lenguaje y puede que el que necesites no esté soportado, pero si lo está, no encontrarás una imagen más segura desde donde partir.&lt;/p&gt;

&lt;h3 id=&quot;5-especifica-la-versión-de-la-imagen-base&quot;&gt;5. Especifica la versión de la imagen base&lt;/h3&gt;

&lt;p&gt;Si te has fijado, para escoger la imagen de Python hemos utilizado un &lt;em&gt;tag&lt;/em&gt;. Esto también es importante. Para que una imagen sea reproducible, deberemos elegir un &lt;em&gt;tag&lt;/em&gt; para esa imagen que sepamos que no va a cambiar en el tiempo (&lt;em&gt;tag&lt;/em&gt;s como &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;slim&lt;/code&gt; sí lo hacen, ¡ojo!).&lt;/p&gt;

&lt;p&gt;En realidad, no es posible garantizar que un &lt;em&gt;tag&lt;/em&gt; que escojamos se vaya a mantener siempre igual, independientemente de si es uno genérico como &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt; o uno específico como &lt;code class=&quot;highlighter-rouge&quot;&gt;3.6.8-alpine-slim&lt;/code&gt;. La mejor práctica de todas sería escoger la versión concreta de una imagen que queramos utilizar, y utilizar su identificador. Este identificador se puede conseguir con el comando:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images --format &quot;{{.Repository}}:{{.Tag}} {{.ID}}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por ejemplo, si quisiese el identificador de la imagen &lt;code class=&quot;highlighter-rouge&quot;&gt;busybox&lt;/code&gt; que acabo de añadir a mi registro local, ejecuto:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images --format &quot;{{.Repository}}:{{.Tag}} {{.ID}}&quot; |grep busybox
busybox:latest 83aa35aa1c79
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahora, podría utilizar el identificador como &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; de mi Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM 83aa35aa1c79
CMD [&quot;echo&quot;, &quot;Hola!&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;6-el-potencial-de-las-multistage-builds&quot;&gt;6. El potencial de las &lt;em&gt;multistage build&lt;/em&gt;s&lt;/h3&gt;

&lt;p&gt;Cuando creamos una imagen, podemos generar imágenes intermedias que utilizamos para un propósito en concreto (como generar un artefacto) y que se acaban eliminando y no forman parte de la imagen final (aunque el artefacto que hemos generado sí). Esto se llama &lt;em&gt;multistage build&lt;/em&gt;, y es muy útil en casos donde haya que compilar una aplicación, por ejemplo.&lt;/p&gt;

&lt;p&gt;Utilizar &lt;em&gt;multistage builds&lt;/em&gt; hará que nuestra imagen final sea menos pesada, y probablemente más segura. Fíjate cómo en el siguiente Dockerfile compilamos la aplicación en una imagen que no se acaba usando y generamos un JAR que ejecutamos en la imagen final, donde no tenemos ni JDK ni Maven.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM maven:3.6.3-jdk-11 as builder
WORKDIR /app
COPY pom.xml .
RUN mvn -e -B dependency:go-offline
COPY src ./src
RUN mvn -e -B clean package

FROM adoptopenjdk:8u242-b08-jre-hotspot
COPY --from=builder /app/target/*.jar /app.jar
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;7-usuario-sin-privilegios&quot;&gt;7. Usuario sin privilegios&lt;/h3&gt;

&lt;p&gt;Se considera una buena práctica en un Dockerfile modificar el usuario final de la imagen a uno que disponga los privilegios justos para cumplir con el propósito de la imagen y nada más. Esto hará que nuestra imagen sea más segura y evite que un usuario administrador en el contenedor gane acceso al &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para esto, lo mejor es agregar un nuevo usuario (y un grupo) y darle los permisos que necesite. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu
RUN groupadd -r usergroup &amp;amp;&amp;amp; useradd -r -g user usergroup
ENTRYPOINT [&quot;sh&quot;, &quot;myScript.sh&quot;]
COPY ./myScript.sh /myScript.sh
RUN chown user /myScript.sh
USER user
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;8-mantén-tus-secretos-ocultos&quot;&gt;8. Mantén tus secretos ocultos&lt;/h3&gt;

&lt;p&gt;Es muy habitual que en una imagen necesitemos utilizar credenciales, &lt;em&gt;token&lt;/em&gt;s de acceso o ficheros con información que no queremos compartir. Si pasamos estos elementos a la imagen mediante comandos como &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, estarán visibles en la imagen y cualquiera que tenga acceso a ella podrá verlos.&lt;/p&gt;

&lt;p&gt;Existe una forma de añadir esta información a nuestros contenedores, llamada &lt;code class=&quot;highlighter-rouge&quot;&gt;docker secret&lt;/code&gt;. La forma de implementarla es un poco compleja como para explicarla en este documento, ya que depende de la manera en la que vayas a desplegar la imagen (&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;, …). &lt;a href=&quot;https://dzone.com/articles/introduction-to-docker-secrets&quot; target=&quot;_blank&quot;&gt;Introduction to Docker Secrets&lt;/a&gt; o &lt;a href=&quot;https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/&quot; target=&quot;_blank&quot;&gt;Distribute Credentials Securely Using Secrets&lt;/a&gt; pueden ser un buen punto de partida.&lt;/p&gt;

&lt;h3 id=&quot;9-copia-solo-lo-que-necesites&quot;&gt;9. Copia solo lo que necesites&lt;/h3&gt;

&lt;p&gt;La imagen que generemos debería contener única y exclusivamente los ficheros que necesite. Es común ver comandos del estilo de &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY . /app&lt;/code&gt;, que copiará todo el contexto al directorio &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt;. Y esto puede no estar mal, depende del contexto y de lo que pretendamos hacer, pero en muchos casos podemos estar copiando archivos que no vamos a utilizar o que tienen información confidencial.&lt;/p&gt;

&lt;p&gt;Hay dos formas de evitar esto:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Copiar únicamente los ficheros que vayamos a utilizar, aunque si son muchos y no los tenemos estructurados en directorios, puede crear demasiadas &lt;em&gt;layer&lt;/em&gt;s.&lt;/li&gt;
  &lt;li&gt;Usar &lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt;. En este fichero con la misma sintaxis que &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; podremos decidir qué ficheros o directorios queremos evitar añadir al contexto. &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#dockerignore-file&quot; target=&quot;_blank&quot;&gt;Más información&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;10-copia-no-añadas&quot;&gt;10. Copia, no añadas&lt;/h3&gt;

&lt;p&gt;Existen dos comandos en Dockerfile muy similares: &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;. El primero sirve para copiar una serie de ficheros o directorios desde el &lt;em&gt;host&lt;/em&gt; a la imagen. El segundo hace lo mismo, pero además es capaz de descargar elementos desde URLs o repositorios y descomprime ficheros comprimidos. Para mas información sobre &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, ver &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#add&quot; target=&quot;_blank&quot;&gt;la documentación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Puede que viendo que hacen lo mismo y &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; sea más potente, solo quieras usar este, pero deberías evitarlo. Utiliza &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; para la mayoría de situaciones, que será copiar desde el &lt;em&gt;host&lt;/em&gt;, y únicamente utiliza &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; cuando necesites algo que no puedas conseguir con &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;. Utilizar &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; sin tener en cuenta la diferencia puede conllevar riesgos de seguridad como &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_bomb&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;zip bomb&lt;/em&gt;s&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Aunque escribir un Dockerfile pueda parecer algo sencillo, es importante seguir ciertas recomendaciones que harán que nuestro proceso de &lt;em&gt;building&lt;/em&gt; se ejecute más rápido, y que la imagen resultante sea más pequeña y segura.&lt;/p&gt;

&lt;p&gt;En este artículo hemos repasado algunos de los puntos más importantes, que a la vez son muy sencillos de seguir en la mayoría de los casos. Puedes encontrar más consejos de este tipo en la &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&quot; target=&quot;_blank&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;</content><author><name>urko</name></author><category term="docker," /><category term="dockerfile" /><summary type="html">A la hora de escribir un Dockerfile, las posibilidades son infinitas. Se pueden crear imágenes con el mismo propósito, que funcionen similar, pero que estén estructuradas de una manera muy diferente. Empezando por elegir una imagen de partida (FROM), pasando por el orden de los comandos que ejecutamos al construir la imagen, o creando imágenes intermedias (multistage builds), escribir un Dockerfile es un mundo.</summary></entry><entry xml:lang="es"><title type="html">AWS: Cuentas y Organizaciones</title><link href="https://blog.arima.eu/es/2020/04/03/aws-cuentas-y-organizaciones.html" rel="alternate" type="text/html" title="AWS: Cuentas y Organizaciones" /><published>2020-04-03T09:00:00+00:00</published><updated>2020-04-03T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/04/03/aws-cuentas-y-organizaciones</id><content type="html" xml:base="https://blog.arima.eu/2020/04/03/aws-cuentas-y-organizaciones.html">&lt;p&gt;En esta entrada quiero hablar sobre las cuentas de &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt; y sobre la arquitectura que hay por detrás. La gestión de cuentas de AWS es un poco compleja y puede ralentizar el tiempo necesario para empezar a usar sus servicios (cada vez que pruebo algo nuevo tengo la intención de ir directo al grano, como en este caso crear un cluster de &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;EKS&lt;/a&gt;, y siempre me acabo dando de frente con la cruda realidad). Espero que al final de esta entrada seáis capaces de entender un poco mejor todos los conceptos que voy a explicaros y que agilice vuestro proceso de introducción en AWS.&lt;/p&gt;

&lt;p&gt;Bien, lo primero de lo que hay que hablar es sobre las cuentas. ¿Qué es una cuenta de AWS? Pues no es más que eso, una cuenta, con su identificador único y su email, pero en este caso engloba ciertos conceptos propios de AWS. Cuando creas una cuenta, se crea por defecto un &lt;strong&gt;usuario&lt;/strong&gt; root de la cuenta. Estos son los elementos que puede contener una cuenta:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Usuario&lt;/strong&gt;: Se refiere a cada persona individual que vaya a utilizar los servicios de la cuenta (recomiendan tener uno por cada persona, y no hacer un usuario &lt;em&gt;developer&lt;/em&gt; o &lt;em&gt;admin&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Grupo&lt;/strong&gt;: Un grupo es un conjunto de usuarios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rol&lt;/strong&gt;: Agrupación de políticas que se pueden asignar a usuarios, grupos o servicios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Política&lt;/strong&gt;: Las políticas son agrupaciones de permisos que otorgan o deniegan acceso a diferentes acciones sobre los servicios (como ver las instancias de EC2 de la cuenta, crear nuevas, o borrarlas).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Servicio&lt;/strong&gt;: Un servicio es una funcionalidad de AWS a la que tenemos acceso, como la gestión de clústers de Kubernetes (EKS), repositorios de ficheros (&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3 buckets&lt;/a&gt;), … Lo que quiero que quede claro, es que estos servicios son propios de la cuenta en la que estamos, es decir, &lt;strong&gt;no se pueden compartir entre cuentas&lt;/strong&gt; (esto no es del todo cierto, se pueden otorgar permisos a otra cuenta para acceder a nuestros servicios, pero esto es rizar el rizo, y, por lo que entiendo, una mala utilización del sistema en la mayoría de los casos).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto que he explicado se puede gestionar desde el servicio &lt;a href=&quot;https://aws.amazon.com/iam/&quot;&gt;IAM&lt;/a&gt; (&lt;em&gt;Identity and Access Management&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;organizaciones&quot;&gt;Organizaciones&lt;/h2&gt;

&lt;p&gt;Todo esto probablemente sea todo lo que tenéis que entender para trabajar con AWS a nivel individual, pero cuando trabajas en una empresa las cosas se complican un poco. Para dar mayor poder de gestión, AWS tiene un servicio llamado &lt;em&gt;Organizations&lt;/em&gt;. Una organización se puede entender como un conjunto de cuentas.&lt;/p&gt;

&lt;p&gt;Cuando una cuenta crea una organización, esa cuenta pasa a ser la cuenta master de la organización y tiene acceso total. Aquí es donde se empieza a complicar un poco el asunto. Desde esta organización se pueden crear nuevas cuentas de la organización, que son prácticamente equivalentes a una cuenta creada de manera “normal”, como la cuenta master. Hay ciertas restricciones para estas cuentas, como que no pueden crear nuevas organizaciones ni salir de la organización actual (aunque he escuchado que en un futuro próximo puede que sí), pero si se les otorgan los permisos necesarios, pueden llegar a tener tanto poder como la cuenta master. Por último, se puede invitar a nuestra organización a cuentas que no lo sean ya, y estas cuentas sí que pueden ir y venir sin restricción.&lt;/p&gt;

&lt;p&gt;Otro concepto que introducen las organizaciones son los OU (&lt;em&gt;Organizational Unit&lt;/em&gt;). Estos elementos son agrupaciones lógicas de cuentas y de OUs (un OU puede agrupar a cuentas y OUs, hasta 5 niveles de profundidad). Las diferentes cuentas de nuestra organización se pueden mover entre OUs sin problemas, pero hay que recordar que cada cuenta sigue teniendo sus usuarios, grupos, servicios, etc, y que estos &lt;strong&gt;no se pueden sacar de la cuenta&lt;/strong&gt;. ¿Que por qué digo esto? Pues porque quiero introducir el último concepto importante sobre las organizaciones. Los &lt;a href=&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html&quot;&gt;&lt;em&gt;Service Control Policies&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;Service Control Policies&lt;/em&gt; o SCPs son políticas que se utilizan para gestionar nuestra organización. Son diferentes de las políticas de una cuenta pero asumamos de momento que son iguales. Estas políticas se pueden aplicar a la organización, a un OU, o a una cuenta (o a conjuntos de estos elementos), y cuando se aplica a uno de estos elementos &lt;strong&gt;también se aplican a todos los elementos que contengan&lt;/strong&gt;. Es decir, si aplicamos un SCP a un OU &lt;em&gt;ou1&lt;/em&gt;, y &lt;em&gt;ou1&lt;/em&gt; contiene un cuenta &lt;em&gt;c1&lt;/em&gt;, el SCP se aplicará tanto a &lt;em&gt;ou1&lt;/em&gt; como a &lt;em&gt;c1&lt;/em&gt;. Si después movemos esta cuenta &lt;em&gt;c1&lt;/em&gt; a otro OU &lt;em&gt;ou2&lt;/em&gt;, &lt;em&gt;ou1&lt;/em&gt; seguirá con el SCP aplicado, pero &lt;em&gt;c1&lt;/em&gt; ya no. Es decir, si movemos cuentas a nivel jerárquico, tenemos que tener cuidado con los SCPs que haya aplicados tanto en el origen como en el destino.&lt;/p&gt;

&lt;p&gt;Hay varias estrategias para estructurar nuestra organización, aquí os dejo algunas que he visto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por entorno de trabajo (&lt;em&gt;development, testing, production&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Por cliente o departamento (Y dentro de cada una de ellos podríamos volver a organizarlo por entorno de trabajo, por ejemplo).&lt;/li&gt;
  &lt;li&gt;Por cada entidad a la que tengamos que cobrar (se puede ver el uso de recursos de cada OU).&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-04-03-aws-cuentas-y-organizaciones/OrganizationHierarchy.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://es.slideshare.net/AmazonWebServices/wrangling-multiple-aws-accounts-with-aws-organizations-79796025&quot; target=&quot;_blank&quot; style=&quot;text-align: center; display: block;&quot;&gt;Fuente de la imagen&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scps-vs-políticas-de-iam&quot;&gt;SCPs vs Políticas de IAM&lt;/h2&gt;

&lt;p&gt;De momento, hemos hablado los SCPs de las organizaciones y de las políticas del IAM como si fuesen lo mismo, pero no lo son. Siguen siendo conjuntos de permisos, de hecho, muchos de los permisos que se utilizan son los mismos en ambos casos, pero &lt;strong&gt;la diferencia está en el propósito&lt;/strong&gt; que tienen.&lt;/p&gt;

&lt;p&gt;Mientras que una política de IAM sirve para otorgar permisos (a un usuario, grupo, servicio, …) para acceder y utilizar un servicio, un SCP pretende otorgarle a una cuenta la habilidad de dar esos permisos. Es decir, para que dentro de una cuenta se use cierto permiso en concreto, un SCP deberá haber habilitado a esa cuenta ese permiso (o no habérselo denegado, según se utilicen estrategias de &lt;em&gt;whitelist&lt;/em&gt; o &lt;em&gt;blacklist&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Esto implica que los permisos resultantes que se le aplican a un usuario, por ejemplo, son &lt;strong&gt;la intersección entre políticas y SCPs&lt;/strong&gt;. Un ejemplo práctico de esto sería el siguiente:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;La cuenta &lt;em&gt;c1&lt;/em&gt; tiene asignado un SCP que le permite otorgar permisos para listar cubos de S3 y para crear nuevos cubos.&lt;/li&gt;
  &lt;li&gt;Se le aplica a un usuario &lt;em&gt;u1&lt;/em&gt; de la cuenta &lt;em&gt;a1&lt;/em&gt; una política de IAM que le permite listar los cubos de S3 y borrarlos.&lt;/li&gt;
  &lt;li&gt;Como la cuenta &lt;em&gt;a1&lt;/em&gt; no tiene permisos para otorgar el permiso de borrar cubos de S3, a &lt;em&gt;u1&lt;/em&gt; solo se le aplica el permiso de listar cubos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-04-03-aws-cuentas-y-organizaciones/SCPvsIAM.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Como habréis podido ver, el servicio para gestionar una organización en AWS es una herramienta potente para poder agrupar cuentas y administrarlas desde una sola, pero tiene cierta complejidad.&lt;/p&gt;

&lt;p&gt;Después de todo lo que he dicho, la recomendación que yo os hago es: Piensa antes de actuar:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;¿Que eres un único usuario y quieres utilizar ciertos servicios de manera individual?, pues olvidate de &lt;em&gt;Organizations&lt;/em&gt; y empieza a trabajar directamente.&lt;/li&gt;
  &lt;li&gt;¿Que tienes que gestionar una pequeña empresa con diferentes proyectos, departamentos o clientes?, párate a plantearte tu escenario y gestiona las diversas cuentas que necesites con la jerarquía adecuada.&lt;/li&gt;
  &lt;li&gt;¿Que eres una gran organización y tienes que administrar una compleja estructura de cuentas con miles de usuarios?, probablemente deberías contactar con Amazon y pedir la ayuda de uno de sus arquitectos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El objetivo de &lt;em&gt;Organizations&lt;/em&gt; es ayudarte y debería acabar evitándote más problemas de los que te ha causado en un primer momento.&lt;/p&gt;</content><author><name>urko</name></author><category term="aws," /><category term="organizacion," /><category term="organizaciones," /><category term="iam," /><category term="scp," /><category term="cuenta," /><category term="cuentas" /><summary type="html">En esta entrada quiero hablar sobre las cuentas de Amazon Web Services y sobre la arquitectura que hay por detrás. La gestión de cuentas de AWS es un poco compleja y puede ralentizar el tiempo necesario para empezar a usar sus servicios (cada vez que pruebo algo nuevo tengo la intención de ir directo al grano, como en este caso crear un cluster de EKS, y siempre me acabo dando de frente con la cruda realidad). Espero que al final de esta entrada seáis capaces de entender un poco mejor todos los conceptos que voy a explicaros y que agilice vuestro proceso de introducción en AWS.</summary></entry><entry xml:lang="es"><title type="html">¿Es viable ejecutar Java en contenedores Docker?</title><link href="https://blog.arima.eu/es/2020/02/11/java-en-contenedores-docker.html" rel="alternate" type="text/html" title="¿Es viable ejecutar Java en contenedores Docker?" /><published>2020-02-11T09:00:00+00:00</published><updated>2020-02-11T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/02/11/java-en-contenedores-docker</id><content type="html" xml:base="https://blog.arima.eu/2020/02/11/java-en-contenedores-docker.html">&lt;p&gt;En nuestro alrededor existen muchas empresas que llevan años trabajando sobre Java utilizando un stack tecnológico tradicional (Spring, Tomcat, Weblogic, JPA, etc). Esta infraestructura ha sido bastante estable en el tiempo y ha sufrido pocos cambios.&lt;/p&gt;

&lt;p&gt;Sin embargo, reciemente han surgido nuevas infraestructuras cloud basadas en Kubernetes (&lt;a href=&quot;https://azure.microsoft.com/en-us/free/kubernetes-service/&quot; target=&quot;_blank&quot;&gt;Azure&lt;/a&gt;, &lt;a href=&quot;https://www.redhat.com/es/technologies/cloud-computing/openshift&quot; target=&quot;_blank&quot;&gt;Openshift&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/es/eks/&quot; target=&quot;_blank&quot;&gt;Amazon EKS&lt;/a&gt;, etc) y estas empresas ahora se encuentran en proceso de evaluación o transición a Kubernetes. En este proceso, surgen dudas y se cuestiona por ejemplo, si el stack tecnológico empleado hasta ahora sigue siendo valido en estos nuevos entornos  cloud.&lt;/p&gt;

&lt;p&gt;En estos casos, como suele ser habitual, solemos echar mano de Google para consultar cómo es la transición de los proyectos Java a Kubernetes. Sorprendentemente nos encontramos artículos y presentaciones que nos pueden asustar a dar el salto a Kubernetes. Por ejemplo, &lt;a href=&quot;https://jaxenter.com/nobody-puts-java-container-139373.html&quot; target=&quot;_blank&quot;&gt;Nobody puts Java in a container&lt;/a&gt; o &lt;a href=&quot;https://vimeo.com/181900266&quot; target=&quot;_blank&quot;&gt;Nobody puts Java in the container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-11-java-en-contenedores-docker/no-body-puts-java-in-a-container.png&quot; alt=&quot;Nobody puts java in containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visto esto, a todos nos viene la misma pregunta a la cabeza: ¿es viable ejecutar Java en contenedores Docker?&lt;/p&gt;

&lt;h2 id=&quot;java-ergonomics&quot;&gt;Java Ergonomics&lt;/h2&gt;

&lt;p&gt;La plataforma Java se creó en el año 1995 y un poco más tarde vinieron los servidores web y servidores de aplicación para desarrollar aplicaciones Web sobre Java. En aquel entonces no existía el concepto de &lt;a href=&quot;https://www.docker.com/resources/what-container&quot; target=&quot;_blank&quot;&gt;contenedor&lt;/a&gt; ni tampoco el movimiento &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;cloud native&lt;/a&gt;. Lo habitual era que el servidor de aplicaciones Java se ejecutara en una máquina dedicada y en dicho servidor se desplegaban múltiples aplicaciones Web (wars o ears).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/images/2020-02-11-java-en-contenedores-docker/servidor-java-ee.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Java fue diseñado para ejecutarse sobre este tipo de infraestructuras, una única JVM en un servidor. En base a esto, la JVM ejecuta el proceso &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html&quot; target=&quot;_blank&quot;&gt;Java Ergonomics&lt;/a&gt; que calcula los parámetros de configuración de JVM en función de los recursos HW disponibles en la máquina. Por ejemplo, Java Ergonomics establece el tamaño de heap máximo de JVM como la cuarta parte de la RAM del servidor. Es decir, en un servidor con 64GB de RAM el tamaño máximo del Heap es 16GB por defecto.&lt;/p&gt;

&lt;p&gt;Todo bien hasta ahora. Un servidor para cada JVM y Java Ergonomics configura la JVM en base a los recursos del servidor. Pero, ¿qué ocurre si ejecutamos Java Ergonomics en un contenedor Docker?&lt;/p&gt;

&lt;h2 id=&quot;primeras-experiencias-de-java-en-docker&quot;&gt;Primeras experiencias de Java en Docker&lt;/h2&gt;

&lt;p&gt;Cuando ejecutamos una aplicación Java en un contenedor, nos interesa que Java Ergonomics calcule los parámetros de JVM en función de los recursos del propio contenedor. Por ejemplo, si arrancamos un contenedor con 4GB de memoria, esperamos que Java Ergonomics establezca 1GB de heap máximo.&lt;/p&gt;

&lt;p&gt;Sin embargo, las primeras experiencias de Java en contenedores demostraron que eso no era así. Java Ergonomics continuaba configurando la JVM en base a los recursos del servidor en lugar de los recursos del contenedor. Es decir, si el servidor tiene 64GB de RAM, se establecía 16 GB de heap máximo, en lugar de 1GB que se esperaba. Esto hacía que al escalar una aplicación, por ejemplo a 5 contenedores, se agotara toda la memoria del servidor porque la suma del heap de todos los containers superaba la memoria del servidor (16GB * 5 &amp;gt; 64GB).&lt;/p&gt;

&lt;p&gt;La manera de solventar esto consistía en utilizar los flags de configuración de Java Ergonomics (-Xmx, -Xms, etc), pero algunos se dieron cuenta demasiado tarde, cuando la aplicación que tenían en producción estaba sufriendo caídas y problemas de memoria OOMKilled. Este tipo de problemas motivaron los artículos antes citados que advertían del riesgo que implicaba ejecutar Java en contenedores.&lt;/p&gt;

&lt;h2 id=&quot;java-container-aware&quot;&gt;Java Container Aware&lt;/h2&gt;

&lt;p&gt;Conocidos los problemas de Java Ergonomics con los contenedores Docker, &lt;a href=&quot;https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits&quot; target=&quot;_blank&quot;&gt;Oracle reaccionó&lt;/a&gt; e implementó un soporte de contenedores experimental en las versiones Java 8u131 y Java 9. Sin embargo, este soporte experimental tenía carencias que finalmente fueron resueltas en las versiones Java 8u191 y Java 10.&lt;/p&gt;

&lt;p&gt;A partir de estas versiones, Java Ergonomics calcula automáticamente la configuración de JVM en base a los recursos del contenedor. Si queréis probar las diferencias entre versiones diferentes de Java en contenedores, podéis jugar con este &lt;a href=&quot;https://github.com/wearearima/docker-java-cpu-memory-limit&quot; target=&quot;_blank&quot;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Asimismo, también se añadieron nuevas opciones de configuración en la JVM para ajustar mejor la configuración del heap en un contenedor: &lt;code class=&quot;highlighter-rouge&quot;&gt;InitialRAMPercentage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxRAMPercentage&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;MinRAMPercentage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con todos estos cambios, ya se considera que &lt;strong&gt;Java es Container Aware a partir de las versiones Java 8u191 y Java 10&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Cuando se creó Java en 1995 nadie se imaginaba que surgirían las tecnologías Docker, Kubernetes, etc. Entonces, ¿es viable ejecutar Java en contenedores?&lt;/p&gt;

&lt;p&gt;La respuesta es que sí. La comunidad Java está reaccionando y se está adaptando a los cambios que suponen estas nuevas tecnologías cloud y contenedores. Uno de los primeros obstáculos fue solventar la compatibilidad entre Java Ergonomics y los contendores. Ese escollo ya está resuelto con las versiones superiores de Java y no nos tendremos que volver a preocupar.&lt;/p&gt;

&lt;p&gt;De todos modos, hay otros aspectos de la plataforma Java como puede ser el peso de la máquina virtual que la comunidad está tratando de mejorar. En este sentido, también hay mucho movimiento y están surgiendo nuevas herramientas y frameworks que hay que vigilar (&lt;a href=&quot;https://www.graalvm.org/docs/reference-manual/native-image/&quot; target=&quot;_blank&quot;&gt;Graal Native Image&lt;/a&gt;, &lt;a href=&quot;https://micronaut.io/&quot; target=&quot;_blank&quot;&gt;Micronaut&lt;/a&gt;, &lt;a href=&quot;https://quarkus.io/&quot; target=&quot;_blank&quot;&gt;Quarkus&lt;/a&gt;, etc).&lt;/p&gt;</content><author><name>telle</name></author><category term="docker," /><category term="containers," /><category term="java," /><category term="contenedores" /><summary type="html">En nuestro alrededor existen muchas empresas que llevan años trabajando sobre Java utilizando un stack tecnológico tradicional (Spring, Tomcat, Weblogic, JPA, etc). Esta infraestructura ha sido bastante estable en el tiempo y ha sufrido pocos cambios.</summary></entry><entry xml:lang="es"><title type="html">Utilizando el estándar OAuth2 de forma segura</title><link href="https://blog.arima.eu/es/2020/01/27/oauth2.html" rel="alternate" type="text/html" title="Utilizando el estándar OAuth2 de forma segura" /><published>2020-01-27T09:00:00+00:00</published><updated>2020-01-27T09:00:00+00:00</updated><id>https://blog.arima.eu/2020/01/27/oauth2</id><content type="html" xml:base="https://blog.arima.eu/2020/01/27/oauth2.html">&lt;p&gt;El estándar OAuth2 es tan conocido como complejo. El hecho de que sea un estándar en evolución y el exceso de información disponible, hace que sea muy fácil encontrar artículos con información contradictoria o que se recomiende el uso de flujos que actualmente se consideran “legacy” por motivos de seguridad.&lt;/p&gt;

&lt;p&gt;En este artículo, haremos un repaso de los flujos que componen OAuth2 y recomendaremos los flujos a utilizar para cubrir distintos escenarios. Pero antes, empecemos desde el principio.&lt;/p&gt;

&lt;h2 id=&quot;qué-demonios-es-oauth-y-por-qué-debería-importarme&quot;&gt;¿Qué demonios es OAuth y por qué debería importarme?&lt;/h2&gt;
&lt;p&gt;Como estas cosas se entienden mejor con un ejemplo, vamos a ponernos en situación y pensar que queremos desarrollar una aplicación web que gestiona fotos. Como sabemos que muchos de nuestros usuarios potenciales utilizan Google Photos para almacenar y gestionar sus álbumes de fotos, vemos interesante que nuestra aplicación pueda conectarse con Google para obtener los álbumes del usuario que está utilizando nuestra aplicación. Investigamos un poco y vemos que Google &lt;a href=&quot;https://developers.google.com/photos/library/reference/rest/v1/albums/list&quot; target=&quot;_blank&quot;&gt;ofrece una API para obtener el listado de álbumes de un usuario&lt;/a&gt; así que todo parece encajar a la perfección.&lt;/p&gt;

&lt;p&gt;Evidentemente, el servicio de Google Photos no es público y requiere que el usuario final esté autenticado de alguna forma.&lt;/p&gt;

&lt;h3 id=&quot;cómo-podemos-conseguir-esto&quot;&gt;¿Cómo podemos conseguir esto?&lt;/h3&gt;
&lt;p&gt;Una opción podría ser que ese usuario introdujera sus credenciales de Google (usuario y password) en nuestra aplicación, de forma que nuestra aplicación pudiera autenticarse contra Google en nombre de ese usuario y de esta manera, obtener sus álbumes. Esto no tendría mucho sentido ya que estaríamos entregando a la aplicación la llave de nuestra cuenta de Google y además de los álbumes, podría acceder a todo tipo de información o realizar cualquier acción en nuestro nombre.&lt;/p&gt;

&lt;p&gt;Necesitamos por tanto, un sistema que permita otorgar acceso a cierta información por parte de aplicaciones de terceros pero indicando explícitamente qué acciones se van a poder realizar en nuestro nombre y sin tener que entregar para ello nuestras crendenciales. El estándar OAuth nace precisamente para dar respuesta a esta necesidad. El primer borrador de OAuth fué publicado en 2007 y fué desarrollado principalmente por gente de Twitter y Google. En abril de 2010 se publicó la &lt;a href=&quot;https://tools.ietf.org/html/rfc5849&quot; target=&quot;_blank&quot;&gt;versión 1.0 del protocolo OAuth.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Retomando el ejemplo anterior, si implementásemos la aplicación de gestión de fotos utilizando OAuth, veríamos que cuando nuestra aplicación necesitase acceder a la API que devuelve el listado de álbumes que el usario en curso tiene en Google Photos, en lugar de pedir que el usuario introduzca las credenciales de Google en nuestra aplicación, se redirigiría a una pantalla de login gestionada por Google.&lt;/p&gt;

&lt;p&gt;Una vez completada la autenticación, se le mostraría una pantalla en la que tendría que dar el cosentimiento explícito para que la aplicación pudiera consumir esa (y solo esa) información:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/oauth2-consent.png&quot; alt=&quot;Ejemplo de pantalla de consentimiento&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tras el consentimiento del usuario, Google se encarga de devolver el control a la aplicación que inició el proceso proporcionándole un token con una fecha de caducidad. La aplicación podrá utilizar este token en las llamadas a las APIs que correspondan para acceder a la información para la que ha sido autorizado.&lt;/p&gt;

&lt;p&gt;El problema de la primera versión de OAuth es que era complejo, estaba dirigido sobre todo a aplicaciones web y no era demasiado escalable. Para dar respuesta a estas limitaciones, en 2012 se publicó &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot; target=&quot;_blank&quot;&gt;la versión 2.0&lt;/a&gt; del protocolo OAuth junto con el estándar para el uso de &lt;a href=&quot;https://tools.ietf.org/html/rfc6750&quot; target=&quot;_blank&quot;&gt;“bearer tokens”&lt;/a&gt;. Se puede decir que OAuth2 es una reescritura del estándar ya que se aplicaron todas las lecciones aprendidas con la primera versión y esto a su vez les obligó a romper compatibilidad con la primera versión.&lt;/p&gt;

&lt;p&gt;En el estándar OAuth2 se hace referencia a los siguientes roles que son los que participan en los distintos flujos disponibles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Owner:&lt;/strong&gt; Es el dueño de la información a la que se intenta acceder. En el ejemplo anterior, sería el usuario que está utilizando la aplicación y que es el dueño de las fotos de Google Photos a las que se intenta acceder.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Client Application:&lt;/strong&gt; Es la aplicación que pretende acceder al recurso protegido. En el ejemplo anterior, sería la aplicación que hemos desarrollado nosotros.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization Server:&lt;/strong&gt; Es el servicio encargado de emitir tokens que permiten el acceso a un recurso protegido una vez que el dueño de dicho recurso haya otorgado su consentimiento. En el ejemplo anterior, el Authorization Server sería el servicio central de Google que se encarga de autorizar usuarios &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;https://accounts.google.com&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Server:&lt;/strong&gt; Se refiere al servicio que expone los recursos protegidos a los que se pretende acceder. En nuestro ejemplo, este papel correspondería al servicio Google Photos de Google.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tal y como hemos apuntado, el objetivo de OAuth es impedir que el usuario tenga que introducir sus credenciales en aplicaciones de terceros para darles acceso a los recursos que pueda disponer en otras aplicaciones. Para conseguir esto, se realiza un proceso de autorización en el que intervienen los distintos actores implicados (“Resource Owner”, “Client Application” y “Authorization Server”) cuyo resultado es un token con el que la aplicación puede invocar las APIs que dan acceso a los recursos protegidos. Existen distintas variaciones de este flujo para adecuarse a diferentes escenarios:&lt;/p&gt;

&lt;h2 id=&quot;authorization-code-grant&quot;&gt;Authorization code grant&lt;/h2&gt;

&lt;p&gt;Se podría decir que este es el flujo OAuth2 principal y el que se debería utilizar en todos los casos en los que sea posible. Este flujo se puede utilizar cuando tenemos una aplicación en la que la lógica de presentación se lleva principalmente en el servidor, es decir, el servidor es el encargado de renderizar los HTML. A continuación se especifican los pasos que se llevan a cabo en este flujo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/authorization-code-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/authorization-code-grant.png&quot; alt=&quot;Authorization code grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;0. Hay un proceso previo en el que se registra la aplicación cliente en el “Authorization Server”. Para llevar a cabo este registro, hay que indicar el &lt;code class=&quot;highlighter-rouge&quot;&gt;client-id&lt;/code&gt;, el &lt;code class=&quot;highlighter-rouge&quot;&gt;client-secret&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect-uri&lt;/code&gt; de la aplicación que se está registrando. Normalmente los “Authorizations Servers” permiten registrar varias URIs de redirección. En el caso de Google, este registro se lleva a cabo en el portal de desarrolladores (más info &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2WebServer#enable-apis&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;1. y 2. Cuando el usuario intenta acceder a una parte de la aplicación que necesita poder acceder a su cuenta de Google Photos, se iniciará el flujo OAuth2. El objetivo de este flujo es que el usuario pueda dar su consentimiento a que la aplicación acceda a información de Google Photos en su nombre. Para ello, forzará una redirección del navegador a la URL de autenticación que expone el “Authorization Server” pasándole los siguientes parámetros en la URL como “query string”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;response_type:&lt;/em&gt; El valor de este parámetro indica el tipo de flujo que queremos iniciar. En este caso será &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; ya que es el valor correspondiente al “Authorization Code Grant”.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;client_id:&lt;/em&gt; El identificador del cliente que está iniciando el flujo.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;scope:&lt;/em&gt; En esta propiedad se indica a qué recursos del usuario pretende acceder la aplicación pudiendo establecerse más de un scope. En el ejemplo se ha utilizado &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.googleapis.com/auth/photoslibrary&lt;/code&gt; que &lt;a href=&quot;https://developers.google.com/photos/library/reference/rest/v1/albums/list#authorization-scopes&quot; target=&quot;_blank&quot;&gt;según la documentación&lt;/a&gt; es uno de los scopes que permiten acceder a los álbumes de un usuario.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;redirect_uri:&lt;/em&gt; La URI a la que el “Authorization Server” tiene que redirigir una vez que el usuario haya otorgado su consentimiento. Esta URI tiene que coincidir con alguna de las URI que se ha registrado para la aplicación.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;state:&lt;/em&gt; Se trata de un valor que la aplicación cliente utiliza para mantener un estado entre la petición que inició el flujo y la respuesta que llega en el callback. El “Authorization Server” incluye este valor en la petición que devuelve el control a la aplicación que inició el flujo OAuth. Este parámetro también se puede utilizar como mecanismo de defensa ante ataques CSRF (“Cross Site Request Forguery”) tal y como se indica en &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-10.12&quot; target=&quot;_blank&quot;&gt;el RFC6749&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. ,4. y 5. El usuario llega a la pantalla de login del “Authorization Server” (Google Accounts en el caso de google) e introduce sus credenciales.&lt;/p&gt;

&lt;p&gt;6. y 7. Una vez validadas las credenciales, el “Authorization Server” muestra una pantalla en la que se le enumeran los accesos o scopes que la aplicación cliente está solicitando. En este caso, se pediría permiso para poder acceder a los álbumes de fotos.&lt;/p&gt;

&lt;p&gt;8. y 9. El usuario da su consentimiento para que la aplicación cliente pueda acceder a la información solicitada y esto provoca una redirección a la url &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; que se había enviado al iniciar el flujo. En esta URL, se añadirá como parámetro un &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; y el &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; cuyo valor tendrá que ser el mismo que la aplicación cliente envió al iniciar el flujo.&lt;/p&gt;

&lt;p&gt;10. y 11. La aplicación cliente obtiene el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; de la URL e intercambia este &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por un &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; haciendo una petición POST al endpoint que el “Authorization Server” habrá dispuesto para tal efecto (en el caso de Google &lt;code class=&quot;highlighter-rouge&quot;&gt;https://oauth2.googleapis.com/token&lt;/code&gt;). Además del &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;, también es necesario que la aplicación cliente envíe su &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; y su &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; en el cuerpo de la petición.&lt;/p&gt;

&lt;p&gt;12. La aplicación cliente puede utilizar el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que ha recibido para obtener los álbumes que el usuario tiene alojados en Google Photos. Para conseguir esta información puede hacer peticiones al servicio &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.googleapis.com/auth/photoslibrary&lt;/code&gt; enviando el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en la cabecera HTTP “Authorization: Bearer” tal y como se indica en la &lt;a href=&quot;https://tools.ietf.org/html/rfc6750&quot; target=&quot;_blank&quot;&gt;especificación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El último paso consistiría en que el “Resource Server” validase el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; antes de devolver la información protegida. La forma en la que se lleve a cabo esta validación dependerá principalmente de la naturaleza del token ya que los “Authorization Server” normalmente pueden enviar dos tipos de tokens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JWTs firmados:&lt;/strong&gt; Un JWT es un string con formato JSON que está firmado y codificado siguiendo los criterios especificados en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot;&gt;RFC 7519&lt;/a&gt;. El hecho de que el contenido del JWT esté firmado, hace que se pueda verificar la validez del mismo sin tener que hacer ninguna llamada remota. Por lo tanto, si el resource server recibe un token de este tipo, puede verificarlo y devolver directamente la información solicitada.&lt;/p&gt;

    &lt;p&gt;Los JWTs &lt;a href=&quot;https://tools.ietf.org/html/rfc7519#section-4.1.4&quot; target=&quot;_blank&quot;&gt;tienen una propiedad (&lt;code class=&quot;highlighter-rouge&quot;&gt;exp&lt;/code&gt;)&lt;/a&gt; en la que se indica la fecha de expiración del mismo. Por lo tanto, el resource server tendrá que verificar también que el JWT no esté caducado.&lt;/p&gt;

    &lt;p&gt;Utilizar JWTs como tokens de acceso es una práctica bastante habitual. El objetivo de utilizar este tipo de tokens autocontenidos suele ser evitar el tener que hacer peticiones adicionales al “Authorization Server” para verificar si el token es válido. De esta forma, el token será válido mientras no se alcance su fecha de expiración.&lt;/p&gt;

    &lt;p&gt;Sin embargo, ¿qué ocurre en caso de que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; se revoque por cualquier motivo? Desde el panel de administración de Google por ejemplo, un usuario puede quitar en cualquier momento los permisos que ha otorgado a una aplicación determinada. Esto provoca que todos los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; que se hubieran expedido para esa aplicación sean revocados de inmediato.&lt;/p&gt;

    &lt;p&gt;En este escenario, lo que ocurriría es que el “Resource Server” no sería consciente de esta revocación porque lo único que hace es validar que esté correctamente firmado y que la fecha de expiración que contiene no haya vencido. En definitiva, seguiría aceptando el token revocado hasta que este caducase. Este es uno de los motivos por los que no se aconseja utilizar JWTs como &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tokens Opacos&lt;/strong&gt;: Al contrario que los JWT, los tokens opacos no contienen ningún tipo de información legible para el cliente y por este motivo, pueden ser una secuencia de caracterés pseudoaleatorios. Este hecho hace que el “Authorization Server” tenga que mantener un registro de los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que ha expedido y que tenga que exponer un endpoint al que el “Resource Server” pueda hacer peticiones para verificar la validez de los token que recibe. A este proceso de validación se le llama introspección y está especificado en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7662&quot; target=&quot;_blank&quot;&gt;RFC 7662.&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;La recomendación es utilizar este tipo de tokens como &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y hacer verificaciones utilizando el endpoint de introspección.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; suelen tener una fecha de expiración muy cercana en el tiempo (por debajo de una hora) para que si este se ve comprometido, solo pueda explotarse durante un corto periodo de tiempo. Esto que en un principio suena lógico tiene un inconveniente:&lt;/p&gt;

&lt;p&gt;¿Qué ocurre cuando el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; que una aplicación ha obtenido legitimamente caduca? ¿Hay que volver a iniciar el flujo OAuth pidiendo el consentimiento del usuario final? Esto no parece muy usable en la mayoría de casos.&lt;/p&gt;

&lt;p&gt;Para dar respuesta a esta problemática, en la especificación OAuth2 se recoge la posibilidad de obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; utilizando &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-6&quot; target=&quot;_blank&quot;&gt;un flujo de refresco&lt;/a&gt;. Para ejecutar este proceso de refresco, es necesario haber obtenido previamente un token adicional denominado &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;. Este token viene junto con el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 11) del diagrama anterior siempre y cuando se hayan dado las condiciones para ello. En el caso de Google por ejemplo, la condición para que devuelva un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; es que en la petición que inicia el flujo se añada el parámetro &lt;code class=&quot;highlighter-rouge&quot;&gt;access_type&lt;/code&gt; con el valor &lt;code class=&quot;highlighter-rouge&quot;&gt;offline&lt;/code&gt;. &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2WebServer#obtainingaccesstokens&quot; target=&quot;_blank&quot;&gt;Este&lt;/a&gt; es el apartado de la documentación en el que se hace referencia a este parámetro:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/access_type.png&quot; alt=&quot;Google OAuth2 access_type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tal y como se ha comentado, el “Authorization Code Grant” es el flujo recomendado para la mayoría de casos pero tiene un requisito que no todas las aplicaciónes pueden cumplir: necesita poder almacenar un &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; de forma segura ya que este valor es necesario para hacer el intercambio del &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 10) del proceso.&lt;/p&gt;

&lt;p&gt;Hay aplicaciones que por su naturaleza no pueden almacenar secretos sin que estos se vean fácilmente comprometidos. Dos ejemplos claros de este tipo de aplicaciones serían:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Las aplicaciones cuya lógica de presentación se ejecuta integramente en el navegador haciendo uso de Javascript (también conocidas como single page applications o SPAs).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aplicaciones móviles nativas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decimos que este tipo de aplicaciones no pueden almacenar secretos porque el código es fácilmente accesible por el usuario final. En el caso de las aplicaciones SPA por ejemplo, es suficiente con abrir las herramientas de desarrollador e inspeccionar el código fuente o analizar las peticiones que se hacen al servidor para obtener el secreto. Se puede aplicar prácticamente lo mismo para las aplicaciones móviles nativas aunque el esfuerzo necesario para poder lograr esta información sea un poco mayor.&lt;/p&gt;

&lt;p&gt;Es en este punto cuando los desarrolladores empezamos a dirigir nuestra atención hacia otros flujos que también se contemplan en la especificación como pueden ser el “Resource Owner Password Credentials Grant” y el “Implicit Grant”.&lt;/p&gt;

&lt;h2 id=&quot;resource-owner-password-credentials-grant&quot;&gt;Resource owner password credentials grant&lt;/h2&gt;

&lt;p&gt;En este flujo, se utilizan directamente las credenciales del resource owner como forma de autorización para obtener un token. Este sería el diagrama del flujo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/resource-owner-password-credentials-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/resource-owner-password-credentials-grant.png&quot; alt=&quot;Resource owner credentials grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver en el diagrama, en este flujo el usuario introduce sus credenciales directamente en la aplicación cliente para que haciendo uso de estas credenciales, la aplicación pueda solicitar tokens de acceso al “Authorization Server”.&lt;/p&gt;

&lt;h3 id=&quot;un-momento&quot;&gt;Un momento…&lt;/h3&gt;

&lt;p&gt;¿No habíamos dicho que con OAuth precisamente se busca evitar el tener que introducir las credenciales en aplicaciones de terceros?&lt;/p&gt;

&lt;p&gt;Efectivamente y es por eso que en la especificación se indica lo siguiente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The credentials should only be used when there is a high
degree of trust between the resource owner and the client (e.g., the
client is part of the device operating system or a highly privileged
application), and when other authorization grant types are not
available (such as an authorization code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Es decir, dicen que solo se debe utilizar este flujo en aplicaciones que son de un alto nivel de confianza y cuando no se puede utilizar ningún otro flujo. A pesar de esto, en la práctica &lt;strong&gt;la recomendación es no utilizar este flujo en ningún caso&lt;/strong&gt;. Los motivos principales por los que utilizar este flujo se considera mala práctica son los siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Se fomentan malos hábitos de los usuarios ya que este flujo es muy parecido a un ataque de “phishing”: se le presenta un formulario al usuario en el que se le pide que introduzca sus credenciales de otra aplicación como puede ser Google en lugar de redirigirle a la pantalla de autenticación de esa aplicación.&lt;/p&gt;

    &lt;p&gt;El usuario debería acostumbrarse a únicamente introducir sus credenciales en la pantalla de login de la plataforma y desconfiar si cualquier otra aplicación le pide que las introduzca.&lt;/p&gt;

    &lt;p&gt;Google por ejemplo, utiliza una pantalla central para gestionar la autenticación y es la misma tanto para sus propios productos (Gmail, Google Calendar, Drive,…) como para las integraciones con terceros.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Las credenciales de un usuario son información altamente sensible. Por lo tanto, es preferible que sean manejadas por el menor número de aplicaciones posible con el objetivo de reducir las probabilidades de que pueda haber fugas de información tanto de manera malintencionada como por accidente (vía logs, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;En el flujo “Resource Owner Password Credentials Grant” el usuario introduce sus credenciales pero no tiene el control sobre qué uso se va a hacer de los mismos. Al explicar el “Authorization Code Grant” se ha visto como el “Authorization Server” se encarga de mostrar una pantalla de consentimiento al usuario para autorizar que la aplicación pueda realizar una serie de acciones (scopes) en su nombre. Por el contrario, en el “Resource Owner Password Credentials Grant”, una vez que la aplicación dispone de las credenciales, puede establecer los scopes que considere oportunos sin el consentimiento del usuario.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Debido a estas problemáticas y otras que no se han recogido en este artículo, &lt;strong&gt;este flujo no está soportado por Google y muchos otros Authorization Servers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-grant&quot;&gt;Implicit grant&lt;/h2&gt;

&lt;p&gt;Este es el flujo que se ha venido recomendando para aplicaciones móviles y SPAs hasta hace no demasiado tiempo. El diagrama de este flujo es el siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/implicit-grant.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/implicit-grant.png&quot; alt=&quot;Implicit grant&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este flujo es una versión simplificada del “Authorization Code Grant”. En la primera petición se envía el &lt;code class=&quot;highlighter-rouge&quot;&gt;response_type&lt;/code&gt; con valor a &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; para indicarle al “Authorization Server” que se va a usar el flujo “Implicit Grant”. La diferencia con el “Authorization Code Grant” es que una vez el usuario final se autentica y otorga su consentimiento, el “Authorization Server” hace la redirección al &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; pasándole el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; directamente como parte de la URL. Es decir, no existen los pasos 10) y 11) del flujo “Authorization Code Grant” en el que se obtiene un &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; temporal que hay que intercambiar por un &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; haciendo uso del &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gracias a esto, no es necesario disponer de un &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; para llevar a cabo este flujo y por lo tanto, el flujo se puede utilizar en aplicaciones que no pueden almacenar secretos de forma segura.&lt;/p&gt;

&lt;p&gt;Todo esto suena muy bien pero si el “Implicit Grant” es más simple que el “Authorization Code Grant” y además no necesita secretos, ¿por qué no lo utilizamos en todos los casos?&lt;/p&gt;

&lt;h3 id=&quot;buena-pregunta&quot;&gt;Buena pregunta…&lt;/h3&gt;

&lt;p&gt;El caso es que este flujo tiene sus inconvenientes tal y como se recoge en la &lt;a href=&quot;https://tools.ietf.org/html/rfc6819&quot; target=&quot;_blank&quot;&gt;RFC6819&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;riesgo-de-interceptar-el-access_token&quot;&gt;Riesgo de interceptar el access_token&lt;/h3&gt;

&lt;p&gt;Tal y como se ha explicado, el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; viene como parte de la URL que hace la redirección hacia la aplicación cliente y no en el cuerpo de la respuesta de una petición POST como ocurre en flujo “Authorization Code Grant”. Este detalle es muy importante ya que al venir el token en la URL, este puede quedar registrado en logs o históricos. Por lo tanto, cualquiera con acceso a este tipo de información en la aplicación cliente podría obtener el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y explotarlo de manera ilegítima.&lt;/p&gt;

&lt;p&gt;Para mitigar este problema, en lugar de utilizar un “query string” para pasar este valor, se utiliza &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/hash&quot; target=&quot;_blank&quot;&gt;un fragmento o hash&lt;/a&gt;. Si nos fijamos en la URL del paso 6) del diagrama, podemos ver cómo el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; se envía como fragmento haciendo uso del caracter &lt;strong&gt;#&lt;/strong&gt;: https://…index.html#access_token=m4odaim6h…&lt;/p&gt;

&lt;p&gt;Los navegadores, no envían la parte del fragmento al servidor. Esto quiere decir que cuando el navegador haga la petición a index.html para descargarse la aplicación SPA, no enviará todo lo que sigue al caracter &lt;strong&gt;#&lt;/strong&gt;. De esta forma, se consigue limitar la superficie de un posible ataque ya que sabremos que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; no quedará registrado en los logs del servidor en el que se aloja la aplicación cliente. Sin embargo, el fragmento sí que quedaría almacenado en el histórico del navegador.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6819#section-4.4.2&quot; target=&quot;_blank&quot;&gt;En este RFC&lt;/a&gt;, se enumeran esta y otras amenazas relacionadas. Incluso en la propia especificación OAuth2 se alerta de las implicaciones de seguridad que tiene utilizar el flujo “Implicit Grant”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Implicit grants improve the responsiveness and efficiency of some
   clients (such as a client implemented as an in-browser application),
   since it reduces the number of round trips required to obtain an
   access token.  However, &lt;strong&gt;this convenience should be weighed against
   the security implications of using implicit grants&lt;/strong&gt;, such as those
   described in Sections 10.3 and 10.16, especially when the
   authorization code grant type is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;no-permite-el-uso-de-refresh_token&quot;&gt;No permite el uso de refresh_token&lt;/h3&gt;

&lt;p&gt;En el punto anterior se ha comentado que la forma en la que las aplicaciones cliente obtienen el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; cuando se utiliza “Implicit Grant” no es demasiado seguro. Si bien es cierto que las consecuencias de una fuga de &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; son limitadas porque los &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; expiran en un periodo de tiempo muy corto, no se podría decir lo mismo de un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Los &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; tienen un ciclo de vida mucho más largo ya que se utilizan para obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; sin necesidad de que el usuario final tenga que estar dando su consentimiento continuamente. En el caso de Google por ejemplo, el &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; &lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2#expiration&quot; target=&quot;_blank&quot;&gt;caduca cuando no haya sido utilizado durante 6 meses&lt;/a&gt;. Por lo tanto, la fuga de un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; sería catastrófico ya que podría utilizarse para generar &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; durante un largo periodo de tiempo. Es por esto que la propia especificación de OAuth2 advierte que la expedición de tokens de refresco no está soportada cuando se utiliza “Implicit Grant”.&lt;/p&gt;

&lt;p&gt;Como ya hemos dicho, el no poder utilizar tokens de refresco atenta contra la usabilidad ya que cada vez que el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; caduque, tendremos que volver a iniciar el flujo y redirigir al usuario al “Authorization Server” para que vuelva a dar su consentimiento. Para dar respuesta a este problema, existe el concepto de “Silent Refresh” que consiste en utilizar un IFrame para obtener nuevos &lt;code class=&quot;highlighter-rouge&quot;&gt;access_tokens&lt;/code&gt; de forma silenciosa. Este “hack” tiene varios condicionantes y riesgos que no se van a extender en este artículo. Se puede leer más información sobre cómo efectuar un “silent refresh” &lt;a href=&quot;https://www.scottbrady91.com/OpenID-Connect/Silent-Refresh-Refreshing-Access-Tokens-when-using-the-Implicit-Flow&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si no recomendamos utilizar ni “Resource Owner Password Credentials Grant” ni “Implicit Grant” para nuestras aplicaciones móviles o SPAs, ¿qué otras opciones tenemos? La respuesta a esta pregunta es…&lt;/p&gt;

&lt;h2 id=&quot;authorization-code-grant-with-pkce&quot;&gt;Authorization Code Grant with PKCE&lt;/h2&gt;

&lt;p&gt;El flujo “Authorization Code Grant with PKCE” nació para dar respuesta a todos los problemas asociados a las aplicaciones públicas (SPAs y móviles) ya que se trata de una extensión de “Authorization Code Grant” dirigido a este tipo de aplicaciones. Las motivaciones y particularidades de este flujo se recogen en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot; target=&quot;_blank&quot;&gt;RFC 7636&lt;/a&gt; y este es su diagrama correspondiente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-27-oauth2/authz-code-grant-pkce.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-27-oauth2/authz-code-grant-pkce.png&quot; alt=&quot;Authorization code grant with PKCE&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tal y como se puede ver en el diagrama, el flujo es idéntico a un “Authorization Code Grant” solo que en el paso 1) se añade un parámetro extra llamado &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; y en el paso 7) en lugar de enviar el &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; se envía otro parámetro denominado &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;. Es decir, la combinación de &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; sustituyen al &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; creando una especie de secreto temporal y único por cada flujo.&lt;/p&gt;

&lt;h3 id=&quot;cómo-funciona-esto&quot;&gt;¿Cómo funciona esto?&lt;/h3&gt;

&lt;p&gt;Al inicio del flujo, la aplicación cliente genera un &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; que no es más que un string aleatorio criptográfico que tiene que cumplir &lt;a href=&quot;https://tools.ietf.org/html/rfc7636#section-4.1&quot; target=&quot;_blank&quot;&gt;una serie de condiciones&lt;/a&gt;. A continuación, se crea el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; que es un derivado del &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;. Hay múltiples formas de generar el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; pero la recomendación es utilizar SHA-256 aplicando una fórmula del estilo &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))&lt;/code&gt;. La forma en la que se hace la verificación de este “challenge” es la siguiente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;En el primer paso del flujo, la aplicación cliente guarda el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; y envía el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; al “Authorization Server”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;El “Authorization Server” almacena el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; recibido y una vez que el usuario da su consentimiento, responde con el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cuando la aplicación cliente va a intercambiar el &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; por el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; en el paso 7), envía también el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; que había guardado previamente y que es el origen desde el que se había creado el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; enviado en el primer paso.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Por último, el “Authorization Server” aplica la fórmula de derivación sobre este &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt; y lo compara con el &lt;code class=&quot;highlighter-rouge&quot;&gt;code_challenge&lt;/code&gt; que había guardado en el primer paso. Si los códigos son iguales, la petición es válida y devuelve el &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt; y opcionalmente el &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt;. Los criterios que sigue el “Authorization Server” para devolver o no un &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; son los mismos que en el “Authorization Code Grant”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por lo tanto, este flujo tienes las ventajas del “Authorization Code Grant” y puede utilizarse sin necesidad de disponer de un secreto “estático” ya que este se genera en caliente cada vez que se inicia un nuevo flujo.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;En este artículo se ha hecho una introducción a OAuth en el que se han explicado cuáles fueron las motivaciones para su creación así como la forma en la que funciona.&lt;/p&gt;

&lt;p&gt;Se han repasado los principales flujos que se contemplan en la especificación para permitir a un usuario dar autorización a aplicaciones de terceros con el objetivo de que puedan realizar acciones en su nombre.&lt;/p&gt;

&lt;p&gt;Si bien para aplicaciones web tradicionales en las que el renderizado de los HTML se realiza en servidor el flujo a utilizar está muy claro (Authorization Code Grant), cuando tratamos de buscar el flujo a utilizar para SPAs o aplicaciones móviles la información disponible es bastante confusa.&lt;/p&gt;

&lt;p&gt;Debido a la evolución de la especificación o a la ambigüedad del propio texto, es fácil encontrar en internet artículos o comentarios en los que se invita a utilizar flujos que son potencialmente peligrosos como pueden ser “Resource Owner Password Grant” o “Implicit Grant”. &lt;strong&gt;La recomendación es que para este tipo de aplicaciones se utilice el flujo “Authorization Code Grant with PKCE” que salva la problemática de los secretos haciendo uso de criptografía.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En este artículo se han dejado a un lado los flujos en los que no interviene el usuario como puede ser el “Client Credentials Grant” u otros en los que no se utiliza un navegador como el “Device Authorization Grant”. De igual forma, se ha hablado solo de autorización que es lo que cubre OAuth y dejado a un lado la autenticación. Quizás tratemos estos temas relacionados en futuras publicaciones.&lt;/p&gt;

&lt;p&gt;Por último, se ha visto que OAuth no es un protocolo sencillo de implementar y por lo tanto se recomienda utilizar librerías ya existentes que encapsulen toda esta complejidad.&lt;/p&gt;</content><author><name>aritz</name></author><category term="autenticación," /><category term="oauth," /><category term="oauth2," /><category term="resource" /><category term="owner" /><category term="password" /><category term="credentials," /><category term="authorization" /><category term="code," /><category term="implicit," /><category term="silent" /><category term="refresh" /><summary type="html">El estándar OAuth2 es tan conocido como complejo. El hecho de que sea un estándar en evolución y el exceso de información disponible, hace que sea muy fácil encontrar artículos con información contradictoria o que se recomiende el uso de flujos que actualmente se consideran “legacy” por motivos de seguridad.</summary></entry><entry xml:lang="es"><title type="html">Hemos estado en la Commit Conf 2019</title><link href="https://blog.arima.eu/es/2019/12/02/commit-conf-2019.html" rel="alternate" type="text/html" title="Hemos estado en la Commit Conf 2019" /><published>2019-12-02T09:00:00+00:00</published><updated>2019-12-02T09:00:00+00:00</updated><id>https://blog.arima.eu/2019/12/02/commit-conf-2019</id><content type="html" xml:base="https://blog.arima.eu/2019/12/02/commit-conf-2019.html">&lt;p&gt;Hace dos semanas asistí a la Commit Conf 2019 en Madrid! en este post os voy a contar un poco mi experiencia allí y qué charlas me llamaron más la atención.&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;es&quot;&gt;
Egun on Madrid! Ya estamos preparados para que empiece la &lt;a href=&quot;https://twitter.com/hashtag/commitconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#commitconf&lt;/a&gt; &lt;a href=&quot;https://t.co/QUdSZIkOkA&quot;&gt;pic.twitter.com/QUdSZIkOkA&lt;/a&gt;&lt;/div&gt;
— Fernando Lozano (@frlzno) &lt;a href=&quot;https://twitter.com/frlzno/status/1197791163169886208?ref_src=twsrc%5Etfw&quot;&gt;November 22, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;
&lt;script async=&quot;&quot; charset=&quot;utf-8&quot; src=&quot;https://platform.twitter.com/widgets.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;La Commit&lt;/strong&gt; en general estuvo muy bien, al tener bastante variedad y cantidad de charlas (140 en dos días) siempre tienes alguna charla que a priori parece interesante. Antes de ir a la Commit, me llamó la atención preparando las charlas a las que iba a ir, ver la cantidad de charlas sobre Microservicios y DevOps que había, entiendo que sean temas que están en auge pero que todo el mundo hable de lo mismo, me empieza a aburrir.&lt;/p&gt;

&lt;p&gt;Sobre &lt;strong&gt;los ponentes&lt;/strong&gt;, la mayoría muy buenos, saben transmitir esa confianza sobre el escenario que parecen estar en el salón de su casa. También los había más “novatos” a los que se les notaba más nerviosos, con sus miedos y fobias a hablar en público pero que también lo hicieron muy bien.&lt;/p&gt;

&lt;p&gt;Sin embargo, no todo es de color de rosa, es una &lt;strong&gt;conferencia bastante masificada&lt;/strong&gt;, a pesar de que hay nueve tracks, fuese a la charla que fuese siempre estaba llena. La gente sentada en el suelo de las aulas, de pie, corriendo de un lado a otro… daba una sensación de agobio constante. Al final lo que hacía la gente es salir antes de las charlas para coger sitio en las siguientes.&lt;/p&gt;

&lt;p&gt;Dejando a un lado un poco mis impresiones generales de la Commit Conf, me gustaría destacar cuáles fueron las que más me llamaron la atención:&lt;/p&gt;

&lt;p&gt;Una de las mejores charlas a la que fui, la primera de la Commit, fue la de &lt;strong&gt;“Refactorizar rima con Simplificar, o por qué el miedo conduce a código inmantenible”&lt;/strong&gt; de Javier Abadía. Javier nos ayudaba a entender la importancia de refactorizar y de dejar nuestros miedos a un lado a la hora de hacerlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/1.jpeg&quot; alt=&quot;Refactorizar rima con Simplificar, o por qué el miedo conduce a código inmantenible&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra buena charla fue la de &lt;strong&gt;“El futuro es ahora: WebAssembly”&lt;/strong&gt; de Daniel Ramos. Web Assembly es una iniciativa liderada por equipos de desarrollo de Microsoft, Mozilla y Google diseñada para ejecutar código nativo (bytecode) en un navegador sin necesidad de instalar nada extra en él.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/2.jpeg&quot; alt=&quot;El futuro es ahora: WebAssembly&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JavaScript en su día no se pensó para lo que se está utilizando ahora, es verdad que ha ido evolucionando pero todavía no puede competir en rendimiento con código C y C++. Aquí es donde entra WebAssembly. Utiliza la potencia que tienen lenguajes de más alto nivel y se compilan a código nativo para que luego posteriormente sea utilizado en el navegador.&lt;/p&gt;

&lt;p&gt;Está más orientado a realidad virtual, herramientas de colaboración, software CAD, simulación científica… Pero al final se puede aplicar a multitud de casos. En la presentación Daniel comentó que las aplicaciones web de Autocad y Lightroom usan esta tecnología.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://takahirox.github.io/WebAssembly-benchmark/&quot; target=&quot;_blank&quot;&gt;Aquí&lt;/a&gt; tenéis algunos ejemplos online comparando lo que tarda Javascript vs WebAssembly, como podéis ver hay algunos casos donde sale más rentable utilizar WebAssembly.&lt;/p&gt;

&lt;p&gt;Otra charla que me pareció interesante fue la que dieron Manuel Vilachán y Antonio Marin titulada &lt;strong&gt;“WebAuthn: No más passwords por favor!”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-02-commit-conf-2019/3.jpeg&quot; alt=&quot;WebAuthn: No más passwords por favor!&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebAuthn es un estándar web oficial de la W3C que permite el inicio de sesión en Internet, en todo tipo de servicios online, sin necesidad de un usuario y contraseña. En su lugar, los usuarios pueden hacer uso de los datos biométricos, tokens para hardware y aplicaciones determinadas.&lt;/p&gt;

&lt;p&gt;Con este método, las páginas web que verifican la identidad del usuario recurren a la API de autenticación web en el navegador. El usuario, por su parte, confirma ser quien es en su propio equipo con un escáner de huella dactilar o con un token conectado a su ordenador. Los datos personales de identidad, como la huella digital, no salen fuera del dispositivo. Es el navegador el que envía la verificación de su identidad, cifrada por medio de una clave pública al servicio web.&lt;/p&gt;

&lt;p&gt;Como podéis ver en &lt;a href=&quot;https://caniuse.com/#search=webauthn&quot; target=&quot;_blank&quot;&gt;Can I Use&lt;/a&gt; la mayoría de las versiones estables de los principales navegadores lo soportan.&lt;/p&gt;

&lt;p&gt;WebAuthn ofrece varias ventajas para los usuarios. La comodidad es el factor que debería convencernos a todos, ya no tenemos que memorizar más contraseñas! De aquí también se derivaría una mayor seguridad, porque el uso de claves no es un método seguro al cien por cien, ya que pueden romperse con ataques de fuerza bruta y son fáciles de interceptar con phishing. Tampoco permiten lanzar un ataque de man in the middle, puesto que no se envían datos sensibles que pueden ser interceptados. El método de clave pública protege de forma criptográfica el envío del certificado de autenticación.&lt;/p&gt;

&lt;p&gt;El mayor inconveniente aparece en el momento de intentar loguearte con diferentes dispositivos, es decir, si tú quieres acceder a Twitter, desde el móvil, desde el escritorio, desde cualquier otro dispositivo, debes registrar un nuevo autenticador en la aplicación web por cada dispositivo, por lo que puede ser un poco engorro tener que hacer eso por cada dispositivo nuevo.&lt;/p&gt;

&lt;p&gt;Y por último, para mí LA charla, &lt;strong&gt;“Unbiasing teams”&lt;/strong&gt; de Félix López. Una charla que recomiendo verla en vídeo cuando lo suban a Youtube. Es una charla bastante densa y poco técnica pero que a mí me encantó. Félix explica los factores psicológicos que nos afectan en el día a día en la toma de decisiones y en el comportamiento personal con el resto del equipo. Con una serie de ejemplos nos explica cómo a veces vemos situaciones como normales que en realidad están fundamentadas en esquemas y estereotipos.&lt;/p&gt;

&lt;p&gt;Me ha parecido una conferencia de lo más completa, dos días llenos de charlas variadas e interesantes. Una experiencia enriquecedora y satisfactoria. Quiero dar las gracias a la organización y voluntarios por su excelente trabajo y por su disponibilidad en todo momento.&lt;/p&gt;

&lt;p&gt;En el canal de &lt;a href=&quot;https://www.youtube.com/channel/UCd_1KHg4t2VKGsSDF8OD5Cw&quot; target=&quot;_blank&quot;&gt;Youtube&lt;/a&gt; de Commit encontrarás las charlas que he mencionado en este post.&lt;/p&gt;

&lt;p&gt;¡Hasta el año que viene!&lt;/p&gt;</content><author><name>fernando</name></author><category term="conferencias," /><category term="commit" /><category term="conf" /><summary type="html">Hace dos semanas asistí a la Commit Conf 2019 en Madrid! en este post os voy a contar un poco mi experiencia allí y qué charlas me llamaron más la atención.</summary></entry><entry xml:lang="es"><title type="html">Nuestro proceso de selección</title><link href="https://blog.arima.eu/es/2019/10/24/arima-proceso-seleccion.html" rel="alternate" type="text/html" title="Nuestro proceso de selección" /><published>2019-10-24T09:00:00+00:00</published><updated>2019-10-24T09:00:00+00:00</updated><id>https://blog.arima.eu/2019/10/24/arima-proceso-seleccion</id><content type="html" xml:base="https://blog.arima.eu/2019/10/24/arima-proceso-seleccion.html">&lt;p&gt;Por lo general, los procesos de selección suelen convertirse en situaciones incómodas para los candidatos. A los nervios habituales, se une el hecho de que los entrevistadores recurren cada vez más a técnicas en las que se busca incomodar al entrevistado. Para conseguir este objetivo, es habitual hacer preguntas extrañas o provocar situaciones tensas que pretenden psicoanalizar a los candidatos. Desde los típicos ¿cuál es tu mayor virtud? o ¿cuál es tu mayor defecto? (al que la mayoría contesta  que ser demasiado perfeccionista), hasta otro tipo de cuestiones mucho más impertinentes y personales que tienen como objetivo analizar el comportamiento del candidato en situaciones de tensión.&lt;/p&gt;

&lt;p&gt;A estas preguntas que podemos considerar más personales, hay que añadir que muchas empresas tecnológicas incorporan pruebas prácticas a los que los candidatos se tienen que enfrentar delante de una pizarra. Cuanto más grande (y cool) sea la empresa aparentemente, más probable es que incluyan este tipo de pruebas en sus procesos de selección. Habitualmente, en este tipo de ejercicios se pide a los candidatos que implementen algoritmos de ordenación u otro tipo de ejercicios de bajo nivel con la única ayuda de un rotulador y la famosa pizarra blanca. Se dice que esta tendencia comenzó en Microsoft debido a que a Bill Gates le encantaban los rompecabezas.&lt;/p&gt;

&lt;p&gt;Si tengo que ser sincero, estoy seguro de que yo no sería capaz de pasar ninguna de esas pruebas. Necesitaría de una preparación específica para superar ese tipo de ejercicios. A menudo, me encuentro a mí mismo haciendo búsquedas absurdas en Google o Stackoverflow para recordar por ejemplo, cómo se eliminan los espacios en blanco de un string en un lenguaje de programación determinado. ¿Me convierte eso en un mal programador? No necesariamente…&lt;/p&gt;

&lt;p&gt;En ARIMA no pretendemos que los candidatos cumplan las funciones de un compilador o que sean capaces de escribir en una pizarra el código Java correspondiente a un algoritmo de ordenación de arrays. Esta no es una forma realista de valorar candidatos ya que no es la forma en la que se trabaja en el día a día. Para hacer ese tipo de tareas ya están los IDEs, los compiladores, las librerías que implementan algoritmos e internet para buscarlos.&lt;/p&gt;

&lt;p&gt;Lo que sí nos gusta es sentarnos delante de un bloque de código y compartir impresiones sobre el mismo. Nos encanta discutir sobre código y cualquier excusa es buena:  desde un proyecto personal, hasta algún pequeño ejercicio que nosotros hayamos podido enviar para implementar en casa y sin ningún tipo de presión. Cuando optamos por enviar un ejercicio, siempre se trata de cosas muy sencillas como puede ser implementar un CRUD en un lenguaje en el que los candidatos se sienten cómodos. Más que el resultado del ejercicio, lo que nos interesa conocer es el por qué de las decisiones que se han tomado en el proceso. Esto puede proporcionar mucha información sobre la forma que tiene cada persona de razonar y afrontar los desarrollos.&lt;/p&gt;

&lt;p&gt;En cuanto a la parte personal, nos gusta que la gente nos hable de sus inquietudes, lo que le gusta hacer y lo que le ha motivado a la hora de elegir el desarrollo de software como oficio. No hay preguntas trampa para las que hay que traer una respuesta preparada desde casa, simplemente queremos conocer a la persona.&lt;/p&gt;

&lt;p&gt;Creemos que esta forma de acometer los procesos de selección son mucho menos hostiles y fomentan que los candidatos puedan presentarse tal y como son en un entorno tranquilo. A fín de cuentas, crear situaciones de estrés o hacer que las personas se sientan acorraladas, no parece la mejor forma de iniciar una relación laboral duradera.&lt;/p&gt;

&lt;p&gt;En ARIMA siempre estamos interesados en conocer e incorporar desarrolladores al equipo que nos ayuden a ser mejores. Si tienes interés en conocernos, no dudes en contactarnos enviando un email a &lt;a href=&quot;arima@arima.eu&quot;&gt;arima@arima.eu&lt;/a&gt;. Háblanos sobre ti presentándote tal y como eres y dejando a un lado las típicas plantillas de carta de presentación frías y formales.&lt;/p&gt;</content><author><name>aritz</name></author><category term="recruiting," /><category term="contratación," /><category term="proceso" /><category term="de" /><category term="selección," /><category term="remote" /><category term="working" /><summary type="html">Por lo general, los procesos de selección suelen convertirse en situaciones incómodas para los candidatos. A los nervios habituales, se une el hecho de que los entrevistadores recurren cada vez más a técnicas en las que se busca incomodar al entrevistado. Para conseguir este objetivo, es habitual hacer preguntas extrañas o provocar situaciones tensas que pretenden psicoanalizar a los candidatos. Desde los típicos ¿cuál es tu mayor virtud? o ¿cuál es tu mayor defecto? (al que la mayoría contesta que ser demasiado perfeccionista), hasta otro tipo de cuestiones mucho más impertinentes y personales que tienen como objetivo analizar el comportamiento del candidato en situaciones de tensión.</summary></entry></feed>